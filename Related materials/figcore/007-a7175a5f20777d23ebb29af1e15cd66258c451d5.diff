diff --git a/src/figcore/api/article/version_api.py b/src/figcore/api/article/version_api.py
index 7a620ee1cc..3e675ebd2c 100644
--- a/src/figcore/api/article/version_api.py
+++ b/src/figcore/api/article/version_api.py
@@ -1312,7 +1312,18 @@ def references(self):
         :returns: List
         """
 
-        return self._metadata.references
+        result = self.bcheck_references()
+        return result
+
+    @property
+    @ArticleChecker.ensure("metadata")
+    def related_materials(self):
+        """Article references
+
+        :returns: List
+        """
+        result = self.bcheck_related_material()
+        return result
 
     @property
     def citation_string(self):
@@ -1753,5 +1764,43 @@ def update_thumb(self, thumb_url):
         data = ArticleVersionValidator.sanitize_input(data)
         ArticleVersionInternals.update_version(self.article_id, self.version, data)
 
+    def bcheck_references(self):
+        if self._metadata.references and isinstance(self._metadata.references[0], int):
+            references = []
+            for i in self._metadata.references:
+                references.append(APIEntity.ENTITIES.RelatedMaterial(i).url)
+            return references
+        return self._metadata.references
+
+    def bcheck_related_material(self):
+        if (self._metadata.references and isinstance(self._metadata.references[0], str)) or (
+            not self.metadata.references and self.resource and self.resource.resource_doi
+        ):
+            references = []
+            if self._metadata.references:
+                for reference in self._metadata.references:
+                    FigcoreLogger.info(f"Converting {reference}")
+                    data = {"identifier": reference, "account_id": self.account.id}
+                    if ArticleValidator.validate_doi(reference):
+                        data["identifier_type"] = "DOI"
+                    material = APIEntity.ENTITIES.RelatedMaterial.create(data)
+                    references.append(material.id)
+            if self.resource and self.resource.resource_doi:
+                material = APIEntity.ENTITIES.RelatedMaterial.create(
+                    {
+                        "identifier": self.resource.resource_doi,
+                        "identifier_type": "DOI",
+                        "title": self.resource.resource_title,
+                        "relation": "IsSupplementTo",
+                        "account_id": self.account.id,
+                        "is_linkout": True,
+                    }
+                )
+                references.append(material.id)
+            ArticleVersionInternals.update_version(self.article_id, self.version, references)
+            self._metadata = None  # force reloading metadata
+            return references
+        return self._metadata.references
+
 
 APIEntity.ENTITIES.ArticleVersion = ArticleVersion
diff --git a/src/figcore/api/related_material/api.py b/src/figcore/api/related_material/api.py
index b1e75f5c53..bc44fd045e 100644
--- a/src/figcore/api/related_material/api.py
+++ b/src/figcore/api/related_material/api.py
@@ -47,7 +47,7 @@ def is_linkout(self):
 
     @property
     @Checker.ensure("model")
-    def url(self):
+    def link(self):
         resolver = IDENTIFIER_TYPE[self.identifier_type]["resolver"]
         return f"{resolver}{self.identifier}"
 
@@ -58,6 +58,14 @@ def find(cls, id):
         if model:
             return cls(model.id).load_from_model(model)
 
+    @classmethod
+    def find_by_id_list(cls, id_list):
+        models = RelatedMaterialInternals.get_by_id_list(id_list)
+        result = []
+        for model in models:
+            result.append(cls(model.id).load_from_model(model))
+        return result
+
     @classmethod
     def create(cls, data):
         data = RelatedMaterialValidator.sanitize_input(data)
diff --git a/src/figcore/internals/db_calls/related_material.py b/src/figcore/internals/db_calls/related_material.py
index 65c4a04a4a..81472c540e 100644
--- a/src/figcore/internals/db_calls/related_material.py
+++ b/src/figcore/internals/db_calls/related_material.py
@@ -3,5 +3,20 @@
 
 
 class RelatedMaterialDBCalls(BaseDBCalls):
-
     MODEL = RelatedMaterial_model
+
+    @classmethod
+    def get_related_materials_by_ids(cls, db_session, related_material_ids):
+        """
+        MariaDB [core]> EXPLAIN SELECT related_material.id, related_material.account_id, related_material.identifier, related_material.identifier_type, related_material.relation, related_material.title, related_material.is_linkout FROM related_material WHERE related_material.id IN (36, 38, 43, 41, 44, 45, 46);
+        +------+-------------+------------------+-------+---------------+---------+---------+------+------+-------------+
+        | id   | select_type | table            | type  | possible_keys | key     | key_len | ref  | rows | Extra       |
+        +------+-------------+------------------+-------+---------------+---------+---------+------+------+-------------+
+        |    1 | SIMPLE      | related_material | range | PRIMARY       | PRIMARY | 8       | NULL | 7    | Using where |
+        +------+-------------+------------------+-------+---------------+---------+---------+------+------+-------------+
+        1 row in set (0.000 sec)
+        """
+        query = db_session.query(cls.MODEL)
+        query = query.filter(cls.MODEL.id.in_(related_material_ids))
+        result = query.all()
+        return result
diff --git a/src/figcore/internals/related_material/related_material.py b/src/figcore/internals/related_material/related_material.py
index 4a2ec7f6f0..7801a9af9e 100644
--- a/src/figcore/internals/related_material/related_material.py
+++ b/src/figcore/internals/related_material/related_material.py
@@ -4,7 +4,6 @@
 
 
 class RelatedMaterialInternals(object):
-
     DB = DBConnection
 
     @classmethod
@@ -33,3 +32,10 @@ def _create_model(cls, data):
                 setattr(model, key, value)
 
         return model
+
+    @classmethod
+    def get_by_id_list(cls, related_material_ids):
+        with cls.DB.get_session(readonly=True) as db_session:
+            models = RelatedMaterialDBCalls.get_related_materials_by_ids(db_session, related_material_ids)
+
+        return models
