diff --git a/scripts/sql_migrations/2023-05.sql b/scripts/sql_migrations/2023-05.sql
index 5e60e8c76d..d56e5e250f 100644
--- a/scripts/sql_migrations/2023-05.sql
+++ b/scripts/sql_migrations/2023-05.sql
@@ -7,6 +7,5 @@ CREATE TABLE `related_material` (
   `title` varchar(2000) NOT NULL DEFAULT '',
   `is_linkout` tinyint(3) unsigned NOT NULL DEFAULT 0,
   PRIMARY KEY (`id`),
-  KEY `account_id` (`account_id`),
-  CONSTRAINT `related_material_ibfk_1` FOREIGN KEY (`account_id`) REFERENCES `account` (`id`)
-) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
+  KEY `account_id` (`account_id`)
+) ENGINE=InnoDB AUTO_INCREMENT=10000 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
diff --git a/src/figcore/api/article/api.py b/src/figcore/api/article/api.py
index b00749f9dc..46a1dff9a5 100644
--- a/src/figcore/api/article/api.py
+++ b/src/figcore/api/article/api.py
@@ -2097,7 +2097,7 @@ def process_update_data(self, data, **options):
 
         if data.get("references"):
             if isinstance(data["references"][0], str):
-                data["references"] = [Text(x).format_url() for x in data["references"]]
+                data["references"] = [Text(x).format_url(encode=False) for x in data["references"]]
             elif isinstance(data["references"][0], dict):
                 data["references"] = self.ENTITIES.RelatedMaterial.process_related_materials_list(
                     data["references"], self.account_id
@@ -2111,7 +2111,7 @@ def process_update_data(self, data, **options):
             # backwards-compatible) and PUT the item
             result = []
             existing = {
-                rm.identifier: rm.id for rm in [self.ENTITIES.RelatedMaterial(i) for i in self.related_materials]
+                rm.identifier: rm.id for rm in self.ENTITIES.RelatedMaterial.find_by_id_list(self.related_materials)
             }
             for reference in data["references"]:
                 if reference in existing:
@@ -2471,7 +2471,7 @@ def create_article(cls, data, **options):
 
         references = data.get("references")
         if references and isinstance(references[0], str):
-            data["references"] = [Text(reference).format_url() for reference in references]
+            data["references"] = [Text(reference).format_url(encode=False) for reference in references]
 
         models = ArticleInternals.create_article(data, owner_is_author=owner_is_author)
         api = Article(models["article_id"])
@@ -2861,7 +2861,8 @@ def bcheck_references(self):
         if self._metadata.references and isinstance(self._metadata.references[0], int):
             references = []
             for i in self._metadata.references:
-                references.append(APIEntity.ENTITIES.RelatedMaterial(i).link)
+                url = APIEntity.ENTITIES.RelatedMaterial(i).link
+                references.append(Text(url).format_url(encode=True))
             return references
         return self._metadata.references
 
diff --git a/src/figcore/api/article/validator.py b/src/figcore/api/article/validator.py
index 7849883de6..7816f1ac76 100644
--- a/src/figcore/api/article/validator.py
+++ b/src/figcore/api/article/validator.py
@@ -538,7 +538,7 @@ def _validate_article_references(self):
                 or Validator.validate_doi(reference)
                 or Validator.validate_urn(reference)
             ):
-                raise exc.InvalidValue("Invalid value for references", field="references")
+                raise exc.InvalidValue(f"Invalid value for references: {reference}", field="references")
 
         values = references
         if references and isinstance(references[0], int):
diff --git a/src/figcore/api/related_material/validator.py b/src/figcore/api/related_material/validator.py
index f3f2c4ebff..9831ae4c73 100644
--- a/src/figcore/api/related_material/validator.py
+++ b/src/figcore/api/related_material/validator.py
@@ -5,6 +5,7 @@
     DEFAULT_IDENTIFIER_TYPE,
     DEFAULT_RELATION_TYPE,
 )
+from figcore.lib.text import Text
 from figcore.lib.validator import Validator
 
 
@@ -26,7 +27,7 @@ def sanitize_input(cls, data):
         data["identifier_type"] = data.get("identifier_type", DEFAULT_IDENTIFIER_TYPE)
 
         if data.get("identifier"):
-            data["identifier"] = cls.sanitize_url(data.get("identifier"), encode_path=False)
+            data["identifier"] = Text(data["identifier"]).format_url(encode=False)
 
         data["relation"] = data.get("relation", DEFAULT_RELATION_TYPE)
 
@@ -40,7 +41,7 @@ def sanitize_input(cls, data):
     def validate_for_create(self):
         for field in self.MANDATORY_FIELDS:
             if not self.data.get(field):
-                raise fig_exc.MissingMandatoryField(field)
+                raise fig_exc.MissingMandatoryField(field=field)
 
         if not self.validate_int(self.data["account_id"]):
             raise fig_exc.InvalidValue("Invalid account ID", field="account_id")
diff --git a/src/figcore/graphql/resolvers_v2/generic.py b/src/figcore/graphql/resolvers_v2/generic.py
index 32d27e573e..0d5d799d50 100644
--- a/src/figcore/graphql/resolvers_v2/generic.py
+++ b/src/figcore/graphql/resolvers_v2/generic.py
@@ -23,6 +23,18 @@ def get_authors(obj, info, limit, offset, authors_list, return_item_count=False)
     return paginated_result
 
 
+def get_references(obj, info, limit, offset, api_class, **entity_identifiers):
+    item_obj = api_class(**entity_identifiers)
+    references = item_obj.related_materials or []
+
+    items_count = len(references)
+    has_more = items_count - offset > limit
+    paginated_result = {"has_more": has_more, "elements": references}
+    paginated_result["count"] = items_count
+
+    return paginated_result
+
+
 def get_supplemental_user_info(info, authors_list):
     id_list = []
     for author_info in authors_list:
diff --git a/src/figcore/graphql/schema/types/item.py b/src/figcore/graphql/schema/types/item.py
index 02689104d7..3202813d7a 100644
--- a/src/figcore/graphql/schema/types/item.py
+++ b/src/figcore/graphql/schema/types/item.py
@@ -31,6 +31,7 @@
     get_citation,
     get_last_version,
     get_publisher,
+    get_references,
 )
 from figcore.graphql.resolvers_v2.item import (
     get_embargo_config,
@@ -496,16 +497,23 @@ def publisher(cls):
     @classmethod
     def references(cls):
         return {
-            "meta": {"depends_on": [{"db_model": "article_metadata", "db_column": "references"}]},
+            "meta": {
+                "depends_on": [
+                    {"db_model": "article", "db_column": "id"},
+                ]
+            },
             "params": [
                 {"mandatory": True, "type": "Int", "name": "limit", "max_value": 500},
                 {"mandatory": True, "type": "Int", "name": "offset"},
             ],
-            "modifier": {
-                "function": get_from_string_list,
-                "params": {"string_list": {"db_field": "article_metadata.references"}},
+            "resolver": {
+                "function": get_references,
+                "params": {
+                    "article_id": {"db_field": "article.id"},
+                    "api_class": ArticleAPI,
+                },
             },
-            "type": {"implements": "hasMorePagination", "type": "String", "name": "ArticleReferences"},
+            "type": {"implements": "hasMorePagination", "type": "Int", "name": "ArticleReferences"},
         }
 
     @classmethod
diff --git a/src/figcore/graphql/schema/types/item_version.py b/src/figcore/graphql/schema/types/item_version.py
index 5b63accd66..6b7f8c0e96 100644
--- a/src/figcore/graphql/schema/types/item_version.py
+++ b/src/figcore/graphql/schema/types/item_version.py
@@ -28,6 +28,7 @@
     get_categories,
     get_citation,
     get_publisher,
+    get_references,
 )
 from figcore.graphql.resolvers_v2.item import (
     get_embargo_config,
@@ -45,7 +46,6 @@
 
 
 class ItemVersion(GqlType):
-
     MODEL = "article_version"
     JOINS = {
         "group_metadata": {"type": "outer", "join": [["group_metadata.group_id", "article_version.group_id"]]},
@@ -676,16 +676,25 @@ def authors(cls):
     @classmethod
     def references(cls):
         return {
-            "type": {"implements": "hasMorePagination", "type": "String", "name": "ArticleReferences"},
-            "meta": {"depends_on": [{"db_model": "article_metadata_version", "db_column": "references"}]},
+            "meta": {
+                "depends_on": [
+                    {"db_model": "article_version", "db_column": "article_id"},
+                    {"db_model": "article_version", "db_column": "version"},
+                ]
+            },
             "params": [
                 {"mandatory": True, "type": "Int", "name": "limit", "max_value": 500},
                 {"mandatory": True, "type": "Int", "name": "offset"},
             ],
-            "modifier": {
-                "function": get_from_string_list,
-                "params": {"string_list": {"db_field": "article_metadata_version.references"}},
+            "resolver": {
+                "function": get_references,
+                "params": {
+                    "article_id": {"db_field": "article_version.article_id"},
+                    "version": {"db_field": "article_version.version"},
+                    "api_class": ArticleVersionAPI,
+                },
             },
+            "type": {"implements": "hasMorePagination", "type": "Int", "name": "ArticleReferences"},
         }
 
     @classmethod
diff --git a/src/figcore/internals/db_calls/related_material.py b/src/figcore/internals/db_calls/related_material.py
index f0ad09274c..ac89de734b 100644
--- a/src/figcore/internals/db_calls/related_material.py
+++ b/src/figcore/internals/db_calls/related_material.py
@@ -16,11 +16,11 @@ def get_related_materials_by_ids(cls, db_session, related_material_ids, account_
         +------+-------------+------------------+-------+---------------+---------+---------+------+------+-------------+
 
         EXPLAIN SELECT related_material.id, related_material.account_id, related_material.identifier, related_material.identifier_type, related_material.relation, related_material.title, related_material.is_linkout FROM related_material WHERE related_material.id IN (41, 45) AND related_material.account_id = 1000004;
-        +------+-------------+------------------+-------+---------------------------------+---------+---------+------+------+-------------+
-        | id   | select_type | table            | type  | possible_keys                   | key     | key_len | ref  | rows | Extra       |
-        +------+-------------+------------------+-------+---------------------------------+---------+---------+------+------+-------------+
-        |    1 | SIMPLE      | related_material | range | PRIMARY,related_material_ibfk_1 | PRIMARY | 8       | NULL | 2    | Using where |
-        +------+-------------+------------------+-------+---------------------------------+---------+---------+------+------+-------------+
+        +------+-------------+------------------+-------+--------------------+---------+---------+------+------+-------------+
+        | id   | select_type | table            | type  | possible_keys      | key     | key_len | ref  | rows | Extra       |
+        +------+-------------+------------------+-------+--------------------+---------+---------+------+------+-------------+
+        |    1 | SIMPLE      | related_material | range | PRIMARY,account_id | PRIMARY | 8       | NULL | 2    | Using where |
+        +------+-------------+------------------+-------+--------------------+---------+---------+------+------+-------------+
         """
         query = db_session.query(cls.MODEL)
         query = query.filter(cls.MODEL.id.in_(related_material_ids))
diff --git a/src/figcore/lib/text.py b/src/figcore/lib/text.py
index 0f16e8f326..1372e41b24 100644
--- a/src/figcore/lib/text.py
+++ b/src/figcore/lib/text.py
@@ -72,16 +72,16 @@ def utf_decode(self, length=False, postf="", no_dots=False, sanitize=False, **op
 
         return self.string
 
-    def format_url(self):
+    def format_url(self, encode=True):
         """Quotes the path of the given URL."""
         parts = urlparse(self.string.strip())
         url = urlunparse(
             (
                 parts.scheme,
                 parts.netloc,
-                quote(parts.path),
+                quote(parts.path) if encode else parts.path,
                 parts.params,
-                quote(parts.query, safe="&="),
+                quote(parts.query, safe="&=") if encode else parts.query,
                 parts.fragment,
             )
         )
@@ -101,7 +101,6 @@ def for_url(self, length=240):
         return self.string
 
     def sanitize(self, mode="strict", **options):
-
         if not isinstance(self.string, (six.text_type, str, six.binary_type)):
             return self.string
 
@@ -113,7 +112,6 @@ def sanitize(self, mode="strict", **options):
 
 
 class SanitizeHtml(object):
-
     DEFAULT_TAGS = [
         "a",
         "address",
diff --git a/src/figcore/lib/validator.py b/src/figcore/lib/validator.py
index 95e77fd269..2f4c910362 100644
--- a/src/figcore/lib/validator.py
+++ b/src/figcore/lib/validator.py
@@ -261,14 +261,13 @@ def sanitize_string_for_url(cls, string):
         return Text(string).for_url()
 
     @classmethod
-    def sanitize_url(cls, string, encode_path=True):
+    def sanitize_url(cls, string):
         if not string:
             return ""
 
         scheme, netloc, path, params, query_str, fragment = six.moves.urllib.parse.urlparse(string)
 
-        if encode_path:
-            path = urllib.parse.quote(path)
+        path = urllib.parse.quote(path)
 
         query = six.moves.urllib.parse.parse_qsl(query_str)
         new_query_str = six.moves.urllib.parse.urlencode(query)
@@ -353,4 +352,4 @@ def check_duplicates(cls, value, field):
         duplicates = set([d for d in value if value.count(d) > 1])
 
         if duplicates:
-            raise exc.DuplicateEntry(f"{field} duplicates were found: {tuple(duplicates)}")
+            raise exc.DuplicateEntry(message=f"{field} duplicates were found: {tuple(duplicates)}", field=field)
diff --git a/src/figcore/models/dao/related_material.py b/src/figcore/models/dao/related_material.py
index 8bcc848e91..ef8f75f9ad 100644
--- a/src/figcore/models/dao/related_material.py
+++ b/src/figcore/models/dao/related_material.py
@@ -1,4 +1,4 @@
-from sqlalchemy import Column, ForeignKeyConstraint
+from sqlalchemy import Column, Index
 from sqlalchemy.dialects.mysql import BIGINT, TINYINT, VARCHAR, ENUM
 
 from figcore.lib.data.related_material_static import (
@@ -14,7 +14,7 @@
 class RelatedMaterial(Base, ExtendedBase):
     __tablename__ = "related_material"
     __table_args__ = (
-        ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="restrict"),
+        Index("account_id", "account_id", unique=False),
         {"mysql_engine": "InnoDB"},
     )
 
diff --git a/tests/api/article/test_backup.py b/tests/api/article/test_backup.py
index 8dc7f4c9f4..3c90de1110 100644
--- a/tests/api/article/test_backup.py
+++ b/tests/api/article/test_backup.py
@@ -62,7 +62,7 @@ def test_export_article_json(self):
         self.assertIsNotNone(data["published_date"])
         self.assertIsNotNone(data["created_date"])
         self.assertEqual(data["version"], 1)
-        self.assertEqual(data["references"], self.data["references"])
+        self.assertEqual(data["references"], self.data["references"] + [f"https://doi.org/{self.data['resource_doi']}"])
         self.assertTrue(data["is_metadata_record"])
         self.assertEqual(data["group_id"], 1)
         self.assertEqual(data["authors"], [{"full_name": "Public Enemy", "id": 4}])
diff --git a/tests/api/article/test_sanitisation.py b/tests/api/article/test_sanitisation.py
index fd5828bd3f..9fe9200a4d 100644
--- a/tests/api/article/test_sanitisation.py
+++ b/tests/api/article/test_sanitisation.py
@@ -1,8 +1,5 @@
-# -*- coding: utf-8 -*-
-
-
-import figcore.exc as fig_exc
 from figcore.api import Article, Group
+import figcore.exc as fig_exc
 from figcore.lib.text import Text
 
 from tests import BaseTestTransactioned
diff --git a/tests/api/related_material/test_validator.py b/tests/api/related_material/test_validator.py
index d443c3da80..4661a66aa5 100644
--- a/tests/api/related_material/test_validator.py
+++ b/tests/api/related_material/test_validator.py
@@ -17,14 +17,14 @@ def test_passes_validation(self):
         }
 
         result = RelatedMaterialValidator.sanitize_input(data)
-        RelatedMaterialValidator(result).validate()
+        RelatedMaterialValidator(result).validate_for_create()
 
         self.assertDictEqual(data, result)
 
     def test_uses_defaults(self):
         data = {"account_id": 1, "identifier": "https://figshare.com"}
         data = RelatedMaterialValidator.sanitize_input(data)
-        RelatedMaterialValidator(data).validate()
+        RelatedMaterialValidator(data).validate_for_create()
         expected = {
             "account_id": 1,
             "identifier": "https://figshare.com",
@@ -43,7 +43,7 @@ def test_uses_defaults(self):
             "is_linkout": True,
         }
         data = RelatedMaterialValidator.sanitize_input(data)
-        RelatedMaterialValidator(data).validate()
+        RelatedMaterialValidator(data).validate_for_create()
         expected = {
             "account_id": 1,
             "identifier": "53355/cl010066723",
@@ -57,22 +57,22 @@ def test_uses_defaults(self):
 
     def test_fails_validation(self):
         with self.assertRaises(fig_exc.MissingMandatoryField):
-            RelatedMaterialValidator({"title": "test"}).validate()
+            RelatedMaterialValidator({"title": "test"}).validate_for_create()
 
         with self.assertRaises(fig_exc.InvalidLength):
             RelatedMaterialValidator(
                 {"account_id": 1, "identifier": "a" * 2001, "identifier_type": "ARK", "relation": "Cites"}
-            ).validate()
+            ).validate_for_create()
 
         with self.assertRaises(fig_exc.InvalidValue):
             RelatedMaterialValidator(
                 {"account_id": 1, "identifier": "123", "identifier_type": "test", "relation": "Cites"}
-            ).validate()
+            ).validate_for_create()
 
         with self.assertRaises(fig_exc.InvalidValue):
             RelatedMaterialValidator(
                 {"account_id": 1, "identifier": "123", "identifier_type": "ARK", "relation": "test"}
-            ).validate()
+            ).validate_for_create()
 
         with self.assertRaises(fig_exc.InvalidLength):
             RelatedMaterialValidator(
@@ -83,4 +83,4 @@ def test_fails_validation(self):
                     "identifier_type": "ARK",
                     "relation": "Cites",
                 }
-            ).validate()
+            ).validate_for_create()
diff --git a/tests/graphql/api/article_public/test_article_public_query.py b/tests/graphql/api/article_public/test_article_public_query.py
index 1f3b497137..214d880607 100644
--- a/tests/graphql/api/article_public/test_article_public_query.py
+++ b/tests/graphql/api/article_public/test_article_public_query.py
@@ -486,7 +486,7 @@ def test_basic_properties(self):
         self.assertDictEqual(dict(article["license"]), license_check_data)
 
         self.assertEqual(article["references"]["hasMore"], False)
-        self.assertEqual(article["references"]["elements"], version_api.references)
+        self.assertEqual(article["references"]["elements"], version_api.related_materials)
 
         self.assertIsNone(article["linkbackInfo"])
 
