diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.jsx
index 2b5f70e0f..eb19128cb 100644
--- a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.jsx
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.jsx
@@ -6,6 +6,7 @@ import { useMutation } from "@apollo/react-hooks";
 import getIn from "utils/getIn";
 import parseGraphQLError from "utils/apollo/parseGraphQLError";
 import Registry from "utils/registry";
+import throttle from "utils/throttle";
 import { Forms } from "shared/ui/forms";
 
 import { relatedMaterialCreate, relatedMaterialUpdate } from "../../index.gql";
@@ -84,7 +85,7 @@ export function ManageRelatedMaterials({ disabled, materials, onMaterialsChange,
       delayAction(closeManager, DELAY);
     }
   }, [onMaterialsChange, closeManager, stateRef]);
-  const addNewMaterial = useCallback(async(newMaterial) => {
+  const addNewMaterial = useCallback(throttle.async(async(newMaterial) => {
     const maximum = getIn(settings, "validation.maxListLength", 0);
     const current = getIn(stateRef, "current.materials.length", 0);
 
@@ -115,8 +116,8 @@ export function ManageRelatedMaterials({ disabled, materials, onMaterialsChange,
       // throw back so form component can handle it
       throw new Error(`Could not add new material. ${parseGraphQLError(e)}`);
     }
-  }, [dispatch, addMaterialMutation, stateRef, settings]);
-  const editMaterial = useCallback(async(newMaterial, oldEntry) => {
+  }), [dispatch, addMaterialMutation, stateRef, settings]);
+  const editMaterial = useCallback(throttle.async(async(newMaterial, oldEntry) => {
     const relatedMaterialId = newMaterial.id;
     const remapped = RemapMaterial.typeToMutation(newMaterial);
 
@@ -143,13 +144,13 @@ export function ManageRelatedMaterials({ disabled, materials, onMaterialsChange,
       // throw back so form component can handle it
       throw new Error(`Could not edit material. ${parseGraphQLError(e)}`);
     }
-  });
-  const removeMaterial = useCallback(async(id) => {
+  }), [dispatch, stateRef, editMaterialMutation]);
+  const removeMaterial = useCallback(throttle.async(async(id) => {
     await dispatch({
       type: "REMOVE_RELATED_MATERIAL",
       id,
     });
-  });
+  }), [dispatch]);
   const clearDraftMaterial = useCallback(() => undefined, []);
   const reorderMaterials = useCallback((id, newIndex) => {
     dispatch({
@@ -157,7 +158,7 @@ export function ManageRelatedMaterials({ disabled, materials, onMaterialsChange,
       id,
       newIndex,
     });
-  });
+  }, [dispatch]);
 
   const handleFocus = useCallback(() => {
     Registry.set("related-materials/manager/last-focused-control", document.activeElement);
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.jsx
index d99e90d5c..0da4f3418 100644
--- a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.jsx
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.jsx
@@ -109,7 +109,6 @@ export function RelatedMaterialsForm({
       batch.fields[id] = change;
     });
 
-    // update the form state, and return the isValid value of the form.
     batchUpdate(batch);
 
     return !batch.hasErrors;
@@ -119,7 +118,6 @@ export function RelatedMaterialsForm({
     event.preventDefault();
     const formState = stateRef.current;
     const { formId, id, fields } = formState;
-    // this would need to be requested or given upon a request
     const newMaterialId = id === "add" ? uuid() : id;
 
 
diff --git a/src/utils/throttle.js b/src/utils/throttle.js
new file mode 100644
index 000000000..670eb85e0
--- /dev/null
+++ b/src/utils/throttle.js
@@ -0,0 +1,47 @@
+const DEFAULT_DELAY = 1000;
+
+function syncThrottle(callback, delay = DEFAULT_DELAY) {
+  let wait = false;
+
+  return (...args) => {
+    if (wait) {
+      return;
+    }
+
+    wait = true;
+    callback(...args);
+
+    setTimeout(() => {
+      wait = false;
+    }, delay);
+  };
+}
+
+function asyncThrottle(callback, delay = DEFAULT_DELAY) {
+  let called = false;
+
+  let run = Promise.resolve();
+
+  return (...args) => {
+    if (!called) {
+      try {
+        called = true;
+
+        setTimeout(() => {
+          called = false;
+        }, delay);
+
+        run = Promise.resolve(callback(...args));
+      } catch (e) {
+        run = Promise.reject(e);
+      }
+    }
+
+    return run;
+  };
+}
+
+export { syncThrottle, asyncThrottle };
+
+export default { sync: syncThrottle, async: asyncThrottle };
+
diff --git a/src/utils/throttle.test.js b/src/utils/throttle.test.js
new file mode 100644
index 000000000..14c08bab7
--- /dev/null
+++ b/src/utils/throttle.test.js
@@ -0,0 +1,122 @@
+import throttle from "./throttle";
+
+
+function runWithDelay(callback, delay) {
+  return new Promise((resolve, reject) => {
+    setTimeout(() => {
+      try {
+        resolve(callback());
+      } catch (e) {
+        reject(e);
+      }
+    }, delay);
+  });
+}
+
+const OneSecond = 1000;
+const OneThirdOfASecond = Math.round(OneSecond / 3);
+const TwoSeconds = 2000;
+
+describe("throttle.sync", () => {
+  it("returns a throttled function that calls callback only once in a default interval", async() => {
+    const callback = jest.fn();
+    const throttled = throttle.sync(callback);
+
+    throttled();
+    throttled();
+    throttled();
+
+    await runWithDelay(throttled, TwoSeconds);
+
+    expect(callback).toHaveBeenCalledTimes(2);
+  });
+
+  it("returns a throttled function that calls callback only once in a given interval", async() => {
+    const callback = jest.fn();
+    const throttled = throttle.sync(callback, TwoSeconds);
+
+    throttled();
+    throttled();
+    throttled();
+
+    await runWithDelay(throttled, OneSecond);
+
+    expect(callback).toHaveBeenCalledTimes(1);
+
+    await runWithDelay(() => undefined, TwoSeconds);
+
+    expect(callback).toHaveBeenCalledTimes(1);
+  });
+});
+
+describe("throttle.async", () => {
+  it("returns a throttled async function which returns a promised result", async() => {
+    const spy = jest.fn(() => 1);
+    const callback = () => runWithDelay(spy, OneThirdOfASecond);
+    const throttled = throttle.async(callback);
+
+    await throttled();
+    await throttled();
+    await throttled();
+
+    const result = throttled();
+
+    expect(spy).toHaveBeenCalledTimes(1);
+    await expect(result).resolves.toBe(1);
+    expect(spy).toHaveBeenCalledTimes(1);
+  });
+
+  it("accepts sync callbacks and resolves them as promises", async() => {
+    const spy = jest.fn(() => 1);
+    const callback = spy;
+    const throttled = throttle.async(callback);
+
+    await throttled();
+    await throttled();
+    await throttled();
+
+    const result = throttled();
+
+    expect(spy).toHaveBeenCalledTimes(1);
+    await expect(result).resolves.toBe(1);
+    expect(spy).toHaveBeenCalledTimes(1);
+  });
+
+  it("handles rejections or errors", async() => {
+    const spy = jest.fn(() => {
+      throw new Error("some error");
+    });
+    const syncRejection = spy;
+    const asyncRejection = () => runWithDelay(spy, OneThirdOfASecond);
+    const throttledSyncRejection = throttle.async(syncRejection, OneThirdOfASecond);
+    const throttledAsyncRejection = throttle.async(asyncRejection, OneThirdOfASecond);
+
+    try {
+      await throttledSyncRejection();
+      throttledAsyncRejection();
+    } catch (e) {
+      expect(e.message).toBe("some error");
+    }
+
+    try {
+      await throttledAsyncRejection();
+    } catch (e) {
+      expect(e.message).toBe("some error");
+    }
+
+    expect(spy).toHaveBeenCalledTimes(2);
+  });
+
+  it("accepts a delay value", async() => {
+    const spy = jest.fn(() => 1);
+    const callback = spy;
+    const throttled = throttle.async(callback, OneThirdOfASecond);
+
+    const result = throttled();
+
+    await runWithDelay(throttled, OneSecond);
+
+    expect(spy).toHaveBeenCalledTimes(2);
+    await expect(result).resolves.toBe(1);
+  });
+});
