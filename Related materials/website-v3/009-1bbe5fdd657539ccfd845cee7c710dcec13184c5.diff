diff --git a/src/pages/item/page/components/linkback/index.jsx b/src/pages/item/page/components/linkback/index.jsx
index 680fc9a36..a32a068ad 100644
--- a/src/pages/item/page/components/linkback/index.jsx
+++ b/src/pages/item/page/components/linkback/index.jsx
@@ -42,8 +42,9 @@ function renderItem(material, identifiers, relationships, itemId) {
 }
 
 export function Linkback(props) {
-  const { item, domainData, isPublic } = useContext(Context);
+  const { item, domainData, isPublic, isShared, isSharedInCollection } = useContext(Context);
   const { identifiers, relationships } = useIdentifiersAndRelationshipsResource();
+  const hideLinkbackSection = useMemo(() => isShared || isSharedInCollection, [isShared, isSharedInCollection]);
   const variables = useMemo(() => {
     return {
       id: getIn(item, "id"),
@@ -85,6 +86,10 @@ export function Linkback(props) {
     };
   }, [item, empty, domainData]);
 
+  if (hideLinkbackSection) {
+    return null;
+  }
+
   return (
     <ul className={styles.linkback} {...props}>
       {linkback && renderItem(linkback, identifiers.data, relationships.data, itemId)}
diff --git a/src/pages/item/page/components/linkback/index.test.jsx b/src/pages/item/page/components/linkback/index.test.jsx
index 0ce11e88a..3333f9659 100644
--- a/src/pages/item/page/components/linkback/index.test.jsx
+++ b/src/pages/item/page/components/linkback/index.test.jsx
@@ -14,8 +14,8 @@ import Linkback from "./index";
 class LinkbackWrapped extends Component {
   render() {
     // eslint-disable-next-line react/prop-types
-    const { item, domainData, isPublic, mocks } = this.props;
-    const context = { item, domainData, isPublic };
+    const { item, domainData, isPublic, isShared, isSharedInCollection, mocks } = this.props;
+    const context = { item, domainData, isPublic, isShared, isSharedInCollection };
 
     return (
       <MockedProvider addTypename={false} mocks={mocks}>
@@ -238,4 +238,39 @@ describe("<Linkback />", () => {
 
     expect(component.isEmptyRender()).toEqual(true);
   });
+
+  it("does not render item is shared or shared in collection", async() => {
+    const testItem = {
+      id: 12000,
+      version: 0,
+      references: [],
+      linkbackCollection: null,
+    };
+
+    let component = mount(
+      <LinkbackWrapped
+        domainData={ { linkBackTitle: "My linkback title" } }
+        isShared={true}
+        item={testItem}
+        mocks={[...getRelatedMaterialsEmptyMock]}
+      />
+    );
+
+    await wait(() => component.update());
+
+    expect(component.isEmptyRender()).toEqual(true);
+
+    component = mount(
+      <LinkbackWrapped
+        domainData={ { linkBackTitle: "My linkback title" } }
+        isSharedInCollection={true}
+        item={testItem}
+        mocks={[...getRelatedMaterialsEmptyMock]}
+      />
+    );
+
+    await wait(() => component.update());
+
+    expect(component.isEmptyRender()).toEqual(true);
+  });
 });
