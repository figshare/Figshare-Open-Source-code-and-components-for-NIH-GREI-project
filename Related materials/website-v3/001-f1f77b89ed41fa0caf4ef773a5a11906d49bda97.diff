diff --git a/scripts/tests/jest.setup.js b/scripts/tests/jest.setup.js
index 05054fca6..691643891 100644
--- a/scripts/tests/jest.setup.js
+++ b/scripts/tests/jest.setup.js
@@ -18,3 +18,47 @@ window.crypto = {
 };
 
 navigator.clipboard = { writeText: () => undefined };
+
+const IntersectionObserversInterface = {
+  observers: [],
+  invokeAll: function invokeAll(entityProperties) {
+    this.observers.forEach((observer) => {
+      observer.__invokeCallback(entityProperties);
+    });
+  },
+  clearObservers: function clearObservers() {
+    this.observers = [];
+  },
+};
+
+class MockIntersectionObserver {
+  constructor(callback, options) {
+    this.callback = callback;
+    this.options = options;
+    this.observedNodes = [];
+
+    IntersectionObserversInterface.observers.push(this);
+  }
+
+  observe = jest.fn((node) => {
+    this.observedNodes.push(node);
+  });
+
+  disconnect = jest.fn(() => {
+    this.observedNodes = [];
+  });
+
+  __invokeCallback = jest.fn((entityProperties = { isIntersecting: false }) => {
+    const entities = this.observedNodes.map((node) => {
+      return {
+        __node: node,
+        ...entityProperties,
+      };
+    });
+
+    this.callback(entities, this);
+  });
+}
+
+window.IntersectionObserver = MockIntersectionObserver;
+window.IntersectionObserversInterface = IntersectionObserversInterface;
diff --git a/src/pages/account/itemEdit/constants.js b/src/pages/account/itemEdit/constants.js
index d9f98fbf6..d7ec3c506 100644
--- a/src/pages/account/itemEdit/constants.js
+++ b/src/pages/account/itemEdit/constants.js
@@ -69,3 +69,13 @@ export const PUBLISH_CHECKS = {
 
 export const VERSIONING_DIFF_FIELDS = ["title", "license", "authors"];
 export const MULTIPLE_VALUE_FIELDS = ["funding", "references", "url", "dropdownLargeList"];
+
+export const MANDATORY_AUTHORS_PUBLISH_ERROR = {
+  field: "authors",
+  error: "Added authors must have all mandatory fields. If you can't edit the author please contact support.",
+};
+
+export const LINKBACK_MANDATORY_PUBLISH_ERROR = {
+  field: "references",
+  error: "A linkout Resource DOI is mandatory for publishing. Add the entry in related materials.",
+};
diff --git a/src/pages/account/itemEdit/index.gql b/src/pages/account/itemEdit/index.gql
index 95df66022..6e0650a9a 100644
--- a/src/pages/account/itemEdit/index.gql
+++ b/src/pages/account/itemEdit/index.gql
@@ -29,6 +29,7 @@ query getItemAndDomainData($itemId: Int!) {
       id
       taxonomyId
       curationRequired
+      linkbackMandatory
       curators(pageSize: 10, cursor: "") {
         cursor
         elements {
diff --git a/src/pages/account/itemEdit/main/form/formField/customFields/simpleDropdown/index.jsx b/src/pages/account/itemEdit/main/form/formField/customFields/simpleDropdown/index.jsx
index 1b48b99b9..a823d370a 100644
--- a/src/pages/account/itemEdit/main/form/formField/customFields/simpleDropdown/index.jsx
+++ b/src/pages/account/itemEdit/main/form/formField/customFields/simpleDropdown/index.jsx
@@ -3,10 +3,11 @@ import React, { Component } from "react";
 import Select, { Option } from "@figshare/components/ui/select";
 import ErrorMessage from "@figshare/components/ui/errorMessage";
 import { modifiers } from "shared/popper";
+import compact from "utils/compact";
+
 
 import Label from "../../genericFields/textField/components/label";
 import ChipArea from "../../genericFields/chipArea";
-import { compact } from "../../../../../utils";
 
 
 import styles from "./index.css";
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/itemType/overlay.test.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/itemType/overlay.test.jsx
index 28c8bdf31..02fcc0001 100644
--- a/src/pages/account/itemEdit/main/form/formField/figshareFields/itemType/overlay.test.jsx
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/itemType/overlay.test.jsx
@@ -19,9 +19,7 @@ describe("<ItemTypesOverlay />", () => {
     ],
   };
   beforeEach(() => {
-    const mockIntersectionObserver = jest.fn();
-    mockIntersectionObserver.mockReturnValue({ observe: () => false });
-    window.IntersectionObserver = mockIntersectionObserver;
+    window.IntersectionObserversInterface.clearObservers();
   });
 
   it("renders item description", () => {
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/context.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/context.jsx
new file mode 100644
index 000000000..8be9f3483
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/context.jsx
@@ -0,0 +1,21 @@
+import { createContext } from "react";
+
+import { ResourceStatus } from "../../constants";
+
+
+export const IdentifiersAndRelationshipsContext = createContext({
+  identifiers: {
+    data: [],
+    status: ResourceStatus.idle,
+    error: undefined,
+  },
+  relationships: {
+    data: [],
+    status: ResourceStatus.idle,
+    error: undefined,
+  },
+  meta: {
+    ready: false,
+    error: false,
+  },
+});
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/identifiersAndRelationshipsProvider.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/identifiersAndRelationshipsProvider.jsx
new file mode 100644
index 000000000..573bb10fc
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/identifiersAndRelationshipsProvider.jsx
@@ -0,0 +1,47 @@
+import React, { useMemo } from "react";
+import { node } from "prop-types";
+import { useQuery } from "@apollo/react-hooks";
+
+import { getRelatedMaterialTypes, getRelatedMaterialRelations } from "../../index.gql";
+import { ResourceStatus } from "../../constants";
+
+import { IdentifiersAndRelationshipsContext } from "./context";
+import { parseResourceFromQuery, mapIdentifierQueryData, mapRelationshipQueryData } from "./utils";
+
+
+export function useIdentifiersAndRelationshipsResource() {
+  const identifiersQuery = useQuery(getRelatedMaterialTypes);
+  const relationshipsQuery = useQuery(getRelatedMaterialRelations);
+
+  const identifiers = useMemo(() =>
+    parseResourceFromQuery(identifiersQuery, mapIdentifierQueryData), [identifiersQuery]);
+  const relationships = useMemo(() =>
+    parseResourceFromQuery(relationshipsQuery, mapRelationshipQueryData), [relationshipsQuery]);
+
+  return useMemo(() => {
+    const statuses = [identifiers.status, relationships.status];
+    const ready = statuses.every((status) => status === ResourceStatus.ready);
+    const error = statuses.some((status) => status === ResourceStatus.error);
+
+    return {
+      identifiers,
+      relationships,
+      meta: {
+        ready,
+        error,
+      },
+    };
+  }, [identifiers, relationships]);
+}
+
+export function IdentifiersAndRelationshipsProvider({ children }) {
+  const resource = useIdentifiersAndRelationshipsResource();
+
+  return (
+    <IdentifiersAndRelationshipsContext.Provider value={resource}>
+      {children}
+    </IdentifiersAndRelationshipsContext.Provider>
+  );
+}
+
+IdentifiersAndRelationshipsProvider.propTypes = { children: node.isRequired };
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/index.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/index.jsx
new file mode 100644
index 000000000..ecb2be3f6
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/index.jsx
@@ -0,0 +1,3 @@
+export * from "./identifiersAndRelationshipsProvider";
+export * from "./context";
+export * from "./utils";
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/index.test.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/index.test.jsx
new file mode 100644
index 000000000..7e4e46396
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/index.test.jsx
@@ -0,0 +1,151 @@
+import React from "react";
+import { mount } from "enzyme";
+import { MockedProvider } from "@apollo/react-testing";
+import { GraphQLError } from "graphql";
+import { wait } from "utils/apollo/testing";
+
+import { getRelatedMaterialTypes, getRelatedMaterialRelations } from "../../index.gql";
+
+import {
+  IdentifiersAndRelationshipsProvider,
+  IdentifiersAndRelationshipsContext,
+} from "./index";
+
+
+const mocks = [{
+  request: { query: getRelatedMaterialTypes },
+  result: {
+    data: {
+      getRelatedMaterialTypes: [
+        { name: "DOI", resolver: "https://doi.org/", isUrl: true },
+      ],
+    },
+  },
+},
+{
+  request: { query: getRelatedMaterialRelations },
+  result: {
+    data: {
+      getRelatedMaterialRelations: [
+        "IsCitedBy", "Cites",
+      ],
+    },
+  },
+}];
+
+const errorMocks = [{
+  request: { query: getRelatedMaterialTypes },
+  result: { errors: [new GraphQLError("Could not to retrieve data!")] },
+},
+{
+  request: { query: getRelatedMaterialRelations },
+  result: { errors: [new GraphQLError("Could not to retrieve data!")] },
+}];
+
+describe("<IdentifiersAndRelationshipsProvider />", () => {
+
+  it("provides identifier and relationships resources through context", async() => {
+    const MockComponent = jest.fn(() => null);
+    const Consumer = () => (
+      <IdentifiersAndRelationshipsContext.Consumer>{MockComponent}</IdentifiersAndRelationshipsContext.Consumer>
+    );
+
+    const wrapper = mount(
+      <MockedProvider addTypename={false} mocks={mocks}>
+        <IdentifiersAndRelationshipsProvider><Consumer /></IdentifiersAndRelationshipsProvider>
+      </MockedProvider>
+    );
+
+    const loading = {
+      identifiers: { data: [], status: "loading" },
+      meta: { error: false, ready: false },
+      relationships: { data: [], status: "loading" },
+    };
+
+    expect(MockComponent).toHaveBeenCalledWith(loading);
+
+    await wait(wrapper.update());
+
+    const success = {
+      identifiers: {
+        data: [
+          {
+            key: "DOI",
+            meta: {
+              isUrl: true,
+              name: "DOI",
+              resolver: "https://doi.org/",
+            },
+            value: "DOI",
+          },
+        ],
+        status: "ready",
+      },
+      meta: { error: false, ready: true },
+      relationships: {
+        data: [
+          {
+            key: "Is cited by",
+            meta: {
+              label: "Is cited by",
+              name: "IsCitedBy",
+            },
+            value: "IsCitedBy",
+          },
+          {
+            key: "Cites",
+            meta: {
+              label: "Cites",
+              name: "Cites",
+            },
+            value: "Cites",
+          },
+        ],
+        status: "ready",
+      },
+    };
+
+    expect(MockComponent).toHaveBeenCalledWith(success);
+
+    wrapper.unmount();
+  });
+
+  it("handles query errors and returns them", async() => {
+    const MockComponent = jest.fn(() => null);
+    const Consumer = () => (
+      <IdentifiersAndRelationshipsContext.Consumer>{MockComponent}</IdentifiersAndRelationshipsContext.Consumer>
+    );
+
+    const wrapper = mount(
+      <MockedProvider addTypename={false} mocks={errorMocks}>
+        <IdentifiersAndRelationshipsProvider><Consumer /></IdentifiersAndRelationshipsProvider>
+      </MockedProvider>
+    );
+
+    const loading = {
+      identifiers: { data: [], status: "loading" },
+      meta: { error: false, ready: false },
+      relationships: { data: [], status: "loading" },
+    };
+
+    expect(MockComponent).toHaveBeenCalledWith(loading);
+
+    await wait(wrapper.update());
+
+    const failure = {
+      identifiers: expect.objectContaining({
+        data: [],
+        status: "error",
+      }),
+      meta: { error: true, ready: false },
+      relationships: expect.objectContaining({
+        data: [],
+        status: "error",
+      }),
+    };
+
+    expect(MockComponent).toHaveBeenCalledWith(expect.objectContaining(failure));
+
+    wrapper.unmount();
+  });
+});
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/utils.js b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/utils.js
new file mode 100644
index 000000000..895c68986
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships/utils.js
@@ -0,0 +1,64 @@
+import getIn from "utils/getIn";
+
+import { ResourceStatus } from "../../constants";
+
+
+export const parseResourceFromQuery = (query, mapper) => {
+  const { data, loading, error } = query;
+
+  if (error) {
+    return {
+      data: [],
+      status: ResourceStatus.error,
+      error,
+    };
+  }
+
+  if (data && !loading) {
+    return {
+      data: mapper(data),
+      status: ResourceStatus.ready,
+    };
+  }
+
+  return {
+    status: ResourceStatus.loading,
+    data: [],
+  };
+};
+
+export const mapIdentifierQueryData = (data) => getIn(data, "getRelatedMaterialTypes", []).map((entry) => {
+  const { name, isUrl, resolver } = entry;
+
+  return {
+    key: name,
+    value: name,
+    meta: {
+      name,
+      resolver,
+      isUrl,
+    },
+  };
+});
+
+export function makeRelationshipReadable(relationship) {
+  const readable = relationship.
+    replaceAll(/[A-Z]/g, (letter) => ` ${letter.toLowerCase()}`).
+    trim();
+
+  return readable.charAt(0).toUpperCase() + readable.slice(1);
+}
+
+export const mapRelationshipQueryData = (data) => getIn(data, "getRelatedMaterialRelations", []).map((entry) => {
+  const readable = makeRelationshipReadable(entry);
+
+  return {
+    key: readable,
+    value: entry,
+    meta: {
+      name: entry,
+      label: readable,
+    },
+  };
+});
+
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/index.js b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/index.js
new file mode 100644
index 000000000..ef4bd4254
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/index.js
@@ -0,0 +1,2 @@
+export * from "./manageRelatedMaterials";
+export * from "./useManageRelatedMaterials";
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/index.test.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/index.test.jsx
new file mode 100644
index 000000000..ef29f969e
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/index.test.jsx
@@ -0,0 +1,579 @@
+/* eslint-disable max-lines */
+import { mount } from "enzyme";
+import React from "react";
+import { act } from "react-dom/test-utils";
+import Alert from "@figshare/fcl/alert";
+import { MockedProvider, wait } from "utils/apollo/testing";
+import { GraphQLError } from "graphql";
+
+import { relatedMaterialCreate, relatedMaterialUpdate } from "../../index.gql";
+import { RelatedMaterialsListItem } from "../relatedMaterialsList";
+
+import { ManageRelatedMaterials } from "./index";
+
+
+describe("<ManageRelatedMaterials />", () => {
+  const fieldSettings = {
+    "defaultValue": [],
+    "isMultiple": true,
+    "label": "References",
+    "placeholder": "Add a URL that links to references or related content ",
+    "options": null,
+    "isRequired": false,
+    "description": null,
+    "validation": {
+      "maxListLength": 100,
+      "maxLinkouts": 5,
+      "minTitleLength": 1,
+      "maxTitleLength": 1000,
+      "minIdentifierLength": 1,
+      "maxIdentifierLength": 2000,
+    },
+  };
+
+  const materials = {
+    base: [
+      {
+        id: 1,
+        identifier: "identifier-one",
+        title: "identifier-one-title",
+        relation: "IsMetadataFor",
+        identifierType: "UPC",
+        isLinkout: true,
+        isUrl: false,
+        resolver: "urn:upc:",
+      },
+      {
+        id: 2,
+        identifier: "identifier-two",
+        title: "",
+        relation: "IsCitedBy",
+        identifierType: "DOI",
+        isLinkout: true,
+        isUrl: true,
+        resolver: "doi:",
+      },
+    ],
+    current: [],
+  };
+
+  materials.current = materials.base;
+
+  const onMaterialsChange = jest.fn();
+
+  const defaultProps = {
+    materials: materials.current,
+    disabled: false,
+    settings: fieldSettings,
+    onMaterialsChange,
+  };
+
+  beforeEach(() => {
+    jest.clearAllMocks();
+  });
+
+  const relatedMaterialCreateMock = [
+    {
+      request: {
+        query: relatedMaterialCreate,
+        variables: {
+          data: {
+            title: "new-material-title",
+            identifier: "new-material-identifier",
+            relation: "References",
+            "identifier_type": "URL",
+            "is_linkout": false,
+          },
+        },
+      },
+      result: {
+        data: {
+          relatedMaterialCreate: {
+            id: 40,
+            identifier: "new-material-title",
+            title: "new-material-title",
+            relation: "References",
+            identifierType: "URL",
+            isLinkout: false,
+            isUrl: true,
+            resolver: "url:",
+          },
+        },
+      },
+    },
+  ];
+
+  const relatedMaterialCreateFailMock = [
+    {
+      request: {
+        query: relatedMaterialCreate,
+        variables: {
+          data: {
+            title: "new-material-fail",
+            identifier: "new-material-fail",
+            relation: "References",
+            "identifier_type": "URL",
+            "is_linkout": false,
+          },
+        },
+      },
+      result: { errors: [new GraphQLError("Add error")] },
+    },
+  ];
+
+  const relatedMaterialUpdateMock = [
+    {
+      request: {
+        query: relatedMaterialUpdate,
+        variables: {
+          relatedMaterialId: 1,
+          data: {
+            title: "new-material-title",
+            identifier: "new-material-identifier",
+            relation: "References",
+            "identifier_type": "UPC",
+            "is_linkout": false,
+          },
+        },
+      },
+      result: {
+        data: {
+          relatedMaterialUpdate: {
+            id: 40,
+            identifier: "new-material-title",
+            title: "new-material-title",
+            relation: "References",
+            identifierType: "URL",
+            isLinkout: false,
+            isUrl: true,
+            resolver: "url:",
+          },
+        },
+      },
+    },
+  ];
+
+  const relatedMaterialUpdateFailMock = [
+    {
+      request: {
+        query: relatedMaterialUpdate,
+        variables: {
+          relatedMaterialId: 1,
+          data: {
+            title: "new-title",
+            identifier: "new-identifier",
+            relation: "References",
+            "identifier_type": "UPC",
+            "is_linkout": false,
+          },
+        },
+      },
+      result: { errors: [new GraphQLError("Edit error")] },
+    },
+  ];
+
+  const delay = 200;
+
+  async function unitStepFragmentOpenOverlay(component) {
+    act(() => {
+      component.find("button[data-control-id=\"manage-related-materials\"]").simulate("click");
+    });
+
+    await wait(() => component.update());
+  }
+
+  async function unitStepFragmentCloseOverlay(component) {
+    act(() => {
+      component.find("aside").simulate("click");
+    });
+
+    await wait(() => component.update());
+  }
+
+  async function unitStepFragmentChangeFormFieldIdentifier(component, { form, value }) {
+    act(() => {
+      // edit the material identifier
+      component.find(`input[id="related-materials-form-${form}-field-identifier"]`).
+        simulate("change", { target: { name: "identifier", value } });
+    });
+
+    await wait(() => component.update());
+  }
+
+  async function unitStepFragmentChangeFormFieldTitle(component, { form, value }) {
+    act(() => {
+      // edit the material identifier
+      component.find(`input[id="related-materials-form-${form}-field-identifier"]`).
+        simulate("change", { target: { name: "title", value } });
+    });
+
+    await wait(() => component.update());
+  }
+
+  async function unitStepFragmentChangeFormFieldLinkout(component, { form, checked }) {
+    act(() => {
+      // edit the material identifier
+      component.find(`input[id="related-materials-form-${form}-field-linkout"]`).
+        simulate("change", { target: { name: "title", checked } });
+    });
+
+    await wait(() => component.update());
+  }
+
+  async function unitStepFragmentSubmitChangedForm(component, formId = "add") {
+    const form = component.find(`form[data-form-id="related-materials-form-${formId}"]`);
+
+    expect(form.props()["data-form-changed"]).toEqual(true);
+
+    act(() => {
+      form.props().onSubmit({ preventDefault: jest.fn() });
+    });
+
+    await wait(() => component.update());
+
+    return form;
+  }
+
+  async function unitStepFragmentDiscloseTile(component, materialId) {
+    const tile = component.find(`div[data-material-tile-id="tile-${materialId}"]`);
+
+    tile.find("div[data-control-id=\"tile-disclose-toggle\"]").simulate("click");
+
+    await wait(() => component.update());
+
+    return tile;
+  }
+
+  async function unitStepFragmentResetForm(component, formId = "add") {
+    const form = component.find(`form[data-form-id="related-materials-form-${formId}"]`);
+
+    act(() => {
+      form.props().onReset({ preventDefault: jest.fn() });
+    });
+
+    await wait(() => component.update());
+
+    return form;
+  }
+
+  it("renders a management component, with an add form and empty list if there are no materials", async() => {
+    const component = mount(
+      <MockedProvider mocks={[]}>
+        <ManageRelatedMaterials
+          {...defaultProps}
+          materials={[]}
+        />
+      </MockedProvider>
+    );
+
+    await unitStepFragmentOpenOverlay(component);
+
+    expect(component.find("section[data-control-id=\"materials-add-section\"]")).toHaveLength(1);
+    expect(component.find("section[data-control-id=\"materials-tile-list-section\"]")).toHaveLength(1);
+
+    expect(component.find(RelatedMaterialsListItem)).toHaveLength(0);
+
+    await unitStepFragmentCloseOverlay(component);
+
+    expect(component.find("aside[data-control-id=\"materials-add-section\"]")).toHaveLength(0);
+
+    component.unmount();
+  });
+
+  it("manages adding new materials", async() => {
+    const component = mount(
+      <MockedProvider mocks={[...relatedMaterialCreateMock]}>
+        <ManageRelatedMaterials
+          {...defaultProps}
+          materials={[]}
+        />
+      </MockedProvider>
+    );
+
+    await unitStepFragmentOpenOverlay(component);
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "add", value: "new-material-identifier" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "add", value: "new-material-title" });
+
+    await unitStepFragmentSubmitChangedForm(component, "add");
+
+    await wait(() => undefined, undefined, delay);
+
+    expect(onMaterialsChange).toHaveBeenCalledWith([{
+      id: 40,
+      identifier: "new-material-title",
+      title: "new-material-title",
+      relationshipType: "References",
+      identifierType: "URL",
+      linkout: false,
+      isUrl: true,
+      resolver: "url:",
+    }], "add");
+
+    component.unmount();
+  });
+  it("cannot add more than settings.validation.maxListLength, and handles add gql errors", async() => {
+    const newSettings = JSON.parse(JSON.stringify(fieldSettings));
+
+    newSettings.validation.maxListLength = 2;
+    let component = mount(
+      <MockedProvider mocks={[...relatedMaterialCreateMock]}>
+        <ManageRelatedMaterials
+          {...defaultProps}
+          materials={materials.current}
+          settings={newSettings}
+        />
+      </MockedProvider>
+    );
+
+    await unitStepFragmentOpenOverlay(component);
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "add", value: "new-material-identifier" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "add", value: "new-material-title" });
+
+    await unitStepFragmentSubmitChangedForm(component, "add");
+
+    expect(onMaterialsChange).not.toHaveBeenCalled();
+
+    expect(component.find(Alert)).toHaveLength(1);
+
+    component.unmount();
+
+    // mount with create errors
+    component = mount(
+      <MockedProvider mocks={[]}>
+        <ManageRelatedMaterials
+          {...defaultProps}
+          materials={materials.current}
+        />
+      </MockedProvider>
+    );
+
+    await unitStepFragmentOpenOverlay(component);
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "add", value: "new-material-fail" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "add", value: "new-material-fail" });
+
+    await unitStepFragmentSubmitChangedForm(component, "add");
+
+    expect(onMaterialsChange).not.toHaveBeenCalled();
+
+    expect(component.find(Alert)).toHaveLength(1);
+  });
+
+  it("manages unsaved changes", async() => {
+    const component = mount(
+      <MockedProvider mocks={[...relatedMaterialCreateMock]}>
+        <ManageRelatedMaterials
+          {...defaultProps}
+          materials={materials.current}
+        />
+      </MockedProvider>
+    );
+    onMaterialsChange.mockClear();
+
+    await unitStepFragmentOpenOverlay(component);
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "add", value: "new-material-fail" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "add", value: "new-material-fail" });
+
+    act(() => {
+      component.find("button[data-control-id=\"manage-materials-submit\"]").simulate("click");
+    });
+
+    await wait(() => component.update());
+
+    expect(onMaterialsChange).toHaveBeenCalled();
+
+    let keepEditing = component.find("button[data-control-id=\"unsaved-changes-keep-editing\"]");
+    let closeWithoutSaving = component.find("button[data-control-id=\"unsaved-changes-close-manager\"]");
+
+    expect(closeWithoutSaving).toHaveLength(1);
+    expect(keepEditing).toHaveLength(1);
+    act(() => {
+      keepEditing.simulate("click");
+    });
+
+    await wait(() => component.update());
+
+    keepEditing = component.find("button[data-control-id=\"unsaved-changes-keep-editing\"]");
+    closeWithoutSaving = component.find("button[data-control-id=\"unsaved-changes-close-manager\"]");
+    expect(closeWithoutSaving).toHaveLength(0);
+    expect(keepEditing).toHaveLength(0);
+
+    await unitStepFragmentResetForm(component, "add");
+
+    act(() => {
+      component.find("button[data-control-id=\"manage-materials-submit\"]").simulate("click");
+    });
+
+    await wait(() => component.update());
+
+    keepEditing = component.find("button[data-control-id=\"unsaved-changes-keep-editing\"]");
+    closeWithoutSaving = component.find("button[data-control-id=\"unsaved-changes-close-manager\"]");
+    expect(closeWithoutSaving).toHaveLength(0);
+    expect(keepEditing).toHaveLength(0);
+
+
+    await unitStepFragmentOpenOverlay(component);
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "add", value: "new-material-fail" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "add", value: "new-material-fail" });
+
+    act(() => {
+      component.find("button[data-control-id=\"tile-reorder-decrement\"]").at(0).simulate("click");
+    });
+
+    component.update();
+
+    act(() => {
+      component.find("button[data-control-id=\"manage-materials-submit\"]").simulate("click");
+    });
+
+    await wait(() => component.update());
+
+    closeWithoutSaving = component.find("button[data-control-id=\"unsaved-changes-close-manager\"]");
+
+    expect(closeWithoutSaving).toHaveLength(1);
+
+    act(() => {
+      closeWithoutSaving.simulate("click");
+    });
+
+    await wait(() => component.update());
+
+    // overlay should be closed
+    expect(component.find("section[data-control-id=\"materials-add-section\"]")).toHaveLength(0);
+
+    component.unmount();
+  });
+
+  it("manages removing materials", async() => {
+    const component = mount(
+      <MockedProvider mocks={[...relatedMaterialCreateMock]}>
+        <ManageRelatedMaterials
+          {...defaultProps}
+          materials={materials.current}
+        />
+      </MockedProvider>
+    );
+    onMaterialsChange.mockClear();
+
+    await unitStepFragmentOpenOverlay(component);
+
+    await unitStepFragmentDiscloseTile(component, 1);
+
+    await unitStepFragmentResetForm(component, 1);
+
+    const tile = component.find(`div[data-material-tile-id="tile-${1}"]`);
+
+    expect(tile).toHaveLength(0);
+
+    component.unmount();
+  });
+
+  it("manages editing errors", async() => {
+    // manages failure conditions
+    const component = mount(
+      <MockedProvider mocks={[...relatedMaterialUpdateFailMock]}>
+        <ManageRelatedMaterials
+          {...defaultProps}
+          materials={materials.current}
+        />
+      </MockedProvider>
+    );
+    onMaterialsChange.mockClear();
+
+    await unitStepFragmentOpenOverlay(component);
+
+    await unitStepFragmentDiscloseTile(component, 1);
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "1", value: "new-identifier" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "1", value: "new-title" });
+
+    await unitStepFragmentSubmitChangedForm(component, "1");
+
+
+    expect(onMaterialsChange).not.toHaveBeenCalled();
+
+    expect(component.find(Alert)).toHaveLength(1);
+
+    component.unmount();
+  });
+
+  it("manages editing materials", async() => {
+    // manages successful edit conditions
+    const component = mount(
+      <MockedProvider mocks={[...relatedMaterialUpdateMock]}>
+        <ManageRelatedMaterials
+          {...defaultProps}
+          materials={materials.current}
+        />
+      </MockedProvider>
+    );
+    onMaterialsChange.mockClear();
+
+    await unitStepFragmentOpenOverlay(component);
+
+    await unitStepFragmentDiscloseTile(component, 1);
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "1", value: "new-material-identifier" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "1", value: "new-material-title" });
+
+    await unitStepFragmentSubmitChangedForm(component, "1");
+
+    await wait(() => undefined, undefined, delay);
+
+    // no need to test the editing replaceal.
+    expect(onMaterialsChange).toHaveBeenCalledWith(expect.arrayContaining([]), "edit");
+
+    component.unmount();
+  });
+
+  it("manages material value validations", async() => {
+    const newSettings = JSON.parse(JSON.stringify(fieldSettings));
+    newSettings.validation.maxLinkouts = 0;
+    newSettings.validation.minTitleLength = 3;
+    newSettings.validation.minIdentifierLength = 3;
+    newSettings.validation.maxTitleLength = 5;
+    newSettings.validation.maxIdentifierLength = 5;
+    onMaterialsChange.mockClear();
+
+    const component = mount(
+      <MockedProvider mocks={[...relatedMaterialCreateFailMock]}>
+        <ManageRelatedMaterials
+          {...defaultProps}
+          materials={[]}
+          settings={newSettings}
+        />
+      </MockedProvider>
+    );
+
+    await unitStepFragmentOpenOverlay(component);
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "add", value: "1" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "add", value: "1" });
+
+    await unitStepFragmentSubmitChangedForm(component, "add");
+
+    expect(onMaterialsChange).not.toHaveBeenCalled();
+
+    expect(component.find("div[data-error-at=\"change\"]")).toHaveLength(2);
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "add", value: "too long" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "add", value: "too long" });
+
+
+    expect(component.find("div[data-error-at=\"change\"]")).toHaveLength(2);
+
+
+    await unitStepFragmentChangeFormFieldIdentifier(component, { form: "add", value: "right" });
+    await unitStepFragmentChangeFormFieldTitle(component, { form: "add", value: "right" });
+
+    await unitStepFragmentChangeFormFieldLinkout(component, { form: "add", checked: true });
+
+    expect(component.find("div[data-error-at=\"change\"]")).toHaveLength(1);
+
+    component.unmount();
+  });
+});
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.css b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.css
new file mode 100644
index 000000000..621c95c23
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.css
@@ -0,0 +1,70 @@
+.manageRelatedMaterials {
+  --max-overlay-box-width: calc(124 * var(--gridSize));
+}
+
+.sectionTitle {
+  font-size: var(--typography-L-fontSize);
+  font-weight: 400;
+  font-style: normal;
+  line-height: var(--typography-L-lineHeight);
+
+  color: var(--color-typography-primary);
+  flex: none;
+  align-self: stretch;
+  flex-grow: 0;
+}
+
+.addSection {
+  display: flex;
+  flex-direction: column;
+
+  box-sizing: border-box;
+  width: 100%;
+
+  margin: 0 auto calc(6 * var(--gridSize));
+  padding: calc(4 * var(--gridSize));
+
+  border: 1px solid var(--color-border-primary);
+  border-radius: var(--gridSize);
+
+  background: var(--color-layout-primary-background);
+  justify-content: center;
+  align-items: flex-end;
+  gap: calc(4 * var(--gridSize));
+
+  flex-grow: 1;
+}
+
+.listSection {
+  box-sizing: border-box;
+  width: 100%;
+
+  margin: 0 auto calc(6 * var(--gridSize));
+}
+
+.sectionContent {
+  width: 100%;
+  margin-top: var(--gridSize);
+}
+
+.noMaterials {
+  font-size: var(--typography-M-fontSize);
+  font-weight: 400;
+  font-style: normal;
+  line-height: var(--typography-M-lineHeight);
+
+  margin: 0;
+  padding: 0;
+
+  color: var(--color-typography-primary);
+}
+
+.header {
+  width: 100%;
+
+  margin: 0 auto;
+}
+
+.confirmationFooter {
+  grid-gap: calc(4 * var(--gridSize));
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.jsx
new file mode 100644
index 000000000..2b5f70e0f
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/manageRelatedMaterials.jsx
@@ -0,0 +1,270 @@
+import React, { useState, useCallback, useEffect } from "react";
+import PropTypes from "prop-types";
+import { Button } from "@figshare/fcl/button";
+import { Overlay, OverlayHeader, OverlayFooter, OverlayContent } from "@figshare/fcl/overlay";
+import { useMutation } from "@apollo/react-hooks";
+import getIn from "utils/getIn";
+import parseGraphQLError from "utils/apollo/parseGraphQLError";
+import Registry from "utils/registry";
+import { Forms } from "shared/ui/forms";
+
+import { relatedMaterialCreate, relatedMaterialUpdate } from "../../index.gql";
+import { RelatedMaterialListPropType } from "../../constants";
+import { RelatedMaterialsForm } from "../relatedMaterialsForm";
+import { RelatedMaterialsTileList } from "../relatedMaterialsTileList";
+import { IdentifiersAndRelationshipsContext } from "../identifiersAndRelationships";
+import { RemapMaterial, returnFocus, delayAction } from "../../utils";
+
+import styles from "./manageRelatedMaterials.css";
+import { useManageRelatedMaterials } from "./useManageRelatedMaterials";
+
+
+const allUnsavedChangesForms = "[data-control-id='materials-tile-list-section']" +
+" div[data-tile-changes=\"true\"], " +
+"[data-control-id='materials-add-section'] form[data-form-changed=\"true\"]";
+
+export function ManageRelatedMaterials({ disabled, materials, onMaterialsChange, settings }) {
+  /** State */
+  const [open, setOpen] = useState(false);
+  const [confirmation, setConfirmation] = useState(false);
+  const { state, dispatch, stateRef } = useManageRelatedMaterials(materials);
+  const [addMaterialMutation] = useMutation(relatedMaterialCreate);
+  const [editMaterialMutation] = useMutation(relatedMaterialUpdate);
+
+  /** Callbacks */
+  const openManager = useCallback(() => setOpen(true), [setOpen]);
+  const closeConfirmation = useCallback(() => {
+    setConfirmation(false);
+    returnFocus(Registry.get("related-materials/manager/last-focused-control") ?? "input[name=\"identifier\"]");
+  }, [setConfirmation]);
+  const resolveConfirmation = useCallback(() => {
+    setConfirmation(false);
+    setOpen(false);
+
+    Forms.clear({ namespace: "related-materials" });
+
+    if (stateRef.current.removed || stateRef.current.reordered) {
+      dispatch({
+        type: "INIT_MATERIALS",
+        materials: stateRef.current.initial,
+      });
+    }
+
+    returnFocus("button[data-control-id=\"manage-related-materials\"]");
+  }, [setConfirmation, setOpen]);
+
+  const closeManager = useCallback(() => {
+    const reorderedMaterials = stateRef.current.reordered;
+    const removedMaterials = stateRef.current.removed;
+    const unsavedForms = document.body.querySelectorAll(allUnsavedChangesForms);
+    const hasUnsavedForms = !!unsavedForms.length;
+
+    if (removedMaterials || reorderedMaterials || hasUnsavedForms) {
+      setConfirmation(true);
+
+      return;
+    }
+
+    setOpen(false);
+    returnFocus("button[data-control-id=\"manage-related-materials\"]");
+  }, [setOpen, setConfirmation, stateRef]);
+
+  const submitNewMaterials = useCallback(() => {
+    const newMaterials = stateRef.current.materials;
+    try {
+      if (stateRef.current.reordered || stateRef.current.removed) {
+        dispatch({
+          type: "INIT_MATERIALS",
+          materials: newMaterials,
+        });
+      }
+      onMaterialsChange(newMaterials, "reorder/remove/done");
+    } finally {
+      const DELAY = 50;
+      delayAction(closeManager, DELAY);
+    }
+  }, [onMaterialsChange, closeManager, stateRef]);
+  const addNewMaterial = useCallback(async(newMaterial) => {
+    const maximum = getIn(settings, "validation.maxListLength", 0);
+    const current = getIn(stateRef, "current.materials.length", 0);
+
+    if (current >= maximum) {
+      throw new Error(`Cannot add more than ${maximum} related materials.`);
+    }
+
+    const remapped = RemapMaterial.typeToMutation(newMaterial);
+
+    delete remapped.id;
+    delete remapped.resolver;
+    delete remapped.is_url;
+
+    const payload = { variables: { data: remapped } };
+
+    try {
+      const result = await addMaterialMutation(payload);
+      const created = getIn(result, "data.relatedMaterialCreate");
+      const createdRemapped = RemapMaterial.queryToType(created);
+
+      await dispatch({
+        type: "ADD_RELATED_MATERIAL",
+        material: createdRemapped,
+      });
+
+      await delayAction(() => onMaterialsChange(stateRef.current.materials, "add"));
+    } catch (e) {
+      // throw back so form component can handle it
+      throw new Error(`Could not add new material. ${parseGraphQLError(e)}`);
+    }
+  }, [dispatch, addMaterialMutation, stateRef, settings]);
+  const editMaterial = useCallback(async(newMaterial, oldEntry) => {
+    const relatedMaterialId = newMaterial.id;
+    const remapped = RemapMaterial.typeToMutation(newMaterial);
+
+    delete remapped.id;
+    delete remapped.resolver;
+    delete remapped.is_url;
+
+    const payload = { variables: { relatedMaterialId, data: remapped } };
+
+    try {
+      const result = await editMaterialMutation(payload);
+      const edited = getIn(result, "data.relatedMaterialUpdate");
+      const editedRemapped = RemapMaterial.queryToType(edited);
+
+      await dispatch({
+        type: "EDIT_RELATED_MATERIAL",
+        material: editedRemapped,
+        prev: oldEntry,
+        id: edited.id,
+      });
+
+      await delayAction(() => onMaterialsChange(stateRef.current.materials, "edit"));
+    } catch (e) {
+      // throw back so form component can handle it
+      throw new Error(`Could not edit material. ${parseGraphQLError(e)}`);
+    }
+  });
+  const removeMaterial = useCallback(async(id) => {
+    await dispatch({
+      type: "REMOVE_RELATED_MATERIAL",
+      id,
+    });
+  });
+  const clearDraftMaterial = useCallback(() => undefined, []);
+  const reorderMaterials = useCallback((id, newIndex) => {
+    dispatch({
+      type: "REORDER_RELATED_MATERIAL",
+      id,
+      newIndex,
+    });
+  });
+
+  const handleFocus = useCallback(() => {
+    Registry.set("related-materials/manager/last-focused-control", document.activeElement);
+  }, []);
+
+  useEffect(() => {
+    Registry.delete("related-materials/manager/last-focused-control");
+  }, []);
+
+  return (<>
+    <Button
+      data-control-id="manage-related-materials"
+      disabled={disabled}
+      onClick={openManager}
+    >Manage materials</Button>
+    <Overlay
+      background="primary"
+      className={styles.manageRelatedMaterials}
+      id="manage-related-materials-overlay"
+      isVisible={open}
+      onClose={closeManager}
+    >
+      <OverlayHeader className={styles.header} title="Related Materials" />
+      <OverlayContent>
+        <section
+          className={styles.addSection}
+          data-control-id="materials-add-section"
+          role="presentation"
+          onFocus={handleFocus}
+        >
+          <h2 className={styles.sectionTitle}>Add a new related material</h2>
+          <IdentifiersAndRelationshipsContext.Consumer>
+            {(resources) => (
+              <RelatedMaterialsForm
+                linkoutTotal={state.linkoutTotal}
+                resources={resources}
+                settings={settings}
+                onClear={clearDraftMaterial}
+                onClearLabel="Clear"
+                onSave={addNewMaterial}
+                onSaveLabel="Add material"
+              />
+            )}
+          </IdentifiersAndRelationshipsContext.Consumer>
+        </section>
+        <section
+          className={styles.listSection}
+          data-control-id="materials-tile-list-section"
+          role="presentation"
+          onFocus={handleFocus}
+        >
+          <h2 className={styles.sectionTitle}>Related materials</h2>
+          <div className={styles.sectionContent}>
+            {state.empty ? (
+              <p className={styles.noMaterials} data-id="related-materials-empty">No related materials.</p>
+            ) : (
+              <RelatedMaterialsTileList
+                fieldSettings={settings}
+                materials={state.materials}
+                onEdit={editMaterial}
+                onRemove={removeMaterial}
+                onReorder={reorderMaterials}
+              />
+            )}
+          </div>
+        </section>
+      </OverlayContent>
+      <OverlayFooter>
+        <Button data-control-id="manage-materials-submit" theme="primary" onClick={submitNewMaterials}>Done</Button>
+      </OverlayFooter>
+    </Overlay>
+    <Overlay
+      background="primary"
+      id="manage-materials-unsaved-changes"
+      isVisible={!!confirmation}
+      onClose={closeConfirmation}
+    >
+      <OverlayHeader
+        title="Unsaved changes"
+      />
+      <OverlayContent>
+        <div>Closing without saving will discard any changes you made,{" "}
+          such as <b>adding</b>, <b>editing</b> or <b>reordering</b> materials.</div>
+      </OverlayContent>
+      <OverlayFooter className={styles.confirmationFooter}>
+        <>
+          <Button
+            data-control-id="unsaved-changes-close-manager"
+            theme="secondaryAlt"
+            onClick={resolveConfirmation}
+          >Close without saving</Button>
+          <Button
+            data-control-id="unsaved-changes-keep-editing"
+            theme="primary"
+            onClick={closeConfirmation}
+          >Keep editing</Button>
+        </>
+      </OverlayFooter>
+    </Overlay>
+  </>);
+}
+
+ManageRelatedMaterials.propTypes = {
+  materials: RelatedMaterialListPropType.isRequired,
+  settings: PropTypes.any.isRequired,
+  onMaterialsChange: PropTypes.func.isRequired,
+  disabled: PropTypes.bool,
+};
+
+ManageRelatedMaterials.defaultProps = { disabled: false };
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/useManageRelatedMaterials.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/useManageRelatedMaterials.jsx
new file mode 100644
index 000000000..cc09ccce0
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/manageRelatedMaterials/useManageRelatedMaterials.jsx
@@ -0,0 +1,87 @@
+/* eslint-disable no-use-before-define */
+import { useEffect, useReducer, useRef } from "react";
+
+import { getLinkoutTotal } from "../../utils";
+
+
+export function useManageRelatedMaterials(materials) {
+  const [state, dispatch] = useReducer(manageRelatedMaterialsReducer, { materials, empty: !materials.length });
+  const stateRef = useRef(state);
+
+  useEffect(() => {
+    dispatch({
+      type: "INIT_MATERIALS",
+      materials,
+    });
+  }, [materials, dispatch]);
+
+  useEffect(() => {
+    stateRef.current = state;
+  }, [state, stateRef]);
+
+  return { state, dispatch, stateRef };
+}
+
+export function manageRelatedMaterialsReducer(state, action) {
+  switch (action.type) {
+    case "INIT_MATERIALS": {
+      const { materials } = action;
+      const empty = !materials.length;
+      const linkoutTotal = getLinkoutTotal(materials);
+
+      return { ...state, initial: materials, materials, empty, linkoutTotal, reordered: false, removed: false };
+    }
+    case "ADD_RELATED_MATERIAL": {
+      const newMaterials = [...state.materials, action.material];
+      const empty = !newMaterials.length;
+      const linkoutTotal = getLinkoutTotal(newMaterials);
+
+      return { ...state, materials: newMaterials, empty, linkoutTotal };
+    }
+    case "EDIT_RELATED_MATERIAL": {
+      const index = state.materials.findIndex((entry) => entry.id === action.material.id);
+
+      if (index !== -1) {
+        const newMaterials = state.materials.slice();
+        newMaterials.splice(index, 1, action.material);
+        const empty = !newMaterials.length;
+        const linkoutTotal = getLinkoutTotal(newMaterials);
+
+        return { ...state, materials: newMaterials, empty, linkoutTotal };
+      }
+
+      return state;
+    }
+    case "REMOVE_RELATED_MATERIAL": {
+      const index = state.materials.findIndex((entry) => entry.id === action.id);
+
+      if (index !== -1) {
+        const newMaterials = state.materials.slice();
+        newMaterials.splice(index, 1);
+        const empty = !newMaterials.length;
+        const linkoutTotal = getLinkoutTotal(newMaterials);
+
+        return { ...state, removed: true, materials: newMaterials, empty, linkoutTotal };
+      }
+
+      return state;
+    }
+    case "REORDER_RELATED_MATERIAL": {
+      const index = state.materials.findIndex((entry) => entry.id === action.id);
+
+      if (index !== -1) {
+        const newMaterials = state.materials.slice();
+        const objToMove = state.materials[index];
+
+        newMaterials.splice(index, 1);
+        newMaterials.splice(action.newIndex, 0, objToMove);
+
+        return { ...state, materials: newMaterials, reordered: true };
+      }
+
+      return state;
+    }
+    default:
+      return state;
+  }
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/constants.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/constants.jsx
new file mode 100644
index 000000000..5e60628e1
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/constants.jsx
@@ -0,0 +1,164 @@
+import { isRequired, minChecked, maxLength, minLength } from "../../../../../utils";
+
+
+export const RELATED_MATERIAL_FORM_SCHEMA = {
+  id: "{schema.namespace}-form-{state.id}",
+  namespace: "related-materials",
+  order: ["identifier", "title", "identifierType", "relationshipType", "linkout"],
+  touched: false,
+  submittable: false,
+  hasErrors: false,
+  fields: {
+    identifier: {
+      id: "identifier",
+      value: "",
+      initial: "",
+      error: undefined,
+      settings: {
+        type: "input",
+        label: "Identifier",
+        isRequired: true,
+        placeholder: "Add an identifier",
+      },
+    },
+    title: {
+      id: "title",
+      value: "",
+      initial: "",
+      error: undefined,
+      settings: {
+        type: "input",
+        label: "Title (optional)",
+        info: "If added, the title will be displayed on the item page instead of the URL",
+        isRequired: false,
+        placeholder: "Add a title for the identifier",
+      },
+    },
+    identifierType: {
+      id: "identifierType",
+      error: undefined,
+      value: "URL",
+      initial: "URL",
+      settings: {
+        type: "select",
+        resource: "identifier",
+        label: "Identifier type",
+        isRequired: true,
+        placeholder: "Select type…",
+      },
+    },
+    relationshipType: {
+      id: "relationshipType",
+      error: undefined,
+      value: "References",
+      initial: "References",
+      settings: {
+        type: "select",
+        resource: "relationship",
+        label: "Relation type",
+        isRequired: true,
+        placeholder: "Select type…",
+      },
+    },
+    linkout: {
+      id: "linkout",
+      value: false,
+      initial: false,
+      error: undefined,
+      settings: {
+        type: "checkbox",
+        label: "Show in linkout area",
+        isRequired: false,
+      },
+    },
+  },
+};
+
+const IS_REQUIRED_SCHEMA = {
+  type: "isRequired",
+  at: ["submit", "blur:touched"],
+  parameters: ["touched"],
+  fn: (value) => isRequired(value),
+  message:
+    ({ label }) =>
+      `The '${label}' field is mandatory.`,
+};
+
+export const RELATED_MATERIAL_FORM_VALIDATION_SCHEMA = {
+  identifier: [
+    IS_REQUIRED_SCHEMA,
+    {
+      type: "minLength",
+      at: ["change", "blur:touched", "submit"],
+      parameters: ["maxIdentifierLength", "minIdentifierLength"],
+      fn: (value, { minIdentifierLength }) => minLength(value, minIdentifierLength),
+      message:
+        ({ label, parameters: { minIdentifierLength, maxIdentifierLength } }) =>
+          `'${label}' must be between ${minIdentifierLength} and ${maxIdentifierLength} characters in length.`,
+    },
+    {
+      type: "maxLength",
+      at: ["change", "blur:touched", "submit"],
+      parameters: ["maxIdentifierLength", "minIdentifierLength"],
+      fn: (value, { maxIdentifierLength }) => maxLength(value, maxIdentifierLength),
+      message:
+        ({ label, parameters: { minIdentifierLength, maxIdentifierLength } }) =>
+          `'${label}' must be between ${minIdentifierLength} and ${maxIdentifierLength} characters in length.`,
+    },
+    {
+      type: "isDuplicate",
+      at: ["blur:touched", "submit"],
+      parameters: ["identifiers"],
+      fn: (value, { identifiers }) => !identifiers?.some((obj) => obj.identifier === value),
+      message:
+        () =>
+          "You can not use the same identifier twice.",
+    },
+  ],
+  title: [
+    {
+      type: "minLength",
+      at: ["change", "blur:touched", "submit"],
+      parameters: ["maxTitleLength", "minTitleLength"],
+      fn: (value, { minTitleLength }) => minLength(value, minTitleLength),
+      message:
+        ({ label, parameters: { minTitleLength, maxTitleLength } }) =>
+          `'${label.replace(" (optional)", "")}' must be between` +
+          `${minTitleLength} and ${maxTitleLength} characters in length.`,
+    },
+    {
+      type: "maxLength",
+      at: ["change", "blur:touched", "submit"],
+      parameters: ["minTitleLength", "maxTitleLength"],
+      fn: (value, { maxTitleLength }) => maxLength(value, maxTitleLength),
+      message:
+        ({ label, parameters: { minTitleLength, maxTitleLength } }) =>
+          `'${label.replace(" (optional)", "")}' must be between` +
+          `${minTitleLength} and ${maxTitleLength} characters in length.`,
+    },
+  ],
+  linkout: [
+    {
+      type: "minChecked",
+      at: ["change", "blur", "submit"],
+      parameters: ["maxLinkouts", "currentLinkoutsTotal", "savedMaterialIsLinked"],
+      fn: (value, { maxLinkouts, currentLinkoutsTotal, savedMaterialIsLinked }) => {
+        const canLinkout = minChecked(value, { limit: maxLinkouts, total: currentLinkoutsTotal });
+
+        /**
+         * see - [edgecase][linkout checkbox edit]
+         * While editing:
+         * checking an already saved material should be allowed
+         * if the material is already part of current linkouts
+          */
+        if (savedMaterialIsLinked && value) {
+          return true;
+        }
+
+        return canLinkout;
+      },
+      message: ({ parameters: { maxLinkouts } }) =>
+        `A maximum of ${maxLinkouts} linkout related materials are permitted.`,
+    },
+  ],
+};
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/index.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/index.jsx
new file mode 100644
index 000000000..143def63e
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/index.jsx
@@ -0,0 +1 @@
+export * from "./relatedMaterialsForm";
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.css b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.css
new file mode 100644
index 000000000..d438aca13
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.css
@@ -0,0 +1,109 @@
+.relatedMaterialsForm {
+  position: relative;
+
+  display: flex;
+  flex-direction: column;
+
+  width: 100%;
+}
+
+.fields {
+  width: 100%;
+  padding: calc(2 * var(--gridSize));
+}
+
+.field {
+  width: 100%;
+  padding-bottom: calc(3 * var(--gridSize));
+}
+
+.fieldLabel {
+  font-weight: bold;
+
+  min-height: unset;
+  padding-bottom: calc(2 * var(--gridSize));
+}
+
+.nestedField:not(:last-of-type) {
+  width: 100%;
+  padding-bottom: calc(3 * var(--gridSize));
+}
+
+.nestedFieldLabel {
+  font-size: var(--typography-S-fontSize);
+  font-weight: 400;
+  line-height: var(--typography-XS-lineHeight);
+
+  display: flex;
+
+  padding-bottom: var(--gridSize);
+
+  color: var(--color-typography-disabled);
+  align-items: center;
+  justify-content: flex-start;
+  gap: var(--gridSize);
+}
+
+/* [Label] resets */
+.fieldLabel,
+.nestedFieldLabel {
+  min-height: unset;
+}
+
+.fieldLabel > label,
+.nestedFieldLabel > label {
+  font-weight: inherit;
+
+  padding-top: 0;
+}
+
+/* [Label] resets - end */
+
+.nestedFieldLabel > span {
+  display: inline-flex;
+}
+
+.nestedFieldLabel button {
+  width: var(--typography-M-fontSize);
+  height: var(--typography-M-fontSize);
+  margin-top: 0;
+}
+
+.controls {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  gap: calc(3 * var(--gridSize));
+}
+
+.controls > button > span {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  gap: var(--gridSize);
+}
+
+.input {
+  width: 100%;
+}
+
+.select {
+  width: 100%;
+}
+
+.option {
+  font-weight: normal;
+}
+
+@media all and (max-width: 443px) {
+  .controls {
+    flex-direction: column;
+    align-items: flex-start;
+    justify-content: flex-start;
+    gap: calc(3 * var(--gridSize));
+  }
+
+  .controls > * {
+    width: 100%;
+  }
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.jsx
new file mode 100644
index 000000000..d99e90d5c
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsForm/relatedMaterialsForm.jsx
@@ -0,0 +1,449 @@
+/* eslint-disable max-lines */
+import React, { useRef, useCallback, useEffect } from "react";
+import { any, bool, func, node, number, string } from "prop-types";
+import classnames from "classnames";
+import { Button } from "@figshare/fcl/button";
+import TextInput from "@figshare/fcl/input/text";
+import Checkbox from "@figshare/fcl/input/checkbox";
+import Select, { Option } from "@figshare/components/ui/select";
+import { FieldError } from "@figshare/fcl/fieldError";
+import { FormAlerts, pushFormAlert, clearFormAlerts } from "@figshare/fcl/formAlerts";
+import uuid from "utils/uuid";
+import { useForm, Forms } from "shared/ui/forms";
+import Registry from "utils/registry";
+
+import Label from "../../../../genericFields/textField/components/label";
+import { RelatedMaterialPropType, ResourcesPropType, ResourceStatus } from "../../constants";
+import { tileMaterialIsSavedLinkout } from "../relatedMaterialsTileList/utils";
+
+import { RELATED_MATERIAL_FORM_SCHEMA, RELATED_MATERIAL_FORM_VALIDATION_SCHEMA } from "./constants";
+import styles from "./relatedMaterialsForm.css";
+
+
+function renderResource(option) {
+  return (<Option key={option.key} className={styles.option} value={option.value}>
+    {option.key}
+  </Option>);
+}
+
+
+export function RelatedMaterialsForm({
+  material, persist, resources, className, linkoutTotal, settings,
+  onClear, onSave, onClearLabel, onSaveLabel,
+}) {
+
+  const {
+    state, stateRef,
+    updateField, batchUpdate, getFieldHtmlId, resetForm,
+    getFieldError,
+  } = useForm({
+    data: material,
+    schema: RELATED_MATERIAL_FORM_SCHEMA,
+    validation: RELATED_MATERIAL_FORM_VALIDATION_SCHEMA,
+    persist,
+  });
+  // keep and update a live reference to
+  // a provided total number of linked-out related materials
+  const linkoutTotalRef = useRef(linkoutTotal);
+  const settingsRef = useRef(settings);
+
+  useEffect(() => {
+    linkoutTotalRef.current = linkoutTotal;
+  }, [linkoutTotal]);
+
+  const onFormClear = useCallback((event) => {
+    event.preventDefault();
+    const formState = stateRef.current;
+    const { formId } = formState;
+    clearFormAlerts(`related-materials-form-${formId}`);
+    resetForm({ material });
+    onClear?.(material);
+  }, [onClear, resetForm, material]);
+
+  const validateEntireForm = useCallback(() => {
+    const form = stateRef.current;
+    const { order, fields, formId, touched } = form;
+    const batch = { order: [], fields: {} };
+
+    // see NOTE: [edgecase][linkout checkbox edit]
+    const savedMaterialIsLinked = tileMaterialIsSavedLinkout(formId);
+
+    order.forEach((id) => {
+      const change = {};
+      const field = fields[id];
+
+      if (!field) {
+        return;
+      }
+
+      // add the field id for batch changes
+      batch.order.push(id);
+
+      const { validation } = settingsRef.current;
+      const error = getFieldError({
+        name: id,
+        value: field.value,
+        at: "submit",
+        meta: {
+          touched,
+          formId,
+          label: field.settings.label,
+          parameters: {
+            ...validation,
+            currentLinkoutsTotal: linkoutTotalRef.current,
+            savedMaterialIsLinked,
+          },
+        },
+      });
+
+      if (error) {
+        // define the change
+        change.error = error;
+        // mark the form appropriately
+        batch.touched = true;
+        batch.hasErrors = true;
+        batch.submittable = false;
+      }
+
+      // add the change for this field.
+      batch.fields[id] = change;
+    });
+
+    // update the form state, and return the isValid value of the form.
+    batchUpdate(batch);
+
+    return !batch.hasErrors;
+  }, [stateRef, settingsRef, linkoutTotalRef, batchUpdate]);
+
+  const onFormSubmit = useCallback(async(event) => {
+    event.preventDefault();
+    const formState = stateRef.current;
+    const { formId, id, fields } = formState;
+    // this would need to be requested or given upon a request
+    const newMaterialId = id === "add" ? uuid() : id;
+
+
+    const newMaterial = {
+      id: newMaterialId,
+      title: fields.title.value,
+      identifier: fields.identifier.value,
+      identifierType: fields.identifierType.value,
+      relationshipType: fields.relationshipType.value,
+      linkout: !!fields.linkout.value,
+    };
+
+    const valid = await validateEntireForm();
+
+    if (!valid) {
+      return;
+    }
+
+    try {
+      Forms.registry.delete(`form-changes-${stateRef.current.formId}`);
+
+      await onSave(newMaterial, state.material);
+
+      pushFormAlert({
+        channel: `${formId}`,
+        content: <span>Changes saved successfully.</span>,
+        type: "success",
+        timeout: 5000,
+      });
+
+      if (id === "add") {
+        resetForm();
+      }
+    } catch (e) {
+      pushFormAlert({
+        channel: `${formId}`,
+        content: <span>{e?.message ?? e}</span>,
+        type: "error",
+      });
+    }
+
+
+  }, [onSave, stateRef, resetForm, validateEntireForm, resources]);
+
+  const onInputChange = useCallback((event) => {
+    const { name, value } = event.target;
+    const field = stateRef.current.fields?.[name];
+    const { formId, touched } = stateRef.current;
+    const { validation } = settingsRef.current;
+    const error = getFieldError({
+      name,
+      value,
+      at: "change",
+      meta: {
+        touched,
+        formId,
+        label: field.settings.label,
+        parameters: { ...validation },
+      },
+    });
+
+    updateField(name, { value, error });
+  }, [updateField, stateRef, settingsRef]);
+
+  const onInputBlur = useCallback((event) => {
+    const { name, value } = event.target;
+    const field = stateRef.current.fields?.[name];
+    const { formId, touched } = stateRef.current;
+    const { validation } = settingsRef.current;
+    const materialsRef = Registry.get("item-edit/related-materials");
+    const identifiers = materialsRef?.current;
+
+    const error = getFieldError({
+      value,
+      name,
+      at: "blur:touched",
+      meta: {
+        touched,
+        formId,
+        label: field.settings.label,
+        parameters: { ...validation, identifiers },
+      },
+    });
+
+    updateField(name, { error });
+  }, [updateField, stateRef, settingsRef]);
+
+  const onCheckboxChange = useCallback((event) => {
+    const { name, checked } = event.target;
+    const field = stateRef.current.fields?.[name];
+    const { formId, touched } = stateRef.current;
+    const { validation } = settingsRef.current;
+
+
+    // NOTE: [edgecase][linkout checkbox edit]
+    // query if the material we are editing, if this applies
+    // is already in linkouts
+    // if it is so, we need to pass this property to the validation
+    // as it will impact if it is valid or not.
+    // If the item was unchecked and it was part of the saved linkouts
+    // and we want to check it again, the validation must pass
+    const savedMaterialIsLinked = tileMaterialIsSavedLinkout(formId);
+
+    // for linkout validation an external total is required
+    // we define a validation parameter for the function call here and pass it
+    // the current total and the limit defined in the schema
+    const error = getFieldError({
+      value: checked,
+      name,
+      at: "change",
+      meta: {
+        touched,
+        formId,
+        label: field.settings.label,
+        parameters: {
+          ...validation,
+          currentLinkoutsTotal: linkoutTotalRef.current,
+          savedMaterialIsLinked,
+        },
+      },
+    });
+
+    updateField(name, { value: checked, error });
+  }, [updateField, stateRef, settingsRef, linkoutTotalRef]);
+
+  const onSelectChange = useCallback((change) => {
+    const { name, value } = change;
+    const field = stateRef.current.fields?.[name];
+    const { formId, touched } = stateRef.current;
+    const { validation } = settingsRef.current;
+    const error = getFieldError({
+      name,
+      value,
+      at: "change",
+      meta: {
+        touched,
+        formId,
+        label: field.settings.label,
+        parameters: { ...validation },
+      },
+    });
+
+    updateField(name, { value, error });
+  }, [updateField, stateRef, settingsRef]);
+
+  const onIdentifierTypeChange = useCallback((value) => {
+    onSelectChange({ value, name: "identifierType" });
+  }, [onSelectChange]);
+  const onRelationshipTypeChange = useCallback((value) => {
+    onSelectChange({ value, name: "relationshipType" });
+  }, [onSelectChange]);
+
+  return (
+    <form
+      className={classnames(styles.relatedMaterialsForm, className)}
+      data-form-changed={state.changed}
+      data-form-id={`${state.formId}`}
+      data-form-touched={state.touched}
+      onReset={onFormClear}
+      onSubmit={onFormSubmit}
+    >
+      <FormAlerts id={`${state.formId}`} />
+      <div className={styles.fields} data-id="material-form-fields">
+        <div className={styles.field} data-field-group-id="identifier-and-title-group">
+          <Label
+            className={styles.fieldLabel}
+            isRequired={state.fields.identifier.settings.isRequired}
+            title="Related material identifier"
+          />
+          <div
+            className={styles.nestedField}
+            data-field-changed={state.fields.identifier.changed}
+            data-field-id={state.fields.identifier.id}
+            data-field-label={state.fields.identifier.settings.label}
+          >
+            <Label
+              className={styles.nestedFieldLabel}
+              htmlFor={getFieldHtmlId(state.fields.identifier.id)}
+              isRequired={state.fields.identifier.settings.isRequired}
+              title={state.fields.identifier.settings.label}
+            >
+              {state.fields.identifier.settings.info}
+            </Label>
+            <TextInput
+              autoComplete="off"
+              className={styles.input}
+              error={!!state.fields.identifier.error}
+              id={getFieldHtmlId(state.fields.identifier.id)}
+              name={state.fields.identifier.id}
+              placeholder={state.fields.identifier.settings.placeholder}
+              type="text"
+              value={state.fields.identifier.value}
+              onBlur={onInputBlur}
+              onChange={onInputChange}
+            />
+            <FieldError error={state.fields.identifier.error} />
+          </div>
+          <div
+            className={styles.nestedField}
+            data-field-changed={state.fields.title.changed}
+            data-field-id={state.fields.title.id}
+            data-field-label={state.fields.title.settings.label}
+          >
+            <Label
+              className={styles.nestedFieldLabel}
+              htmlFor={getFieldHtmlId(state.fields.title.id)}
+              isRequired={state.fields.title.settings.isRequired}
+              title={state.fields.title.settings.label}
+            >
+              {state.fields.title.settings.info}
+            </Label>
+            <TextInput
+              autoComplete="off"
+              className={styles.input}
+              error={!!state.fields.title.error}
+              id={getFieldHtmlId(state.fields.title.id)}
+              name={state.fields.title.id}
+              placeholder={state.fields.title.settings.placeholder}
+              type="text"
+              value={state.fields.title.value}
+              onBlur={onInputBlur}
+              onChange={onInputChange}
+            />
+            <FieldError error={state.fields.title.error} />
+          </div>
+        </div>
+        <div
+          className={styles.field}
+          data-field-changed={state.fields.identifierType.changed}
+          data-field-id={state.fields.identifierType.id}
+          data-field-label={state.fields.identifierType.settings.label}
+        >
+          <Label
+            className={styles.fieldLabel}
+            htmlFor={getFieldHtmlId(state.fields.identifierType.id)}
+            isRequired={state.fields.identifierType.settings.isRequired}
+            title={state.fields.identifierType.settings.label}
+          >
+            {state.fields.identifierType.settings.info}
+          </Label>
+          <Select
+            key={resources.identifiers.status}
+            autoComplete="off"
+            className={styles.select}
+            error={!!state.fields.identifierType.error}
+            id={getFieldHtmlId(state.fields.identifierType.id)}
+            loading={resources.identifiers.status === ResourceStatus.loading}
+            loadingErrorMessage={resources.identifiers.error}
+            name={state.fields.identifierType.id}
+            placeholder={state.fields.identifierType.settings.placeholder}
+            value={state.fields.identifierType.value}
+            onChange={onIdentifierTypeChange}
+          >{resources.identifiers.data.map(renderResource)}</Select>
+          <FieldError error={state.fields.identifierType.error} />
+        </div>
+        <div
+          className={styles.field}
+          data-field-changed={state.fields.relationshipType.changed}
+          data-field-id={state.fields.relationshipType.id}
+          data-field-label={state.fields.relationshipType.settings.label}
+        >
+          <Label
+            className={styles.fieldLabel}
+            htmlFor={getFieldHtmlId(state.fields.relationshipType.id)}
+            isRequired={state.fields.relationshipType.settings.isRequired}
+            title={state.fields.relationshipType.settings.label}
+          >
+            {state.fields.relationshipType.settings.info}
+          </Label>
+          <Select
+            key={resources.relationships.status}
+            autoComplete="off"
+            className={styles.select}
+            error={!!state.fields.relationshipType.error}
+            id={getFieldHtmlId(state.fields.relationshipType.id)}
+            loading={resources.relationships.status === ResourceStatus.loading}
+            loadingErrorMessage={resources.relationships.error}
+            name={state.fields.relationshipType.id}
+            placeholder={state.fields.relationshipType.settings.placeholder}
+            value={state.fields.relationshipType.value}
+            onChange={onRelationshipTypeChange}
+          >{resources.relationships.data.map(renderResource)}</Select>
+          <FieldError error={state.fields.relationshipType.error} />
+        </div>
+        <div
+          className={styles.field}
+          data-field-changed={state.fields.linkout.changed}
+          data-field-id={state.fields.linkout.id}
+          data-field-label={state.fields.linkout.settings.label}
+        >
+          <Checkbox
+            checked={state.fields.linkout.value}
+            error={!!state.fields.linkout.error}
+            id={getFieldHtmlId(state.fields.linkout.id)}
+            name={state.fields.linkout.id}
+            onChange={onCheckboxChange}
+          >{state.fields.linkout.settings.label}</Checkbox>
+          <FieldError error={state.fields.linkout.error} />
+        </div>
+      </div>
+      <div className={styles.controls} data-id="material-form-controls">
+        <Button theme="secondaryAlt" type="reset">{onClearLabel}</Button>
+        <Button disabled={!state.submittable} theme="primary" type="submit">{onSaveLabel}</Button>
+      </div>
+    </form>
+  );
+}
+
+RelatedMaterialsForm.propTypes = {
+  resources: ResourcesPropType.isRequired,
+  settings: any.isRequired,
+  onClear: func.isRequired,
+  onClearLabel: node.isRequired,
+  onSave: func.isRequired,
+  onSaveLabel: node.isRequired,
+  className: string,
+  linkoutTotal: number,
+  material: RelatedMaterialPropType,
+  persist: bool,
+};
+
+RelatedMaterialsForm.defaultProps = {
+  className: undefined,
+  material: undefined,
+  linkoutTotal: 0,
+  persist: false,
+};
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/index.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/index.jsx
new file mode 100644
index 000000000..79967d5b3
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/index.jsx
@@ -0,0 +1,2 @@
+export * from "./relatedMaterialsList";
+export * from "./relatedMaterialsListItem";
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/index.test.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/index.test.jsx
new file mode 100644
index 000000000..416d6361e
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/index.test.jsx
@@ -0,0 +1,157 @@
+import { mount } from "enzyme";
+import React from "react";
+import { act } from "react-dom/test-utils";
+import { Button } from "@figshare/fcl/button";
+
+import { RelatedMaterialsList, RelatedMaterialsListItem } from "./index";
+
+
+describe("<RelatedMaterialsListItem />", () => {
+  it("renders material details with url, linkout and linebreak variations", () => {
+    let component = mount(
+      <RelatedMaterialsListItem
+        id="material-id"
+        identifier="identifier"
+        isLinkout={true}
+        isUrl={true}
+        order={1}
+        relation="References"
+        title="title"
+        titleHasWords={true}
+        type="DOI"
+      />
+    );
+
+    expect(component.find(Button)).toHaveLength(1);
+    expect(component.find(".title.sentence")).toHaveLength(1);
+    expect(component.find("div[data-node-id=\"material-linkout-icon\"]")).toHaveLength(1);
+    expect(component.find(".title").text()).toEqual("DOI - References title");
+
+    component.unmount();
+
+    component = mount(
+      <RelatedMaterialsListItem
+        id="material-id"
+        identifier="identifier"
+        isLinkout={false}
+        isUrl={false}
+        order={1}
+        relation="References"
+        title="title"
+        titleHasWords={false}
+        type="DOI"
+      />
+    );
+
+    expect(component.find(Button)).toHaveLength(0);
+    expect(component.find(".title.word")).toHaveLength(1);
+    expect(component.find("div[data-node-id=\"material-linkout-icon\"]")).toHaveLength(0);
+    expect(component.find(".title").text()).toEqual("DOI - References title (identifier)");
+
+    component.unmount();
+  });
+});
+
+describe("<RelatedMaterialsList />", () => {
+
+  const material = {
+    "id": 82,
+    "title": "10.1044/related-materials",
+    "identifier": "10.1044/related-materials",
+    "relationshipType": "IsCitedBy",
+    "identifierType": "DOI",
+    "linkout": true,
+  };
+
+  const numberOfMaterials = 20;
+
+  const materials = Array.from(new Array(numberOfMaterials), (v, index) => {
+    return { ...material, id: `material-${index}` };
+  });
+
+  it("renders material item lists, limited to a certain number at a time", () => {
+    const component = mount(
+      <RelatedMaterialsList
+        identifiers={[]}
+        itemId={100}
+        materials={materials}
+        publicList={false}
+        relationships={[]}
+      />
+    );
+
+    expect(component.find(".relatedMaterials")).toHaveLength(1);
+    expect(component.find(RelatedMaterialsListItem)).toHaveLength(10);
+
+    component.unmount();
+  });
+
+  it("renders a load more button and renders more items if pressed", () => {
+    const component = mount(
+      <RelatedMaterialsList
+        identifiers={[]}
+        itemId={100}
+        materials={materials}
+        publicList={true}
+        relationships={[]}
+      />
+    );
+
+    expect(component.find(".relatedMaterials")).toHaveLength(1);
+    expect(component.find(RelatedMaterialsListItem)).toHaveLength(10);
+
+    act(() => {
+      component.find("button[data-control-id=\"related-materials-list-show-more\"]").simulate("click");
+    });
+
+    component.update();
+    expect(component.find(RelatedMaterialsListItem)).toHaveLength(materials.length);
+
+    component.unmount();
+  });
+
+  it("extracts identifier and relationsips meta if available, and uses identifier for undefined titles", () => {
+    const component = mount(
+      <RelatedMaterialsList
+        identifiers={[
+          {
+            key: "DOI",
+            value: "DOI",
+            meta: {
+              name: "DOI",
+              resolver: "https://doi.org/",
+              isUrl: false,
+            },
+          },
+        ]}
+        itemId={100}
+        materials={[{ ...material, title: "" }]}
+        publicList={true}
+        relationships={[
+          {
+            key: "Is cited by",
+            value: "IsCitedBy",
+            meta: {
+              name: "IsCitedBy",
+              label: "Is cited by",
+            },
+          },
+        ]}
+      />
+    );
+
+    expect(component.find(".relatedMaterials")).toHaveLength(1);
+
+    const item = component.find(RelatedMaterialsListItem);
+
+    expect(item).toHaveLength(1);
+
+    expect(item.props()).toEqual(expect.objectContaining({
+      relation: "Is cited by",
+      identifier: "https://doi.org/10.1044/related-materials",
+      isUrl: false,
+    }));
+
+    component.unmount();
+  });
+});
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsList.css b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsList.css
new file mode 100644
index 000000000..6ebda9e20
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsList.css
@@ -0,0 +1,56 @@
+.relatedMaterials {
+  display: flex;
+  flex-direction: column;
+
+  width: 100%;
+  max-width: 100%;
+
+  flex: 1 0;
+  align-items: flex-start;
+  justify-content: flex-start;
+}
+
+.list {
+  display: grid;
+
+  row-gap: calc(2 * var(--gridSize));
+  column-gap: var(--gridSize);
+
+  margin: calc(2 * var(--gridSize)) 0;
+  padding: 0;
+
+  list-style: none;
+  align-items: start;
+  grid-template-columns: max-content max-content auto;
+}
+
+.publicList {
+  grid-template-columns: max-content auto;
+}
+
+.publicList span[data-material-item-number] {
+  grid-column: 1 !important;
+}
+
+.loadMore {
+  align-self: center;
+}
+
+.loadMore > span {
+  display: flex;
+  overflow: visible;
+
+  width: var(--typography-M-fontSize);
+  height: var(--typography-M-fontSize);
+  margin-right: calc(2 * var(--gridSize));
+  align-items: center;
+  justify-content: center;
+}
+
+.loadMore > span > svg {
+  width: 100%;
+  height: auto;
+  margin: 0;
+  margin-right: 0 !important;
+  padding: 0;
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsList.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsList.jsx
new file mode 100644
index 000000000..5755b3d31
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsList.jsx
@@ -0,0 +1,105 @@
+import React, { useCallback, useState, useMemo } from "react";
+import { Button } from "@figshare/fcl/button";
+import DoubleChevronDownMedium from "@figshare/fcl/icons/doubleChevron/down/medium";
+import classnames from "classnames";
+import { shape, string, bool, number, arrayOf, oneOfType } from "prop-types";
+import getIn from "utils/getIn";
+import { NodeWithHighlights } from "shared/ui/highlights";
+
+import { RelatedMaterialListPropType, SHOWN_ITEM_LIMIT } from "../../constants";
+import { resolveIdentifier } from "../../utils";
+
+import { RelatedMaterialsListItem } from "./relatedMaterialsListItem";
+import style from "./relatedMaterialsList.css";
+
+
+function renderRelatedMaterial(material, index, { identifiers, relationships, withHighlights, showLinkout, itemId }) {
+  const { id, title, linkout, relationshipType, identifierType, identifier } = material;
+  const order = index + 1;
+  const relationshipObj = relationships.find((entry) => entry.value === relationshipType);
+  const relation = getIn(relationshipObj, "key", relationshipType);
+  const identifierTypeObj = identifiers.find((entry) => entry.key === identifierType);
+  const type = getIn(identifierTypeObj, "key", identifierType);
+  const isUrl = getIn(material, "isUrl", getIn(identifierTypeObj, "meta.isUrl", false));
+  const resolver = getIn(material, "resolver", getIn(identifierTypeObj, "meta.resolver", ""));
+  const resolvedIdentifier = resolveIdentifier(identifier, identifierType, resolver);
+  const displayTitle = title || identifier;
+  /**
+   * For lists that are rendered in the item/preview pages
+   * search highlights are needed for the material title.
+   */
+  const titleNode = withHighlights ? (<NodeWithHighlights itemId={itemId} text={displayTitle} />) : displayTitle;
+  const titleHasWords = displayTitle.search(/\s/) !== -1;
+
+  return (
+    <RelatedMaterialsListItem
+      key={id}
+      id={id}
+      identifier={resolvedIdentifier}
+      isLinkout={linkout && showLinkout}
+      isUrl={isUrl}
+      order={order}
+      relation={relation}
+      title={titleNode}
+      titleHasWords={titleHasWords}
+      type={type}
+    />
+  );
+}
+
+export function RelatedMaterialsList({ materials, publicList, itemId, identifiers, relationships }) {
+  const [limit, setLimit] = useState(SHOWN_ITEM_LIMIT);
+  const shown = useMemo(() => materials.slice(0, limit), [materials, limit]);
+  const count = materials?.length;
+  const empty = !count;
+  const hasMore = !empty && count > limit;
+  const hasLinkout = materials.some((item) => item.linkout);
+
+  const onShowMoreMaterials = useCallback(() => {
+    setLimit((s) => s + SHOWN_ITEM_LIMIT);
+  }, [setLimit]);
+  const rendererInfo = useMemo(() => {
+    return {
+      identifiers,
+      relationships,
+      itemId,
+      withHighlights: publicList,
+      showLinkout: !publicList,
+    };
+  }, [identifiers, relationships, publicList, itemId]);
+  const renderShownMaterials = useCallback((material, index) =>
+    renderRelatedMaterial(material, index, rendererInfo),
+  [rendererInfo]);
+
+  return (
+    <div className={style.relatedMaterials} data-group-id="related-materials-list">
+      <ol
+        className={classnames(style.list, { [style.publicList]: publicList || !hasLinkout })}
+        data-list-id="related-materials-list-element"
+      >
+        {shown.map(renderShownMaterials)}
+      </ol>
+      {hasMore && (
+        <Button
+          Icon={DoubleChevronDownMedium}
+          className={style.loadMore}
+          data-control-id="related-materials-list-show-more"
+          theme="tertiary"
+          onClick={onShowMoreMaterials}
+        >Show More</Button>)}
+    </div>);
+}
+
+RelatedMaterialsList.propTypes = {
+  materials: RelatedMaterialListPropType.isRequired,
+  identifiers: arrayOf(shape({ key: string, value: string })),
+  itemId: oneOfType([number, string]),
+  publicList: bool,
+  relationships: arrayOf(shape({ key: string, value: string })),
+};
+RelatedMaterialsList.defaultProps = {
+  itemId: undefined,
+  publicList: false,
+  identifiers: [],
+  relationships: [],
+};
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsListItem.css b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsListItem.css
new file mode 100644
index 000000000..306912c1b
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsListItem.css
@@ -0,0 +1,61 @@
+.item {
+  justify-content: start;
+
+  display: contents;
+}
+
+.item span[data-material-item-number] {
+  grid-column: 2;
+  justify-self: end;
+}
+
+.icon {
+  display: flex;
+
+  height: calc(4 * var(--gridSize));
+}
+
+.icon > svg {
+  fill: var(--color-typography-secondary);
+}
+
+.title {
+  display: inline;
+}
+
+.link {
+  text-decoration: underline;
+}
+
+.link,
+.text {
+  display: inline;
+
+  word-wrap: inherit;
+  line-break: inherit;
+  overflow-wrap: inherit;
+}
+
+.link > *,
+.text > * {
+  font-size: inherit;
+  line-height: inherit;
+
+  word-wrap: inherit;
+  line-break: inherit;
+  overflow-wrap: inherit;
+}
+
+.sentence {
+  line-break: normal;
+
+  word-wrap: break-word;
+  overflow-wrap: break-word;
+}
+
+.word {
+  line-break: anywhere;
+
+  word-break: break-all;
+  overflow-wrap: anywhere;
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsListItem.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsListItem.jsx
new file mode 100644
index 000000000..aecdc1388
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList/relatedMaterialsListItem.jsx
@@ -0,0 +1,63 @@
+import React from "react";
+import classnames from "classnames";
+import { Button } from "@figshare/fcl/button";
+import Papers from "@figshare/fcl/icons/papers";
+import { string, bool, number, oneOfType, node } from "prop-types";
+
+import styles from "./relatedMaterialsListItem.css";
+
+
+export function RelatedMaterialsListItem({
+  id, identifier, title, type, relation,
+  order, isUrl, isLinkout, titleHasWords,
+}) {
+  return (
+    <li
+      key={id}
+      className={styles.item}
+      data-id={`related-material-item-${id}`}
+      data-material-as-link={isUrl}
+      data-material-id={id}
+      data-material-identifier={identifier}
+      data-material-identifier-type={type}
+      data-material-relation={relation}
+    >
+      {isLinkout && <div className={styles.icon} data-node-id="material-linkout-icon"><Papers /></div>}
+      <span data-material-item-number={order} >{` ${order}. `}</span>
+      <div className={classnames(styles.title, titleHasWords ? styles.sentence : styles.word)}>
+        <span data-node-id="material-identifier-type">
+          {`${type} - `}
+        </span>
+        <span data-node-id="material-relation">
+          {`${relation} `}
+        </span>
+        {isUrl ? (
+          <Button
+            className={styles.link}
+            data-control-id="material-link" href={identifier}
+            target="_blank"
+            theme={"tertiary"}
+          >
+            {title}
+          </Button>
+        ) : (<span className={styles.text} data-node-id="material-title"><i>{title}</i> ({identifier})</span>)}
+      </div>
+    </li>
+  );
+}
+
+RelatedMaterialsListItem.propTypes = {
+  id: oneOfType([string, number]).isRequired,
+  identifier: string.isRequired,
+  isLinkout: bool.isRequired,
+  isUrl: bool.isRequired,
+  order: number.isRequired,
+  relation: string.isRequired,
+  title: node.isRequired,
+  type: string.isRequired,
+  titleHasWords: bool,
+};
+
+RelatedMaterialsListItem.defaultProps = { titleHasWords: true };
+
+export default RelatedMaterialsListItem;
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/index.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/index.jsx
new file mode 100644
index 000000000..464aaa719
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/index.jsx
@@ -0,0 +1,2 @@
+export * from "./relatedMaterialTile";
+export * from "./relatedMaterialsTileList";
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/index.test.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/index.test.jsx
new file mode 100644
index 000000000..66bdbffea
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/index.test.jsx
@@ -0,0 +1,499 @@
+import { mount } from "enzyme";
+import React from "react";
+import { act } from "react-dom/test-utils";
+import { MockedProvider } from "@apollo/react-testing";
+import { wait } from "utils/apollo/testing";
+
+import { IdentifiersAndRelationshipsContext } from "../identifiersAndRelationships";
+
+import { RelatedMaterialTile, RelatedMaterialsTileList } from "./index";
+
+
+const fieldSettings = {
+  "defaultValue": [],
+  "isMultiple": true,
+  "label": "References",
+  "placeholder": "Add a URL that links to references or related content ",
+  "options": null,
+  "isRequired": false,
+  "description": null,
+  "validation": {
+    "maxListLength": 100,
+    "maxLinkouts": 5,
+    "minTitleLength": 1,
+    "maxTitleLength": 1000,
+    "minIdentifierLength": 1,
+    "maxIdentifierLength": 2000,
+  },
+};
+
+const mockIdentifiersAndRelationships = {
+  identifiers: {
+    data: [
+      {
+        key: "DOI",
+        meta: {
+          isUrl: true,
+          name: "DOI",
+          resolver: "https://doi.org/",
+        },
+        value: "DOI",
+      },
+    ],
+    status: "ready",
+  },
+  meta: { error: false, ready: true },
+  relationships: {
+    data: [
+      {
+        key: "Is cited by",
+        meta: {
+          label: "Is cited by",
+          name: "IsCitedBy",
+        },
+        value: "IsCitedBy",
+      },
+    ],
+    status: "ready",
+  },
+};
+
+describe("<RelatedMaterialsTileList />", () => {
+  const material = {
+    "id": 82,
+    "title": "10.1044/related-materials",
+    "identifier": "10.1044/related-materials",
+    "relationshipType": "IsCitedBy",
+    "identifierType": "DOI",
+    "linkout": false,
+    "isUrl": true,
+    "resolver": "",
+  };
+
+  const numberOfMaterials = 20;
+  const pageSize = 10;
+
+  const materials = Array.from(new Array(numberOfMaterials), (v, index) => {
+    return { ...material, id: `material-${index}` };
+  });
+
+  const onEdit = jest.fn();
+  const onReorder = jest.fn();
+  const onRemove = jest.fn();
+
+  // make some materials linkouts
+  materials[0].linkout = true;
+  materials[1].linkout = true;
+  materials[2].linkout = true;
+
+  beforeEach(() => {
+    window.IntersectionObserversInterface.clearObservers();
+  });
+
+  afterEach(() => {
+    jest.clearAllMocks();
+  });
+
+  it("renders all materials as tiles with total linkouts info", () => {
+    const component = mount(
+      <RelatedMaterialsTileList
+        fieldSettings={fieldSettings}
+        materials={materials}
+        onEdit={onEdit}
+        onRemove={onRemove}
+        onReorder={onReorder}
+      />
+    );
+
+    expect(component.find("ol[data-node-id=\"related-materials-editable-tiles\"]")).toHaveLength(1);
+    expect(component.find("p[data-node-id=\"linkout-materials-count\"]").text()).
+      toEqual("3/5 are shown in the linkout area");
+    expect(component.find(RelatedMaterialTile)).toHaveLength(pageSize);
+
+    component.unmount();
+  });
+
+  it("items can be reordered, dragged-dropped, disclosed", () => {
+    // add identifiers and relationships so form can render their options for selects as well
+    const component = mount(
+      <MockedProvider mocks={[]}>
+        <IdentifiersAndRelationshipsContext.Provider value={mockIdentifiersAndRelationships}>
+          <RelatedMaterialsTileList
+            fieldSettings={fieldSettings}
+            materials={materials}
+            onEdit={onEdit}
+            onRemove={onRemove}
+            onReorder={onReorder}
+          />
+        </IdentifiersAndRelationshipsContext.Provider>
+      </MockedProvider>
+    );
+
+    act(() => {
+      window.IntersectionObserversInterface.invokeAll({ isIntersecting: true });
+    });
+
+    component.update();
+
+    act(() => {
+      const reorderUpButtons = component.find("button[data-control-id=\"tile-reorder-increment\"]");
+      const reorderDownButtons = component.find("button[data-control-id=\"tile-reorder-decrement\"]");
+
+      // does not trigger ( is first item )
+      reorderUpButtons.at(0).simulate("click");
+      // does not trigger ( is last item )
+      // eslint-disable-next-line no-magic-numbers
+      reorderDownButtons.at(19).simulate("click");
+
+      reorderDownButtons.at(1).simulate("click");
+      reorderUpButtons.at(1).simulate("click");
+
+      // disclose an entry
+      component.find("div[data-control-id=\"tile-disclose-toggle\"]").at(0).simulate("click");
+      // close disclosure
+      component.find("div[data-control-id=\"tile-disclose-toggle\"]").at(0).simulate("click");
+
+      const dragTile = component.find("div[data-material-tile-id=\"tile-material-3\"]");
+      const dropTile = component.find("div[data-material-tile-id=\"tile-material-6\"]");
+
+      dragTile.props().onDragStart();
+      dragTile.props().onDragOver({ preventDefault: jest.fn() });
+      dropTile.props().onDrop();
+    });
+
+    component.update();
+
+    expect(onReorder).toHaveBeenCalledTimes(3);
+    expect(onReorder).toHaveBeenCalledWith("material-1", 2);
+    expect(onReorder).toHaveBeenCalledWith("material-1", 0);
+    expect(onReorder).toHaveBeenCalledWith("material-3", 6);
+
+    component.unmount();
+  });
+
+  it("items cannot be reordered if any are disclosed", () => {
+    const component = mount(
+      <MockedProvider mocks={[]}>
+        <RelatedMaterialsTileList
+          fieldSettings={fieldSettings}
+          materials={materials}
+          onEdit={onEdit}
+          onRemove={onRemove}
+          onReorder={onReorder}
+        />
+      </MockedProvider>
+    );
+
+    act(() => {
+      component.find("div[data-control-id=\"tile-disclose-toggle\"]").at(0).simulate("click");
+    });
+
+    component.update();
+
+    const noneDraggable = component.find(RelatedMaterialTile).
+      everyWhere((tile) => tile.props().draggable === false);
+
+    expect(noneDraggable).toEqual(true);
+
+    act(() => {
+      component.find("button[data-control-id=\"tile-reorder-increment\"]").at(1).simulate("click");
+      component.find("button[data-control-id=\"tile-reorder-decrement\"]").at(1).simulate("click");
+    });
+
+    component.update();
+
+    expect(onReorder).not.toHaveBeenCalled();
+
+    component.unmount();
+  });
+
+  it("items can be removed or edited", () => {
+    const component = mount(
+      <MockedProvider mocks={[]}>
+        <RelatedMaterialsTileList
+          fieldSettings={fieldSettings}
+          materials={materials}
+          onEdit={onEdit}
+          onRemove={onRemove}
+          onReorder={onReorder}
+        />
+      </MockedProvider>
+    );
+
+    component.update();
+
+    act(() => {
+      const tiles = component.find(RelatedMaterialTile);
+
+      tiles.at(0).props().
+        onRemove();
+      tiles.at(0).props().
+        onEdit();
+    });
+
+    component.update();
+
+    component.update();
+
+    expect(onRemove).toHaveBeenCalled();
+    expect(onEdit).toHaveBeenCalled();
+
+    component.unmount();
+  });
+
+  it("items pagination works correctly", () => {
+    const component = mount(
+      <MockedProvider mocks={[]}>
+        <RelatedMaterialsTileList
+          fieldSettings={fieldSettings}
+          materials={materials}
+          onEdit={onEdit}
+          onRemove={onRemove}
+          onReorder={onReorder}
+        />
+      </MockedProvider>
+    );
+
+    component.update();
+
+    expect(component.find("li")).toHaveLength(pageSize);
+
+    act(() => {
+      window.IntersectionObserversInterface.invokeAll({ isIntersecting: true });
+    });
+
+    component.update();
+
+    // eslint-disable-next-line no-magic-numbers
+    expect(component.find("li")).toHaveLength(numberOfMaterials);
+  });
+});
+
+
+describe("<RelatedMaterialTile />", () => {
+  const material = {
+    "id": "material-1",
+    "title": "10.1044/related-materials",
+    "identifier": "10.1044/related-materials",
+    "relationshipType": "IsCitedBy",
+    "identifierType": "DOI",
+    "linkout": false,
+  };
+
+  const onEdit = jest.fn();
+  const onRemove = jest.fn();
+  const onReorder = jest.fn();
+  const onDisclosed = jest.fn();
+  const handleDrag = jest.fn();
+  const handleDrop = jest.fn();
+
+  const defaultProps = {
+    onEdit,
+    onRemove,
+    onReorder,
+    onDisclosed,
+    handleDrag,
+    handleDrop,
+    fieldSettings,
+    isFirst: false,
+    isLast: false,
+    draggable: true,
+  };
+
+  it("renders a disclose-able, editable material tile", async() => {
+    const component = mount(
+      <RelatedMaterialTile
+        {...defaultProps}
+        material={material}
+      />
+    );
+
+    expect(component.find("div[data-material-tile-id=\"tile-material-1\"]")).toHaveLength(1);
+
+    act(() => {
+      // open disclosure
+      component.find("div[data-control-id=\"tile-disclose-toggle\"]").at(0).simulate("click");
+    });
+
+    component.update();
+
+    expect(component.find("div[data-id=\"material-form-fields\"]")).toHaveLength(1);
+
+    act(() => {
+      // edit the material identifier
+      component.find("input[id=\"related-materials-form-material-1-field-identifier\"]").
+        simulate("change", { target: { name: "identifier", value: "new-identifier" } });
+      component.find("input[id=\"related-materials-form-material-1-field-title\"]").
+        simulate("change", { target: { name: "title", value: "" } });
+    });
+
+    await wait(() => {
+      component.update();
+    });
+
+
+    const form = component.find("form[data-form-id=\"related-materials-form-material-1\"]");
+    expect(form.props()["data-form-changed"]).toEqual(true);
+
+    act(() => {
+      form.props().onSubmit({ preventDefault: jest.fn() });
+    });
+
+    await wait(() => {
+      component.update();
+    });
+
+    act(() => {
+      form.props().onReset({ preventDefault: jest.fn() });
+    });
+
+    await wait(() => {
+      component.update();
+    });
+
+
+    component.update();
+
+    const content = component.find("div[data-node-id=\"disclosed-content\"]");
+
+    expect(content).toHaveLength(1);
+
+    expect(onEdit).toHaveBeenCalledWith({
+      id: "material-1",
+      identifier: "new-identifier",
+      identifierType: "DOI",
+      linkout: false,
+      relationshipType: "IsCitedBy",
+      title: "",
+    }, undefined);
+    expect(onRemove).toHaveBeenCalledWith("material-1");
+
+    component.unmount();
+  });
+
+  it("a material editor can be closed if there are unsaved or uncleared form changes", async() => {
+    const component = mount(
+      <RelatedMaterialTile
+        {...defaultProps}
+        material={material}
+      />
+    );
+
+    expect(component.find("div[data-material-tile-id=\"tile-material-1\"]")).toHaveLength(1);
+
+    act(() => {
+      // open disclosure
+      component.find("div[data-control-id=\"tile-disclose-toggle\"]").at(0).simulate("click");
+    });
+
+    component.update();
+
+    expect(component.find("div[data-id=\"material-form-fields\"]")).toHaveLength(1);
+
+    act(() => {
+      // edit the material identifier
+      component.find("input[id=\"related-materials-form-material-1-field-identifier\"]").
+        simulate("change", { target: { name: "identifier", value: "new-identifier" } });
+      component.find("input[id=\"related-materials-form-material-1-field-title\"]").
+        simulate("change", { target: { name: "title", value: "" } });
+    });
+
+    // Mock query selector so we can return a form element with changed attribute.
+    // this is because query selector on body returns null here.
+    const querySelectorSpy = jest.spyOn(document.body, "querySelector");
+
+    querySelectorSpy.mockImplementation(() => {
+      return { getAttribute: () => "true" };
+    });
+
+    await wait(() => {
+      component.update();
+    });
+
+
+    const form = component.find("form[data-form-id=\"related-materials-form-material-1\"]");
+    expect(form.props()["data-form-changed"]).toEqual(true);
+
+    act(() => {
+      // close material
+      component.find("div[data-control-id=\"tile-disclose-toggle\"]").at(0).simulate("click");
+    });
+
+    await wait(() => {
+      component.update();
+    });
+
+    querySelectorSpy.mockRestore();
+
+    await wait(() => {
+      component.update();
+    });
+
+    expect(component.find("button[data-id=\"clear-material-material-1-editor-button\"]")).toHaveLength(0);
+
+    component.unmount();
+  });
+
+  it("cannot submit an edit that has validation errors", async() => {
+    const component = mount(
+      <RelatedMaterialTile
+        {...defaultProps}
+        material={material}
+      />
+    );
+
+    onEdit.mockClear();
+
+    expect(component.find("div[data-material-tile-id=\"tile-material-1\"]")).toHaveLength(1);
+
+    act(() => {
+      // open disclosure
+      component.find("div[data-control-id=\"tile-disclose-toggle\"]").at(0).simulate("click");
+    });
+
+    component.update();
+
+    expect(component.find("div[data-id=\"material-form-fields\"]")).toHaveLength(1);
+
+    act(() => {
+      const length = 1000;
+      const longText = new Array(length).fill("char").join("");
+      // edit the material identifier
+      component.find("input[id=\"related-materials-form-material-1-field-identifier\"]").
+        simulate("change", { target: { name: "identifier", value: "" } });
+      component.find("input[id=\"related-materials-form-material-1-field-title\"]").
+        simulate("change", { target: { name: "title", value: longText } });
+    });
+
+    await wait(() => {
+      component.update();
+    });
+
+
+    const form = component.find("form[data-form-id=\"related-materials-form-material-1\"]");
+    expect(form.props()["data-form-changed"]).toEqual(true);
+
+    act(() => {
+      form.props().onSubmit({ preventDefault: jest.fn() });
+    });
+
+    await wait(() => {
+      component.update();
+    });
+
+    await wait(() => {
+      component.update();
+    });
+
+    expect(onEdit).not.toHaveBeenCalledWith({
+      id: "material-1",
+      identifier: "new-identifier",
+      identifierType: "DOI",
+      linkout: false,
+      relationshipType: "IsCitedBy",
+      title: "",
+    }, undefined);
+
+    component.unmount();
+  });
+});
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialTile.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialTile.jsx
new file mode 100644
index 000000000..942907e4c
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialTile.jsx
@@ -0,0 +1,234 @@
+import React, { useRef, useState, useCallback, useEffect } from "react";
+import { any, bool, func, number } from "prop-types";
+import classnames from "classnames";
+import { Disclosure } from "@figshare/components/ui/disclosure";
+import { IconButton } from "@figshare/fcl/button";
+import ChevronUp from "@figshare/fcl/icons/chevron/up/small";
+import ChevronDown from "@figshare/fcl/icons/chevron/down/small";
+import DragAndDrop from "@figshare/fcl/icons/dragAndDrop";
+import CaretRight from "@figshare/fcl/icons/caret/right/medium";
+import CaretDown from "@figshare/fcl/icons/caret/down/medium";
+import Papers from "@figshare/fcl/icons/papers";
+import BinIcon from "@figshare/fcl/icons/delete/medium";
+import EditMedium from "@figshare/fcl/icons/edit/medium";
+import { Content, Trigger, UncontrolledTooltip as Tooltip } from "@figshare/components/ui/tooltip";
+import { Forms } from "shared/ui/forms";
+
+import { RelatedMaterialPropType } from "../../constants";
+import { RelatedMaterialsForm } from "../relatedMaterialsForm";
+import { IdentifiersAndRelationshipsContext } from "../identifiersAndRelationships";
+
+import { scrollIntoView } from "./utils";
+import style from "./relatedMaterialsTile.css";
+
+
+export function RelatedMaterialTile(
+  {
+    material,
+    isFirst,
+    isLast,
+    linkoutTotal,
+    fieldSettings,
+    onEdit,
+    onRemove,
+    onReorder,
+    handleDrag,
+    handleDrop,
+    draggable,
+    onDisclosed,
+  }) {
+  const itemRef = useRef(null);
+  const [disclosed, setDisclosed] = useState(false);
+  const [changed, setChanged] = useState(false);
+  const handleMoveUp = useCallback((event) => {
+    event.stopPropagation();
+    onReorder(material.id, "decrement");
+  }, [material, onReorder]);
+
+  const handleMoveDown = useCallback((event) => {
+    event.stopPropagation();
+    onReorder(material.id, "increment");
+  }, [material, onReorder]);
+
+  const toggleDisclosure = useCallback((newToggleState) => {
+    const used = newToggleState;
+    const current = !newToggleState;
+
+    if (newToggleState) {
+      scrollIntoView(itemRef.current);
+    }
+
+    if (used !== current) {
+      setDisclosed(used);
+      onDisclosed(material.id, used);
+    }
+  }, [material.id, itemRef, setDisclosed, onDisclosed]);
+
+  const removeMaterial = useCallback(() =>
+    onRemove(material.id), [onRemove]);
+  const submitMaterialEdit = useCallback((newMaterial, oldMaterial) =>
+    onEdit(newMaterial, oldMaterial), [onEdit]);
+  const handleDragOver = useCallback((e) => e.preventDefault(), []);
+  const handleDragStart = useCallback(() => handleDrag(material.id), [handleDrag, material.id]);
+  const handleDragDrop = useCallback(() => handleDrop(material.id), [handleDrop, material.id]);
+
+
+  useEffect(() => {
+    const onFormMessage = (message) => {
+      setChanged(message?.changed);
+    };
+    Forms.subscribe(`related-materials-form-${material.id}`, onFormMessage);
+
+    return () => {
+      Forms.unsubscribe(`related-materials-form-${material.id}`, onFormMessage);
+    };
+  }, [material.id, setChanged]);
+
+  return (
+    <div
+      ref={itemRef}
+      className={style.itemWrapper}
+      data-editing-material={disclosed}
+      data-material-tile-id={`tile-${material.id}`}
+      data-material-tile-linked={material.linkout}
+      data-tile-changes={changed}
+      draggable={draggable}
+      role="presentation"
+      onDragOver={handleDragOver}
+      onDragStart={handleDragStart}
+      onDrop={handleDragDrop}
+    >
+      <Disclosure visible={disclosed} onToggle={toggleDisclosure}>
+        <div className={style.itemContainer}>
+          <div className={style.tileIcon}>
+            <IconButton
+              Icon={DragAndDrop}
+              data-control-id="tile-drag-icon"
+              disabled={!draggable || (isFirst && isLast)}
+            />
+          </div>
+          <div className={classnames([style.iconWrapper, style.tileIcon])}>
+            <IconButton
+              Icon={ChevronUp}
+              data-control-id="tile-reorder-increment"
+              disabled={!draggable || isFirst}
+              onClick={handleMoveUp}
+            />
+            <IconButton
+              Icon={ChevronDown}
+              data-control-id="tile-reorder-decrement"
+              disabled={!draggable || isLast}
+              onClick={handleMoveDown}
+            />
+          </div>
+          <Disclosure.Toggle>
+            {({ visible, ...buttonProps }) => {
+              const Icon = disclosed ? CaretDown : CaretRight;
+
+              return (
+                <>
+                  <div
+                    {...buttonProps}
+                    className={style.textWrapper}
+                    data-control-id="tile-disclose-toggle"
+                    role="presentation"
+                  >
+                    {material.linkout &&
+                    <Tooltip>
+                      {() => (
+                        <>
+                          <Trigger>
+                            {({ ...props }) => <div {...props} className={style.papers}><Papers /></div>}
+                          </Trigger>
+                          <Content className={style.tooltipContent} placement={"bottom"}>
+                            {({ ...props }) => <span {...props}>{"Item is shown in the linkout area"}</span>}
+                          </Content>
+                        </>
+                      )}
+                    </Tooltip>
+                    }
+                    <p className={style.identifier}>
+                      {material.title || material.identifier}
+                    </p>
+                  </div>
+                  {changed &&
+                    <Tooltip>
+                      {() => (
+                        <>
+                          <Trigger>
+                            {({ ...props }) =>
+                              (
+                                <div className={style.tileIcon}>
+                                  <div {...props} className={style.editIcon}>
+                                    <EditMedium />
+                                  </div>
+                                </div>)}
+                          </Trigger>
+                          <Content className={style.tooltipContent} placement={"bottom"}>
+                            {({ ...props }) => <span {...props}>{"Unsaved changes"}</span>}
+                          </Content>
+                        </>
+                      )}
+                    </Tooltip>}
+                  <div {...buttonProps} className={classnames([style.caret, style.tileIcon])}>
+                    <IconButton
+                      Icon={Icon}
+                      tooltip="test"
+                    />
+                  </div>
+                </>
+              );
+            }}
+          </Disclosure.Toggle>
+        </div>
+        <Disclosure.Content>
+          {({ visible, ...contentProps }) => {
+            if (!visible) {
+              return null;
+            }
+
+            return (<div data-node-id="disclosed-content" {...contentProps}>
+              <IdentifiersAndRelationshipsContext.Consumer>
+                {(resources) => (
+                  <RelatedMaterialsForm
+                    linkoutTotal={linkoutTotal}
+                    material={material}
+                    persist={true}
+                    resources={resources}
+                    settings={fieldSettings}
+                    onClear={removeMaterial}
+                    onClearLabel={<span>
+                      <span className={style.removeIcon}>
+                        <BinIcon />
+                      </span>
+                      {" "}Remove</span>}
+                    onSave={submitMaterialEdit}
+                    onSaveLabel="Save Changes"
+                  />
+                )}
+              </IdentifiersAndRelationshipsContext.Consumer>
+            </div>
+            );
+          }}
+        </Disclosure.Content>
+      </Disclosure>
+    </div>
+  );
+}
+
+RelatedMaterialTile.propTypes = {
+  draggable: bool.isRequired,
+  fieldSettings: any.isRequired,
+  handleDrag: func.isRequired,
+  handleDrop: func.isRequired,
+  isFirst: bool.isRequired,
+  isLast: bool.isRequired,
+  linkoutTotal: number.isRequired,
+  material: RelatedMaterialPropType.isRequired,
+  onDisclosed: func.isRequired,
+  onEdit: func.isRequired,
+  onRemove: func.isRequired,
+  onReorder: func.isRequired,
+};
+
+RelatedMaterialTile.defaultProps = { linkoutTotal: 0 };
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialsTile.css b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialsTile.css
new file mode 100644
index 000000000..65b2c1ee0
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialsTile.css
@@ -0,0 +1,118 @@
+.itemWrapper {
+  display: flex;
+  overflow: hidden;
+  flex-direction: column;
+
+  padding: calc(2 * var(--gridSize)) calc(3 * var(--gridSize));
+
+  border: 1px solid var(--color-border-primary);
+  border-radius: var(--gridSize);
+  gap: calc(5 * var(--gridSize));
+}
+
+/* Dropdowns should not clip inside the editor if it is disclosed */
+.itemWrapper[data-editing-material="true"] {
+  overflow: visible;
+}
+
+.itemContainer {
+  display: flex;
+  align-items: center;
+}
+
+.caret {
+  display: flex;
+
+  margin-left: auto;
+}
+
+.papers {
+  display: flex;
+
+  height: calc(4 * var(--gridSize));
+  margin-left: 10px;
+}
+
+.papers > svg {
+  fill: var(--color-typography-secondary);
+}
+
+.tileIcon {
+  display: flex;
+}
+
+.tileIcon > button {
+  fill: var(--color-icon-secondary);
+}
+
+.tileIcon svg {
+  fill: var(--color-icon-secondary);
+}
+
+.identifier {
+  overflow: hidden;
+
+  margin: 0 calc(2 * var(--gridSize));
+
+  white-space: nowrap;
+
+  text-overflow: ellipsis;
+}
+
+.textWrapper {
+  display: flex;
+  align-items: center;
+
+  overflow: hidden;
+
+  width: 100%;
+}
+
+.removeIcon {
+  position: relative;
+
+  display: flex;
+
+  width: var(--typography-M-fontSize);
+  height: var(--typography-M-fontSize);
+  fill: inherit;
+  justify-content: center;
+  align-items: center;
+}
+
+.removeIcon > svg {
+  width: 100%;
+  fill: inherit;
+
+  /** svg view box tweaks to fill 1x2 ratio in 16px w/h */
+  height: 180%;
+  margin-left: 1px;
+}
+
+.tooltipContent {
+  margin-top: var(--gridSize) !important;
+
+  padding: var(--gridSize) calc(2 * var(--gridSize));
+}
+
+.editIcon {
+  display: inline-flex;
+
+  width: calc(6 * var(--gridSize));
+
+  height: calc(6 * var(--gridSize));
+  justify-content: center;
+}
+
+@media (max-width: 953px) {
+  /* stylelint-disable-next-line a11y/no-display-none */
+  .iconWrapper {
+    display: none;
+  }
+}
+
+@media (max-width: 1023px) {
+  .itemWrapper {
+    padding: var(--gridSize);
+  }
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialsTileList.css b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialsTileList.css
new file mode 100644
index 000000000..d56d1d52f
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialsTileList.css
@@ -0,0 +1,31 @@
+.list {
+  display: grid;
+  grid-template-columns: max-content minmax(calc(10 * var(--gridSize)), 1fr);
+  grid-gap: calc(2 * var(--gridSize));
+}
+
+.item {
+  position: relative;
+
+  display: contents;
+}
+
+.index {
+  justify-self: end;
+
+  /*
+    Position index number relative to parent grid item height (li)
+    force it to be as high as it's own line-height
+    and move it half the parent distance down.
+    This will ensure the position remains the same
+    even when the item height changes.
+  */
+  position: relative;
+  top: calc((62px - var(--typography-S-lineHeight)) / 2);
+
+  height: var(--typography-S-lineHeight);
+}
+
+.subTitle {
+  margin: 0 0 calc(2 * var(--gridSize)) 0;
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialsTileList.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialsTileList.jsx
new file mode 100644
index 000000000..26025102f
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/relatedMaterialsTileList.jsx
@@ -0,0 +1,137 @@
+import React, { useCallback, useMemo, useRef, useState, useEffect } from "react";
+import { any, func } from "prop-types";
+import getIn from "utils/getIn";
+
+import { RelatedMaterialListPropType, DEFAULT_RELATED_MATERIALS_FIELD_SETTINGS } from "../../constants";
+import { getLinkoutTotal } from "../../utils";
+
+import { RelatedMaterialTile } from "./relatedMaterialTile";
+import style from "./relatedMaterialsTileList.css";
+
+
+const PAGE_SIZE = 10;
+
+export function RelatedMaterialsTileList({ materials, fieldSettings, onEdit, onRemove, onReorder }) {
+  const [disclosed, setDisclosed] = useState([]);
+  const linkoutTotal = useMemo(() => getLinkoutTotal(materials), [materials]);
+  const ref = useRef(null);
+  const [pages, setPages] = useState(PAGE_SIZE);
+  const pagesRef = useRef(pages);
+
+  const shown = useMemo(() => materials.slice(0, pages), [pages, materials]);
+
+  useEffect(() => {
+    pagesRef.current = pages;
+  }, [pages]);
+
+  useEffect(() => {
+    const observer = new IntersectionObserver(([entry]) => {
+      if (entry.isIntersecting && pagesRef.current <= materials.length) {
+        setPages((p) => p + PAGE_SIZE);
+      }
+    }, { threshold: 0.8 });
+
+    observer.observe(ref.current);
+
+    return () => {
+      observer.disconnect();
+    };
+  }, [ref, pagesRef, setPages, materials.length]);
+
+  const maxLinkouts = getIn(fieldSettings, "validation.maxLinkouts",
+    getIn(DEFAULT_RELATED_MATERIALS_FIELD_SETTINGS, "validation.maxLinkouts"));
+  const handleIncrementalMove = useCallback((id, type) => {
+    const index = materials.findIndex((m) => m.id === id);
+
+    if (index === -1) {
+      return;
+    }
+
+    if (type === "increment") {
+      onReorder(id, Math.min(materials.length - 1, index + 1));
+
+      return;
+    }
+
+    if (type === "decrement") {
+      onReorder(id, Math.max(0, index - 1));
+    }
+  }, [materials, onReorder]);
+
+  const draggedRef = useRef(null);
+
+  const handleDropMove = useCallback((id, targetId) => {
+    const index = materials.findIndex((m) => m.id === targetId);
+
+    onReorder(id, index);
+  }, [materials, onReorder]);
+
+  const handleDrop = useCallback((targetId) => {
+    handleDropMove(draggedRef.current, targetId);
+    draggedRef.current = null;
+  }, [draggedRef, handleDropMove]);
+
+  const handleDrag = useCallback((id) => {
+    draggedRef.current = id;
+  }, [draggedRef]);
+
+  const handleDisclose = useCallback((id, isDisclosed) => {
+    setDisclosed((prevDisclosed) => {
+      const copyPrev = prevDisclosed.slice();
+
+      if (isDisclosed && !copyPrev.includes(id)) {
+        copyPrev.push(id);
+      } else {
+        const index = copyPrev.indexOf(id);
+        if (index > -1) {
+          copyPrev.splice(index, 1);
+        }
+      }
+
+      return copyPrev;
+    });
+  }, [setDisclosed]);
+
+  const canDrag = useMemo(() => disclosed.length < 1, [disclosed, materials]);
+
+  return (
+    <>
+      <p
+        className={style.subTitle}
+        data-node-id="linkout-materials-count"
+      >
+        {`${linkoutTotal}/${maxLinkouts} are shown in the linkout area`}
+      </p>
+      <ol ref={ref} className={style.list} data-node-id="related-materials-editable-tiles">
+        {shown.map((material, index) => (
+          <li key={material.id} className={style.item}>
+            <span className={style.index}>{`${index + 1}.`}</span>
+            <RelatedMaterialTile
+              draggable={canDrag}
+              fieldSettings={fieldSettings}
+              handleDrag={handleDrag}
+              handleDrop={handleDrop}
+              isFirst={index === 0}
+              isLast={index === materials.length - 1}
+              linkoutTotal={linkoutTotal}
+              material={material}
+              onDisclosed={handleDisclose}
+              onEdit={onEdit}
+              onRemove={onRemove}
+              onReorder={handleIncrementalMove}
+            />
+          </li>
+        ))}
+      </ol>
+    </>);
+}
+
+RelatedMaterialsTileList.propTypes = {
+  fieldSettings: any.isRequired,
+  materials: RelatedMaterialListPropType.isRequired,
+  onEdit: func.isRequired,
+  onRemove: func.isRequired,
+  onReorder: func.isRequired,
+};
+
+RelatedMaterialsTileList.defaultProps = {};
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/utils.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/utils.jsx
new file mode 100644
index 000000000..365abfd45
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsTileList/utils.jsx
@@ -0,0 +1,23 @@
+export function scrollIntoView(node) {
+  const SCROLL_DELAY = 150;
+
+  setTimeout(() => {
+    node?.scrollIntoView?.({ block: "end", inline: "nearest", behavior: "smooth" });
+  }, [SCROLL_DELAY]);
+}
+
+export function tileMaterialIsSavedLinkout(materialId) {
+  const tile = document.body.querySelector(`div[data-material-tile-id="tile-${materialId}"]`);
+
+  const isLinked = tile?.getAttribute?.("data-material-tile-linked");
+
+  // boolean data attribute value (forced to string)
+  // we can safely ignore other values as being false
+  return isLinked === "true";
+}
+
+export function formHasChanges(materialId) {
+  const form = document.body.querySelector(`form[data-form-id="related-materials-form-${materialId}"]`);
+
+  return form?.getAttribute?.("data-form-changed") === "true";
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/constants.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/constants.jsx
new file mode 100644
index 000000000..065ccaf40
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/constants.jsx
@@ -0,0 +1,61 @@
+import { any, shape, string, number, bool, oneOf, oneOfType, arrayOf } from "prop-types";
+
+
+export const ResourceStatus = {
+  idle: "idle",
+  loading: "loading",
+  ready: "ready",
+  error: "error",
+};
+
+export const RelatedMaterialPropType = shape({
+  id: oneOfType([string, number]).isRequired,
+  identifier: string.isRequired,
+  title: string,
+  linkout: bool,
+  identifierType: string,
+  relationshipType: string,
+});
+
+export const RelatedMaterialListPropType = arrayOf(RelatedMaterialPropType);
+
+export const IdentifierPropType = shape({
+  key: string, value: string, meta: shape({
+    name: string,
+    resolver: string,
+    isUrl: bool,
+  }),
+});
+export const RelationshipPropType = shape({
+  key: oneOfType([string, number]), value: string, meta: shape({
+    name: string,
+    readable: string,
+  }),
+});
+export const ResourcesPropType = shape({
+  identifiers: shape({
+    data: arrayOf(IdentifierPropType).isRequired,
+    status: oneOf(Object.values(ResourceStatus)).isRequired,
+    error: any,
+  }),
+  relationships: shape({
+    data: arrayOf(RelationshipPropType).isRequired,
+    status: oneOf(Object.values(ResourceStatus)).isRequired,
+    error: any,
+  }),
+});
+
+export const MAX_RELATED_MATERIALS = 100;
+export const SHOWN_ITEM_LIMIT = 10;
+
+export const DEFAULT_RELATED_MATERIALS_FIELD_SETTINGS = {
+  isRequired: false,
+  validation: {
+    maxIdentifierLength: 2000,
+    maxLinkouts: 3,
+    maxListLength: 100,
+    maxTitleLength: 1000,
+    minIdentifierLength: 1,
+    minTitleLength: 1,
+  },
+};
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.gql b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.gql
new file mode 100644
index 000000000..7f4ecdd6e
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.gql
@@ -0,0 +1,46 @@
+query getRelatedMaterials($relatedMaterialIds: Json!, $articleId: Int!, $articleVersion: Int) {
+  getRelatedMaterials(relatedMaterialIds: $relatedMaterialIds, articleId: $articleId, articleVersion: $articleVersion) {
+      id
+      identifier
+      title
+      relation
+      identifierType
+      isLinkout
+      isUrl
+      resolver
+  }
+}
+
+mutation relatedMaterialCreate($data: Json!) {
+  relatedMaterialCreate(data: $data) {
+      id
+      identifier
+      title
+      relation
+      identifierType
+      isLinkout
+      isUrl
+      resolver
+  }
+}
+
+mutation relatedMaterialUpdate($relatedMaterialId: Int!, $data: Json!) {
+  relatedMaterialUpdate(relatedMaterialId: $relatedMaterialId, data: $data) {
+      id
+      identifier
+      title
+      relation
+      identifierType
+      isLinkout
+      isUrl
+      resolver
+  }
+}
+
+query getRelatedMaterialTypes {
+  getRelatedMaterialTypes 
+}
+
+query getRelatedMaterialRelations {
+  getRelatedMaterialRelations
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.jsx
new file mode 100644
index 000000000..410af81fa
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.jsx
@@ -0,0 +1,9 @@
+import { RelatedMaterials } from "./relatedMaterials";
+
+
+export * from "./constants";
+export * from "./utils";
+
+export * from "./useRelatedMaterials";
+
+export default RelatedMaterials;
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.test.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.test.jsx
new file mode 100644
index 000000000..4208eb062
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.test.jsx
@@ -0,0 +1,354 @@
+import { mount } from "enzyme";
+import React from "react";
+import { act } from "react-dom/test-utils";
+import { MockedProvider, wait } from "utils/apollo/testing";
+import { GraphQLError } from "graphql";
+import { FieldError } from "@figshare/fcl/fieldError";
+
+import { getRelatedMaterials, getRelatedMaterialTypes, getRelatedMaterialRelations } from "./index.gql";
+import { RelatedMaterialsList } from "./components/relatedMaterialsList";
+import { ManageRelatedMaterials } from "./components/manageRelatedMaterials";
+import RelatedMaterials, {
+  isLinkout, parseReferencesFieldError,
+  RemapMaterial, returnFocus, resolveIdentifier, delayAction,
+} from "./index";
+
+
+describe("<RelatedMaterials />", () => {
+  const fieldSettings = {
+    "defaultValue": [],
+    "isMultiple": true,
+    "label": "References",
+    "placeholder": "Add a URL that links to references or related content ",
+    "options": null,
+    "isRequired": false,
+    "description": null,
+    "validation": {
+      "maxListLength": 100,
+      "maxLinkouts": 5,
+      "minTitleLength": 1,
+      "maxTitleLength": 1000,
+      "minIdentifierLength": 1,
+      "maxIdentifierLength": 2000,
+    },
+  };
+
+  const onChangeField = jest.fn();
+
+  const defaultProps = {
+    id: "references",
+    value: [],
+    error: undefined,
+    isRequired: true,
+    disabled: false,
+    settings: fieldSettings,
+    onChange: onChangeField,
+  };
+
+  beforeEach(() => {
+    jest.clearAllMocks();
+  });
+
+  const getRelatedMaterialsEmptyMock = [{
+    request: { query: getRelatedMaterials, variables: [] },
+    result: { data: { getRelatedMaterials: [] } },
+  }];
+
+  const getRelatedMaterialsDataMock = [{
+    request: { query: getRelatedMaterials, variables: { relatedMaterialIds: [1, 2, 3] } },
+    result: {
+      data: {
+        getRelatedMaterials: [
+          {
+            id: 1,
+            identifier: "identifier-one",
+            title: "identifier-one-title",
+            relation: "IsMetadataFor",
+            identifierType: "UPC",
+            isLinkout: true,
+            isUrl: false,
+            resolver: "urn:upc:",
+          },
+          {
+            id: 2,
+            identifier: "identifier-two",
+            title: "",
+            relation: "IsCitedBy",
+            identifierType: "DOI",
+            isLinkout: false,
+            isUrl: true,
+            resolver: "https://doi.org/",
+          },
+
+          {
+            id: 3,
+            identifier: "identifier-three",
+            title: "identifier-one-title",
+            relation: "References",
+            identifierType: "DOI",
+            isLinkout: false,
+            isUrl: true,
+            resolver: "https://doi.org/",
+          },
+        ],
+      },
+    },
+  }];
+
+  const getRelatedMaterialsFailsMock = [{
+    request: { query: getRelatedMaterials, variables: [] },
+    result: { errors: [new GraphQLError("Could not to retrieve data!")] },
+  }];
+
+  const getIdentifierAndRelationshipsMocks = [{
+    request: { query: getRelatedMaterialTypes },
+    result: {
+      data: {
+        getRelatedMaterialTypes: [
+          { name: "DOI", resolver: "https://doi.org/", isUrl: true },
+        ],
+      },
+    },
+  },
+  {
+    request: { query: getRelatedMaterialRelations },
+    result: {
+      data: {
+        getRelatedMaterialRelations: [
+          "IsCitedBy", "Cites",
+        ],
+      },
+    },
+  }];
+
+  it("renders the field entry, with label and manager toggle, and empty list message if value is empty", async() => {
+    const component = mount(
+      <MockedProvider mocks={[...getRelatedMaterialsEmptyMock, ...getIdentifierAndRelationshipsMocks]}>
+        <RelatedMaterials
+          {...defaultProps}
+          className="custom-field-class"
+        />
+      </MockedProvider>
+    );
+
+    await wait(() => component.update());
+
+    expect(component.find("div[id=\"references\"]")).toHaveLength(1);
+    expect(component.find("div.custom-field-class")).toHaveLength(1);
+    expect(component.find("span[data-id=\"related-materials-empty\"]")).toHaveLength(1);
+    expect(component.find(RelatedMaterialsList)).toHaveLength(0);
+
+    act(() => {
+      component.find("button[data-control-id=\"manage-related-materials\"]").simulate("click");
+    });
+
+    await wait(() => component.update());
+
+    expect(component.find("section[data-control-id=\"materials-add-section\"]")).toHaveLength(1);
+    expect(component.find("section[data-control-id=\"materials-tile-list-section\"]")).toHaveLength(1);
+
+    act(() => {
+      component.find("button[data-control-id=\"manage-related-materials\"]").simulate("click");
+    });
+
+    await wait(() => component.update());
+
+    component.unmount();
+
+    expect(component.find("section[data-control-id=\"materials-add-section\"]")).toHaveLength(0);
+    expect(component.find("section[data-control-id=\"materials-tile-list-section\"]")).toHaveLength(0);
+  });
+
+  it("failure to query getRelatedMaterials returns no materials, renders any given field error", async() => {
+    const component = mount(
+      <MockedProvider mocks={[...getRelatedMaterialsFailsMock]}>
+        <RelatedMaterials
+          {...defaultProps}
+          error={"Field validation error"}
+        />
+      </MockedProvider>
+    );
+
+    await wait(() => component.update());
+
+    component.update();
+
+    expect(component.find("span[data-id=\"related-materials-empty\"]")).toHaveLength(1);
+    expect(component.find(RelatedMaterialsList)).toHaveLength(0);
+    expect(component.find(FieldError)).toHaveLength(1);
+
+    component.unmount();
+  });
+
+  it("renders materials list for given field value after querying materials", async() => {
+    const component = mount(
+      <MockedProvider mocks={[...getRelatedMaterialsDataMock]}>
+        <RelatedMaterials
+          {...defaultProps}
+          value={[1, 2, 3]}
+        />
+      </MockedProvider>
+    );
+
+    await wait(() => component.update());
+
+    expect(component.find("span[data-id=\"related-materials-empty\"]")).toHaveLength(0);
+    expect(component.find(RelatedMaterialsList)).toHaveLength(1);
+
+    component.unmount();
+  });
+
+  it("all submitted field changes from the manager are handled through one onMaterialsChange callback", async() => {
+    const component = mount(
+      <MockedProvider mocks={[...getRelatedMaterialsDataMock, ...getIdentifierAndRelationshipsMocks]}>
+        <RelatedMaterials
+          {...defaultProps}
+          value={[1, 2, 3]}
+        />
+      </MockedProvider>
+    );
+
+    await wait(() => component.update());
+
+    expect(component.find("span[data-id=\"related-materials-empty\"]")).toHaveLength(0);
+    expect(component.find(RelatedMaterialsList)).toHaveLength(1);
+
+
+    act(() => {
+      // open the manager
+      component.find("button[data-control-id=\"manage-related-materials\"]").simulate("click");
+    });
+
+    await wait(() => component.update());
+
+    act(() => {
+      // simulate an edit request
+      component.find(ManageRelatedMaterials).props().onMaterialsChange([], "edit");
+
+      // interact with the manager - submit the material changes
+      component.find("button[data-control-id=\"manage-materials-submit\"]").simulate("click");
+    });
+
+    await wait(() => component.update());
+
+    expect(onChangeField).toHaveBeenCalledTimes(2);
+    // submission on mock edit
+    expect(onChangeField).toHaveBeenCalledWith({ "value": [] });
+    // submission on done/reoder
+    expect(onChangeField).toHaveBeenCalledWith({ "value": [1, 2, 3] });
+
+    component.unmount();
+  });
+});
+
+describe("utils", () => {
+  it("isLinkout() returns wether a material (typed) is linked out or not", () => {
+    expect(isLinkout({ linkout: true })).toEqual(true);
+    expect(isLinkout({ linkout: false })).toEqual(false);
+    expect(isLinkout({ isLinkout: false })).toEqual(false);
+  });
+
+  it("parseReferencesFieldError() returns a field error object from a item edit field error property", () => {
+    expect(parseReferencesFieldError(undefined)).toEqual(undefined);
+    expect(parseReferencesFieldError("message", "field-id")).toEqual({
+      "at": "save",
+      "id": "field-id",
+      message: "message",
+    });
+    expect(parseReferencesFieldError(["message"])).toEqual({
+      "at": "save",
+      "id": undefined,
+      message: "message",
+    });
+  });
+
+  it("RemapMaterial supports remapping from various forms to typed material or back", () => {
+    const TypeMaterial = {
+      id: 81,
+      identifier: "222-113",
+      title: "Some bar code or something",
+      relationshipType: "IsMetadataFor",
+      identifierType: "UPC",
+      linkout: true,
+      isUrl: false,
+      resolver: "urn:upc:",
+    };
+    const QueryMaterial = {
+      id: 81,
+      identifier: "222-113",
+      title: "Some bar code or something",
+      relation: "IsMetadataFor",
+      identifierType: "UPC",
+      isLinkout: true,
+      isUrl: false,
+      resolver: "urn:upc:",
+    };
+    const MutationMaterial = {
+      id: 81,
+      identifier: "222-113",
+      title: "Some bar code or something",
+      relation: "IsMetadataFor",
+      "identifier_type": "UPC",
+      "is_linkout": true,
+      "is_url": false,
+      resolver: "urn:upc:",
+    };
+
+    expect(RemapMaterial.queryToType(QueryMaterial)).toEqual(TypeMaterial);
+    expect(RemapMaterial.typeToQuery(TypeMaterial)).toEqual(QueryMaterial);
+    expect(RemapMaterial.mutationToType(MutationMaterial)).toEqual(TypeMaterial);
+    expect(RemapMaterial.typeToMutation(TypeMaterial)).toEqual(MutationMaterial);
+  });
+
+  it("returnFocus() focuses on a node found through a given selector after a short while", async() => {
+    const querySelectorSpy = jest.spyOn(document.body, "querySelector");
+    const focusSpy = jest.fn();
+
+    returnFocus("tag.class#whatever[selector]");
+
+
+    expect(focusSpy).not.toHaveBeenCalled();
+
+    querySelectorSpy.mockImplementation(() => {
+      return { focus: focusSpy };
+    });
+
+    const delay = 500;
+
+    returnFocus("tag.class#whatever[selector]", delay - 100);
+
+    const waited = await new Promise((resolve) => {
+      setTimeout(() => {
+        resolve(true);
+      }, delay);
+    });
+
+    querySelectorSpy.mockRestore();
+
+    expect(waited).toEqual(true);
+    expect(focusSpy).toHaveBeenCalledTimes(1);
+  });
+
+  it("resolveIdentifier() prefixes a resolver to an identifier if needed", () => {
+    expect(resolveIdentifier("identifier", undefined, "resolver/")).toEqual("resolver/identifier");
+    expect(resolveIdentifier("resolver/identifier", undefined, "resolver/")).toEqual("resolver/identifier");
+  });
+
+  it("delayAction() delays calling an action by a certain amount of time", async() => {
+    const defaultDelayCb = jest.fn(() => 1);
+    const longDelayCb = jest.fn(() => 2);
+    const longerDelay = 500;
+
+    const result = delayAction(defaultDelayCb);
+    expect(result instanceof Promise).toBe(true);
+
+    const awaitedResult = await delayAction(defaultDelayCb);
+    expect(awaitedResult).toBe(1);
+
+    const longerDelayResult = delayAction(longDelayCb, longerDelay);
+    expect(longerDelayResult instanceof Promise).toBe(true);
+
+    const awaitedLongerResult = await delayAction(longDelayCb, longerDelay);
+    expect(awaitedLongerResult).toBe(2);
+  });
+});
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/relatedMaterials.css b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/relatedMaterials.css
new file mode 100644
index 000000000..ddb76d2ad
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/relatedMaterials.css
@@ -0,0 +1,12 @@
+.relatedMaterials {
+  position: relative;
+
+  display: flex;
+  flex-direction: column;
+  justify-content: flex-start;
+  align-items: flex-start;
+}
+
+.fieldLabel {
+  width: 100%;
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/relatedMaterials.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/relatedMaterials.jsx
new file mode 100644
index 000000000..dee82d41f
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/relatedMaterials.jsx
@@ -0,0 +1,120 @@
+import React, { useCallback, useContext, useMemo, useRef, useEffect } from "react";
+import PropTypes from "prop-types";
+import classnames from "classnames";
+import Registry from "utils/registry";
+import { FieldError } from "@figshare/fcl/fieldError";
+
+import Label from "../../genericFields/textField/components/label";
+import { ItemContext } from "../../../../../context/itemContext";
+
+import { RelatedMaterialsList } from "./components/relatedMaterialsList";
+import { ManageRelatedMaterials } from "./components/manageRelatedMaterials";
+import styles from "./relatedMaterials.css";
+import { parseReferencesFieldError } from "./utils";
+import { useRelatedMaterials } from "./useRelatedMaterials";
+import {
+  IdentifiersAndRelationshipsContext,
+  IdentifiersAndRelationshipsProvider,
+} from "./components/identifiersAndRelationships";
+
+
+export function RelatedMaterials({ className, disabled, id, value, error, isRequired, settings, onChange }) {
+  const { item } = useContext(ItemContext);
+  /**
+   * value - the initial id's should be memoised before making the getRelatedMaterials query.
+   * as the ids list is validated against the item state (version + id).
+   */
+  const savedIds = useMemo(() => value, [item.id, item.version]);
+  const { materials, setMaterials } = useRelatedMaterials(
+    { value: savedIds, version: item?.version, id: item?.id },
+    { sort: true, remap: true }
+  );
+  const empty = !materials?.length;
+  const fieldError = useMemo(() => parseReferencesFieldError(error, id), [error]);
+  const fieldSettings = useMemo(() => settings, [JSON.stringify(settings)]);
+
+  /** Hold a reference in a global registry
+   * so the edited related materials can be accessed as needed
+   * inside the item-edit page
+   **/
+  const materialsRef = useRef(materials);
+
+  useEffect(() => {
+    Registry.set("item-edit/related-materials", materialsRef);
+
+    return () => {
+      Registry.delete("item-edit/related-materials");
+    };
+  }, [materialsRef]);
+
+  useEffect(() => {
+    materialsRef.current = materials;
+  }, [materialsRef, materials]);
+
+  const onMaterialsChange = useCallback((newMaterials) => {
+    const fieldChanges = { value: newMaterials.map((material) => material.id), error: undefined };
+
+    /**
+     * NOTE: We have 2 material lists.
+     * One that is being listed:
+     * > the one above that gets queried with getRelatedMaterials and `value` (ids)
+     * One that is being managed:
+     * > the one inside ManageRelatedMaterials (useManageRelatedMaterials)
+     *
+     * While editing, we can modify a material, but the `valueSeries` (ids) won't change
+     * so we do not necessarily need to re-query
+     * We can do a `query.refetch()` but just replacing the lists would be faster for edits.
+     */
+    setMaterials(newMaterials);
+
+    onChange(fieldChanges);
+  }, [id, onChange, setMaterials]);
+
+  return (<div className={classnames(styles.relatedMaterials, className)} id={id}>
+    <Label className={styles.fieldLabel} htmlFor={id} isRequired={isRequired} title="Related Materials">
+      Add identifiers or links to any relevant content or external sources that help describe the research.
+    </Label>
+    {empty &&
+      <span data-id="related-materials-empty">
+        No related materials.
+      </span>
+    }
+    <IdentifiersAndRelationshipsProvider>
+      <ManageRelatedMaterials
+        disabled={disabled}
+        materials={materials}
+        settings={fieldSettings}
+        onMaterialsChange={onMaterialsChange}
+      />
+      {!empty && (
+        <IdentifiersAndRelationshipsContext.Consumer>
+          {({ identifiers, relationships }) => (
+            <RelatedMaterialsList
+              identifiers={identifiers.data}
+              materials={materials}
+              relationships={relationships.data}
+            />)}
+        </IdentifiersAndRelationshipsContext.Consumer>
+      )}
+    </IdentifiersAndRelationshipsProvider>
+    <FieldError error={fieldError} field={id} size="large" />
+  </div>);
+}
+
+RelatedMaterials.propTypes = {
+  id: PropTypes.string.isRequired,
+  isRequired: PropTypes.bool.isRequired,
+  settings: PropTypes.object.isRequired,
+  onChange: PropTypes.func.isRequired,
+  className: PropTypes.string,
+  disabled: PropTypes.bool,
+  error: PropTypes.any,
+  value: PropTypes.array,
+};
+
+RelatedMaterials.defaultProps = {
+  className: undefined,
+  disabled: false,
+  error: undefined,
+  value: [],
+};
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/useRelatedMaterials.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/useRelatedMaterials.jsx
new file mode 100644
index 000000000..b6505e9ac
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/useRelatedMaterials.jsx
@@ -0,0 +1,56 @@
+import { useState, useEffect, useMemo, useRef } from "react";
+import { useQuery } from "@apollo/react-hooks";
+import getIn from "utils/getIn";
+import compact from "utils/compact";
+
+import { getRelatedMaterials } from "./index.gql";
+import { RemapMaterial } from "./utils";
+
+/**
+ * Queries `getRelatedMaterials` and returns the result in a state hook and the query itself.
+ * @param properties - { value: string | number[], id?: string | number, version?: string | number }
+ * @param  options { sort : true, remap: true }
+ * @returns \{ materials, setMaterials, query \}
+ */
+export function useRelatedMaterials({ value, id, version }, { sort = true, remap = true }) {
+  const [materials, setMaterials] = useState([]);
+  const query = useQuery(
+    getRelatedMaterials,
+    { variables: { relatedMaterialIds: value, articleId: id, articleVersion: version } }
+  );
+
+  /**
+   * > value - represents ids and influences related-materials order for unsaved items.
+   * > serialize the value and add it as a dependency to the data effect.
+   * > Both valueSeries and queryData influence the final materials list to render.
+   */
+  const valueSeries = useMemo(() => value.join(","), [value]);
+  const valueRef = useRef(value);
+
+  useEffect(() => {
+    // for expensive sorting of id list to data list :(
+    valueRef.current = value;
+  }, [value]);
+
+  useEffect(() => {
+    const entries = getIn(query, "data.getRelatedMaterials", []);
+    let items = remap ? entries.map(RemapMaterial.queryToType) : entries;
+
+    /**
+     * Note: expensive sort can improve with reduce
+     * or by making query return items in order of provided ids.
+     *
+     * sorting `elements` based on `value` id list before changing internal state
+     * is required as query returns materials based on saved item.references order.
+     * This is to allow reordering of related materials before an item save (before updateItemFields)
+     */
+    if (sort) {
+      const order = valueRef.current;
+      items = compact(order.map((mID) => items.find((material) => mID === material.id)));
+    }
+
+    setMaterials(items);
+  }, [query.data, valueSeries, sort, remap]);
+
+  return { materials, setMaterials, query };
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/utils.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/utils.jsx
new file mode 100644
index 000000000..12488bc0f
--- /dev/null
+++ b/src/pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/utils.jsx
@@ -0,0 +1,126 @@
+import compact from "utils/compact";
+
+
+export function resolveIdentifier(identifier, type, resolver) {
+  if (resolver && !identifier.startsWith(resolver)) {
+    return `${resolver}${identifier}`;
+  }
+
+  return identifier;
+}
+
+export function getLinkoutTotal(materials) {
+  return materials.reduce(((total, material) => {
+    if (material.linkout) {
+      return total + 1;
+    }
+
+    return total;
+  }), 0);
+}
+
+export function isLinkout(material) {
+  // NOTE: references isLinkout
+  return !!material.linkout;
+}
+
+export function parseReferencesFieldError(error, fieldId) {
+  let message = error;
+
+  if (Array.isArray(error)) {
+    message = compact(error).join(" ");
+  }
+
+  if (message) {
+    return {
+      message,
+      id: fieldId,
+      at: "save",
+    };
+  }
+
+  return undefined;
+}
+
+/** NOTE: consider removing */
+const TYPE_TO_QUERY = {
+  "id": "id",
+  "title": "title",
+  "identifier": "identifier",
+  "relationshipType": "relation",
+  "identifierType": "identifierType",
+  "linkout": "isLinkout",
+  "isUrl": "isUrl",
+  "resolver": "resolver",
+};
+
+// mutation data forgoes id, passed separately
+const TYPE_TO_MUTATION = {
+  "id": "id",
+  "title": "title",
+  "identifier": "identifier",
+  "relationshipType": "relation",
+  "identifierType": "identifier_type",
+  "linkout": "is_linkout",
+  "isUrl": "is_url",
+  "resolver": "resolver",
+};
+
+function remapMaterial(material, schema, reversed = false) {
+  const keyPairs = Object.entries(schema);
+  const newMaterial = {};
+
+  keyPairs.forEach((pair) => {
+    let from = pair[0];
+    let to = pair[1];
+
+    if (reversed) {
+      from = pair[1];
+      to = pair[0];
+    }
+
+    if (material[from] !== undefined) {
+      newMaterial[to] = material[from];
+    }
+  });
+
+  return newMaterial;
+}
+
+export const RemapMaterial = {
+  queryToType: (material) => remapMaterial(material, TYPE_TO_QUERY, true),
+  typeToQuery: (material) => remapMaterial(material, TYPE_TO_QUERY, false),
+  mutationToType: (material) => remapMaterial(material, TYPE_TO_MUTATION, true),
+  typeToMutation: (material) => remapMaterial(material, TYPE_TO_MUTATION, false),
+};
+
+const returnFocusDelay = 300;
+
+export function returnFocus(selector, delay = returnFocusDelay) {
+  let node = null;
+  if (typeof selector === "object") {
+    node = selector;
+  } else {
+    node = document.body.querySelector(selector);
+  }
+
+  setTimeout(() => {
+    node?.focus?.();
+  }, delay);
+}
+
+const actionDelay = 100;
+
+export function delayAction(callback, delay = actionDelay) {
+  return new Promise((resolve, reject) => {
+    setTimeout(async() => {
+      try {
+        const result = await callback();
+
+        resolve(result);
+      } catch (e) {
+        reject(e);
+      }
+    }, delay);
+  });
+}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/resourceTitleDOI/index.css b/src/pages/account/itemEdit/main/form/formField/figshareFields/resourceTitleDOI/index.css
deleted file mode 100644
index b560196f5..000000000
--- a/src/pages/account/itemEdit/main/form/formField/figshareFields/resourceTitleDOI/index.css
+++ /dev/null
@@ -1,25 +0,0 @@
-.resourceTitleDOI {
-  position: relative;
-}
-
-.groupFieldEntry {
-  margin-left: calc(4 * var(--gridSize));
-}
-
-.groupFieldEntry:not(:last-of-type) {
-  margin-bottom: calc(2 * var(--gridSize));
-}
-
-.groupFieldEntry > div:first-child {
-  min-height: unset;
-}
-
-.groupFieldEntry label {
-  font-size: var(--typography-M-fontSize);
-  font-weight: 400;
-  line-height: var(--typography-M-lineHeight);
-
-  padding: 0 0 var(--gridSize) 0;
-
-  color: var(--color-typography-primary);
-}
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/resourceTitleDOI/index.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/resourceTitleDOI/index.jsx
deleted file mode 100644
index 01254a00c..000000000
--- a/src/pages/account/itemEdit/main/form/formField/figshareFields/resourceTitleDOI/index.jsx
+++ /dev/null
@@ -1,92 +0,0 @@
-import PropTypes from "prop-types";
-import React, { Component } from "react";
-
-import Label from "../../genericFields/textField/components/label";
-import TextField from "../../genericFields/textField/withSelfValidation";
-
-import styles from "./index.css";
-
-
-export class ResourceTitleDOI extends Component {
-  static propTypes = {
-    fields: PropTypes.arrayOf(PropTypes.object).isRequired,
-    id: PropTypes.string.isRequired,
-    disabled: PropTypes.bool,
-    onUpdateField: PropTypes.func,
-  }
-
-  static defaultProps = {
-    disabled: PropTypes.bool,
-    onUpdateField: () => undefined,
-  }
-
-  render() {
-    const { id, fields, disabled } = this.props;
-    const [resourceTitle, resourceDoi] = fields;
-    const isRequired = fields.some((field) => field.isRequired);
-
-    return (
-      <div className={styles.resourceTitleDOI}>
-        <Label
-          htmlFor={id}
-          isRequired={isRequired}
-          title="Resource Title and DOI"
-        >
-          {this.renderInfo()}
-        </Label>
-        <TextField
-          className={styles.groupFieldEntry}
-          disabled={disabled}
-          label="Resource Title"
-          multiline={true}
-          {...resourceTitle}
-          isRequired={isRequired}
-          onChange={this.onChangeTitle}
-        />
-        <TextField
-          className={styles.groupFieldEntry}
-          disabled={disabled}
-          label="Resource DOI"
-          {...resourceDoi}
-          isRequired={isRequired}
-          onChange={this.onChangeDoi}
-        />
-      </div>
-    );
-  }
-
-  renderInfo() {
-    return (<div>
-      <div>
-        <b>Resource Title</b>
-        <div>
-          Please add the title of the peer-reviewed article/paper or research you want to link back to.
-          This will appear on the public page as the link title.
-        </div>
-      </div>
-      <br />
-      <div>
-        <b>Resource DOI</b>
-        <div>
-          Please add the DOI of the peer-reviewed article/paper or research you want to link back to.
-          This is the link destination for the Resource Title.
-        </div>
-      </div>
-    </div>);
-  }
-
-  onChangeTitle = (updates) => {
-    const { fields: [title], onUpdateField } = this.props;
-
-    onUpdateField(title.id, updates);
-  }
-
-  onChangeDoi = (updates) => {
-    const { fields: [, doi], onUpdateField } = this.props;
-
-    onUpdateField(doi.id, updates);
-  }
-
-}
-
-export default ResourceTitleDOI;
diff --git a/src/pages/account/itemEdit/main/form/formField/figshareFields/resourceTitleDOI/index.test.jsx b/src/pages/account/itemEdit/main/form/formField/figshareFields/resourceTitleDOI/index.test.jsx
deleted file mode 100644
index c0518b7a3..000000000
--- a/src/pages/account/itemEdit/main/form/formField/figshareFields/resourceTitleDOI/index.test.jsx
+++ /dev/null
@@ -1,89 +0,0 @@
-import React from "react";
-import { mount } from "enzyme";
-
-import TextField from "../../genericFields/textField/withSelfValidation";
-
-import { ResourceTitleDOI } from "./index";
-
-
-const onUpdateField = jest.fn();
-
-
-const baselineProps = {
-  disabled: false,
-  fieldIds: [
-    "resource_title",
-    "resource_doi",
-  ],
-  fields: [
-    {
-      id: "resource_title",
-      isRequired: true,
-      namespace: "internal",
-      settings: {
-        defaultValue: "",
-        isMultiple: false,
-        label: "Resource Title",
-        placeholder: "Add the title of the resource you want to link to",
-      },
-      type: "resourceTitle",
-      value: "resource title",
-      disabled: false,
-      htmlId: "field-internal-resource_title",
-    },
-    {
-      id: "resource_doi",
-      isRequired: false,
-      namespace: "internal",
-      settings: {
-        defaultValue: "",
-        isMultiple: false,
-        label: "Resource Title",
-        placeholder: "Add the DOI of the resource you want to link to",
-      },
-      type: "resourceTitle",
-      value: "resource doi",
-      disabled: false,
-      htmlId: "field-internal-resource_doi",
-    },
-  ],
-  id: "resource",
-  onUpdateField,
-};
-
-describe("<ResourceTitleDOI />", () => {
-  it("renders the component", () => {
-    const wrapper = mount(
-      <ResourceTitleDOI {...baselineProps} />
-    );
-
-    expect(wrapper.html()).toContain("Resource Title and DOI");
-    expect(wrapper.find(TextField)).toHaveLength(2);
-  });
-
-  it("allows changing individual fields of the group", () => {
-    const wrapper = mount(
-      <ResourceTitleDOI {...baselineProps} />
-    );
-
-    const inputs = wrapper.find(TextField);
-
-
-    inputs.at(0).props().onChange({ value: "new title" });
-    inputs.at(1).props().onChange({ value: "new doi" });
-
-    expect(onUpdateField).toHaveBeenCalledWith("resource_title", { "value": "new title" });
-    expect(onUpdateField).toHaveBeenCalledWith("resource_doi", { "value": "new doi" });
-  });
-
-  it("sets all fields as required if at least one of them is", () => {
-    const wrapper = mount(
-      <ResourceTitleDOI {...baselineProps} />
-    );
-
-    const inputs = wrapper.find(TextField);
-
-    expect(inputs.at(0).props().isRequired).toEqual(true);
-    expect(inputs.at(1).props().isRequired).toEqual(true);
-  });
-});
diff --git a/src/pages/account/itemEdit/main/form/formField/index.jsx b/src/pages/account/itemEdit/main/form/formField/index.jsx
index 9ee1d3d05..56eaa84fa 100644
--- a/src/pages/account/itemEdit/main/form/formField/index.jsx
+++ b/src/pages/account/itemEdit/main/form/formField/index.jsx
@@ -11,7 +11,7 @@ import Description from "./figshareFields/description";
 import ItemType from "./figshareFields/itemType";
 import Title from "./figshareFields/title";
 import Group from "./figshareFields/group";
-import ResourceTitleDOI from "./figshareFields/resourceTitleDOI";
+import RelatedMaterials from "./figshareFields/relatedMaterials";
 import Date from "./customFields/date";
 import DropdownLargeList from "./customFields/dropdownLargeList";
 import SimpleDropdown from "./customFields/simpleDropdown";
@@ -29,9 +29,8 @@ export const fieldsMapping = {
     description: Description,
     funding: Funding,
     license: Licenses,
-    references: Fieldset,
+    relatedMaterials: RelatedMaterials,
     title: Title,
-    resource: ResourceTitleDOI,
     itemType: ItemType,
   },
   customField: {
@@ -91,7 +90,7 @@ export default class FormField extends PureComponent {
 
     const settings = { ...this.props.settings };
 
-    if (["references", "funding"].includes(type)) {
+    if (["relatedMaterials", "funding"].includes(type)) {
       settings.isMultiple = true;
     }
 
diff --git a/src/pages/account/itemEdit/main/form/index.jsx b/src/pages/account/itemEdit/main/form/index.jsx
index 1198194df..28e650192 100644
--- a/src/pages/account/itemEdit/main/form/index.jsx
+++ b/src/pages/account/itemEdit/main/form/index.jsx
@@ -2,9 +2,9 @@ import PropTypes from "prop-types";
 import React, { Component } from "react";
 import getIn from "utils/getIn";
 import { unwrapMarkup } from "utils/unwrapMarkup";
+import compact from "utils/compact";
 
 import ItemContext from "../../context/itemContext";
-import { compact } from "../../utils";
 
 import FormField, { fieldsMapping } from "./formField";
 import { getStateFromFieldsSchema, hasValue, ITEM_FIELDS, isRequired } from "./utils";
@@ -233,7 +233,9 @@ export default class Form extends Component {
             updates[fieldId] = value.map((individualValue) => individualValue.id);
             break;
           case "references":
-            updates[fieldId] = value.filter((individualValue) => !!individualValue.length);
+            if (value?.length) {
+              updates[fieldId] = value;
+            }
             break;
           case "group":
             updates[fieldId] = value?.id;
diff --git a/src/pages/account/itemEdit/main/form/index.test.jsx b/src/pages/account/itemEdit/main/form/index.test.jsx
index a59940166..60807bf70 100644
--- a/src/pages/account/itemEdit/main/form/index.test.jsx
+++ b/src/pages/account/itemEdit/main/form/index.test.jsx
@@ -5,7 +5,6 @@ import { shallow } from "enzyme";
 import { mockedItemFields, generateField } from "../../mocks";
 
 import Form from "./index";
-import ResourceTitleDOI from "./formField/figshareFields/resourceTitleDOI";
 
 
 jest.mock("@figshare/components/base/popup");
@@ -356,8 +355,6 @@ describe("<Form />", () => {
       expect(state.resource).not.toBeDefined();
       expect(state.resource_title).toMatchObject({ value: "Title", id: "resource_title" });
       expect(state.resource_doi).toMatchObject({ value: "DOI", id: "resource_doi" });
-
-      expect(formComponent.find(ResourceTitleDOI)).toHaveLength(1);
     });
 
     it("requires that the group component be part of the field mapping", () => {
@@ -379,7 +376,6 @@ describe("<Form />", () => {
 
       const result = formComponent.instance().renderFieldGroup({ id: "unknown", namespace: "internal", fields: [] });
       expect(result).toEqual(null);
-      expect(formComponent.find(ResourceTitleDOI)).toHaveLength(1);
     });
 
     it("for any change in the itemFields data, it updates settings and validations", () => {
diff --git a/src/pages/account/itemEdit/main/form/utils/constants.js b/src/pages/account/itemEdit/main/form/utils/constants.js
index 79739f951..0e0d8cb92 100644
--- a/src/pages/account/itemEdit/main/form/utils/constants.js
+++ b/src/pages/account/itemEdit/main/form/utils/constants.js
@@ -11,25 +11,6 @@ export const ERROR_MESSAGES = {
       including HTML and source formatting. Paste as plain text to remove formatting if desired.`,
       isRequired: "The description is required",
     },
-    references: {
-      isUrlOrDoi: "The reference must be a valid link or an identifier.",
-      isUrl: "The reference must be a valid link or an identifier.",
-    },
-    "resourceTitle": {
-      minLength: (minLength, backendSchema) => {
-        const defaultMaxLength = 1000;
-        const maxLength = backendSchema?.maxLength ?? defaultMaxLength;
-
-        return `The Resource Title must have between ${minLength} and ${maxLength} characters.`;
-      },
-      maxLength: (maxLength, backendSchema) => {
-        const defaultMinLength = 2;
-        const minLength = backendSchema?.minLength ?? defaultMinLength;
-
-        return `The Resource Title must have between ${minLength} and ${maxLength} characters.`;
-      },
-    },
-    "resourceDoi": { isDoi: "The DOI must have the following format: 10.6084/m9.figshare.1407024" },
   },
   customField: {},
   general: {
@@ -103,14 +84,6 @@ export const DEFAULT_TEXTS = {
       label: "Item Type",
       info: "Item Type",
     },
-    "resource_title": {
-      label: "Resource Title",
-      placeholder: "Add the title of the resource you want to link to...",
-    },
-    "resource_doi": {
-      label: "Resource DOI",
-      placeholder: "Add the DOI you want to link to...",
-    },
   },
   customField: {},
 };
@@ -126,8 +99,6 @@ export const ITEM_FIELDS = {
   keywords: "keywords",
   funding: "funding",
   references: "references",
-  "resource_doi": "resource_doi",
-  "resource_title": "resource_doi",
   license: "license",
 };
 
diff --git a/src/pages/account/itemEdit/main/form/utils/constants.test.js b/src/pages/account/itemEdit/main/form/utils/constants.test.js
index 673f77442..9a72a3058 100644
--- a/src/pages/account/itemEdit/main/form/utils/constants.test.js
+++ b/src/pages/account/itemEdit/main/form/utils/constants.test.js
@@ -2,7 +2,7 @@ import { ERROR_MESSAGES } from "./constants";
 
 
 describe("ERROR_MESSAGES", () => {
-  const { internal: { title, description, resourceTitle, resourceDoi }, general } = ERROR_MESSAGES;
+  const { internal: { title, description }, general } = ERROR_MESSAGES;
 
   it("returns correct values for Title field", () => {
     const { minLength } = title;
@@ -20,21 +20,4 @@ describe("ERROR_MESSAGES", () => {
     expect(minLength("testValue").includes("testValue")).toEqual(true);
     expect(maxLength("testValue").includes("testValue")).toEqual(true);
   });
-
-  it("returns correct values for resource title", () => {
-    const { minLength, maxLength } = resourceTitle;
-    const min = 2;
-    const max = 1000;
-
-    expect(minLength(min, { maxLength: max }).includes("1000")).toEqual(true);
-    expect(maxLength(max, { minLength: min }).includes("2")).toEqual(true);
-    expect(minLength(2, { maxLength: max }).includes("2")).toEqual(true);
-    expect(maxLength(max, { minLength: min }).includes("1000")).toEqual(true);
-  });
-
-  it("returns correct values for resource doi", () => {
-    const { isDoi } = resourceDoi;
-
-    expect(isDoi).toEqual("The DOI must have the following format: 10.6084/m9.figshare.1407024");
-  });
 });
diff --git a/src/pages/account/itemEdit/main/form/utils/transformSchema.js b/src/pages/account/itemEdit/main/form/utils/transformSchema.js
index 49910078e..b72ad1cfa 100644
--- a/src/pages/account/itemEdit/main/form/utils/transformSchema.js
+++ b/src/pages/account/itemEdit/main/form/utils/transformSchema.js
@@ -2,7 +2,7 @@ import { ERROR_MESSAGES, DEFAULT_TEXTS, FIELD_GROUP_MAPPING, MARKUP_FIELD_TYPES,
 
 
 export const _getSettings = (item) => {
-  const { id, namespace, settings } = item;
+  const { id, namespace, settings, isRequired, validation = {} } = item;
 
   const defaultTexts = DEFAULT_TEXTS?.[namespace]?.[id];
   if (!defaultTexts) {
@@ -13,10 +13,12 @@ export const _getSettings = (item) => {
 
   return {
     ...settings,
+    isRequired,
     label: label || defaultTexts.label,
     placeholder: placeholder || defaultTexts.placeholder,
     info: info || defaultTexts.info,
     description: description || defaultTexts.description,
+    validation,
   };
 };
 
diff --git a/src/pages/account/itemEdit/main/form/utils/validation.js b/src/pages/account/itemEdit/main/form/utils/validation.js
index 816d77161..ce66b7f27 100644
--- a/src/pages/account/itemEdit/main/form/utils/validation.js
+++ b/src/pages/account/itemEdit/main/form/utils/validation.js
@@ -9,6 +9,15 @@ const trimRegex = new RegExp(/(?:^(?:&nbsp;)+)|(?:(?:&nbsp;)+$)/g);
 
 export const minLength = (value, limit) => !value.length || value.trim().length >= limit;
 
+export const minChecked = (checked, { limit, total }) => {
+  // requires current checked values length to be passed
+  if (checked && limit <= total) {
+    return false;
+  }
+
+  return true;
+};
+
 export const maxLength = (value, limit) => value.length <= limit;
 
 export const hasValue = (value) => (value !== "") && (value !== undefined) && (value !== null) && (value !== 0);
@@ -98,6 +107,7 @@ export const isOrcid = (value = "") => {
 export const validations = {
   minLength,
   maxLength,
+  minChecked,
   isRequired,
   isUrl,
   isUrlOrDoi,
@@ -107,7 +117,7 @@ export const validations = {
   isGrantValid,
 };
 
-export const getFieldError = (value, validationSchema) => {
+export const getFieldError = (value, validationSchema, defineValidationParameter = (p) => p) => {
   if (!validationSchema) {
     return undefined;
   }
@@ -116,7 +126,7 @@ export const getFieldError = (value, validationSchema) => {
     const { type, value: validationParameter, fn } = rule;
 
     const validationFunction = fn ?? validations[type];
-    const isValid = validationFunction?.(value, validationParameter);
+    const isValid = validationFunction?.(value, defineValidationParameter(validationParameter));
 
     return !isValid;
   });
diff --git a/src/pages/account/itemEdit/main/form/utils/validation.test.js b/src/pages/account/itemEdit/main/form/utils/validation.test.js
index d0fac1aca..1895eaeb4 100644
--- a/src/pages/account/itemEdit/main/form/utils/validation.test.js
+++ b/src/pages/account/itemEdit/main/form/utils/validation.test.js
@@ -161,4 +161,16 @@ describe("getFieldError", () => {
     expect(getFieldError(validString, mockedSchema)).toEqual(undefined);
     expect(getFieldError(tooLongString, mockedSchema)).toEqual(maxLengthErrorMessage);
   });
+
+  it("supports redefining validation parameters", () => {
+    const schema = [{
+      type: "minLength",
+      value: 2,
+      message: minLengthErrorMessage,
+    }];
+
+    const redefineParameter = (schemaValue) => schemaValue + 4;
+
+    expect(getFieldError("fails", schema, redefineParameter)).toEqual(minLengthErrorMessage);
+  });
 });
diff --git a/src/pages/account/itemEdit/utils.jsx b/src/pages/account/itemEdit/utils.jsx
index 3a4f1ba7f..41a9033de 100644
--- a/src/pages/account/itemEdit/utils.jsx
+++ b/src/pages/account/itemEdit/utils.jsx
@@ -1,6 +1,8 @@
 /* eslint-disable no-use-before-define */
 import moment from "moment";
 import getIn from "utils/getIn";
+import compact from "utils/compact";
+import Registry from "utils/registry";
 import { isValidUrl } from "utils/validation";
 import { capitalizeFirstLetter } from "utils/strings";
 import { UploadStatus } from "utils/file";
@@ -12,10 +14,12 @@ import {
   PUBLISH_CHECKS,
   VERSIONING_DIFF_FIELDS,
   MULTIPLE_VALUE_FIELDS,
+  MANDATORY_AUTHORS_PUBLISH_ERROR,
+  LINKBACK_MANDATORY_PUBLISH_ERROR,
 } from "./constants";
 import { isValidAuthor } from "./main/form/formField/figshareFields/authors/utils";
-import { hasValue } from "./main/form/utils";
 import { isRequired } from "./main/form/utils/validation";
+import { isLinkout } from "./main/form/formField/figshareFields/relatedMaterials/utils";
 
 
 const fieldRegex = /Missing mandatory value `(.*)`/;
@@ -144,10 +148,15 @@ export function checkMandatoryFields(fields, state, domainData) {
 
   result.info = fields.reduce((info, id) => {
     const field = state[id];
-    const { value, isRequired: mandatoryAtPublish, valueType } = field;
+    const { value, valueType } = field;
     const missing = !isRequired(value, valueType);
+    let mandatory = field.isRequired;
 
-    if (mandatoryAtPublish && missing) {
+    if (id === "resource_title" || id === "resource_doi") {
+      mandatory = false;
+    }
+
+    if (mandatory && missing) {
       let label = getIn(field, "label", getIn(field, "settings.label", id));
 
       if (id === "group") {
@@ -175,29 +184,19 @@ export function checkFieldsForPublishSpecificErrors(formState, group) {
 
   if (!isAuthorsValid) {
     result.valid = false;
-    result.info.push({
-      field: "authors",
-      error: "Added authors must have all mandatory fields. If you can't edit the author please contact support.",
-    });
+    result.info.push(MANDATORY_AUTHORS_PUBLISH_ERROR);
   }
 
-  const resourceTitle = getIn(formState, "resource_title.value", "");
-  const resourceDoi = getIn(formState, "resource_doi.value", "");
+  const groupLinkbackMandatory = getIn(formState, "group.value.linkbackMandatory", false);
+  const resourceDOIMandatory = getIn(formState, "resource_doi", false);
+  const linkbackMandatory = groupLinkbackMandatory || resourceDOIMandatory;
 
-  if (resourceTitle && !resourceDoi) {
-    result.valid = false;
-    result.info.push({
-      field: "resource_doi",
-      error: MESSAGE_BY_MANDATORY_VALUE_FIELD["resource doi"],
-    });
-  }
+  const anyLinkouts = getIn(Registry.get("item-edit/related-materials"), "current", []).
+    some(isLinkout);
 
-  if (resourceDoi && !resourceTitle) {
+  if (linkbackMandatory && !anyLinkouts) {
     result.valid = false;
-    result.info.push({
-      field: "resource_title",
-      error: MESSAGE_BY_MANDATORY_VALUE_FIELD["resource title"],
-    });
+    result.info.push(LINKBACK_MANDATORY_PUBLISH_ERROR);
   }
 
   return result;
@@ -276,14 +275,6 @@ export function diffValues(oldValue, newValue) {
   return false;
 }
 
-export function compact(maybeCollection) {
-  if (Array.isArray(maybeCollection)) {
-    return maybeCollection.filter(hasValue);
-  }
-
-  return maybeCollection;
-}
-
 export function checkVersioning(item, fileManagement, formState, savedFormFields = [], itemActions = []) {
   const result = {
     version: getIn(item, "version"),
diff --git a/src/pages/item/page/app.jsx b/src/pages/item/page/app.jsx
index 8eebbd108..7321573db 100644
--- a/src/pages/item/page/app.jsx
+++ b/src/pages/item/page/app.jsx
@@ -22,7 +22,7 @@ import Keywords from "./components/keywords";
 import License from "./components/license";
 import LinkBack from "./components/linkback";
 import Meta from "./components/meta";
-import References from "./components/references";
+import RelatedMaterials from "./components/relatedMaterials";
 import RichResults from "./components/richResults";
 import UsageMetrics from "./components/usageMetrics";
 import Timeline from "./components/timeline";
@@ -136,7 +136,7 @@ export class ItemDisplay extends Component {
                   />
                   <Funding className={style.section} />
                   <Timeline className={style.section} />
-                  <References className={style.section} />
+                  <RelatedMaterials className={style.section} />
                   <CustomFieldsDisplay customFields={item?.customFields?.items} />
                   <CustomFieldsDisplay customFields={item?.suplimentaryFields?.items} />
                   <Comments />
diff --git a/src/pages/item/page/app.test.jsx b/src/pages/item/page/app.test.jsx
index 9f8fb5026..819efed5c 100644
--- a/src/pages/item/page/app.test.jsx
+++ b/src/pages/item/page/app.test.jsx
@@ -21,9 +21,10 @@ jest.mock("./components/exports");
 jest.mock("./components/funding");
 jest.mock("./components/keywords");
 jest.mock("./components/license");
-jest.mock("./components/linkback");
+jest.mock("./components/linkback", () => () => null);
 jest.mock("./components/meta");
 jest.mock("./components/references");
+jest.mock("./components/relatedMaterials", () => () => null);
 jest.mock("./components/richResults");
 jest.mock("./components/usageMetrics");
 jest.mock("./components/timeline");
diff --git a/src/pages/item/page/components/linkback/card.css b/src/pages/item/page/components/linkback/card.css
new file mode 100644
index 000000000..a20ee8b6f
--- /dev/null
+++ b/src/pages/item/page/components/linkback/card.css
@@ -0,0 +1,120 @@
+.card {
+  position: relative;
+
+  display: flex;
+  flex-direction: column;
+
+  width: 100%;
+  padding: calc(2 * var(--gridSize));
+
+  border: 1px solid var(--color-border-primary);
+  border-radius: calc(0.5 * var(--gridSize));
+  background: var(--color-layout-primary-background);
+}
+
+.header {
+  display: flex;
+  flex-direction: column;
+  justify-content: flex-start;
+  align-items: flex-start;
+}
+
+.title {
+  display: flex;
+  flex-direction: row;
+  gap: calc(2 * var(--gridSize));
+  align-items: center;
+  justify-content: flex-start;
+}
+
+.content {
+  display: block;
+  overflow: hidden;
+
+  margin-top: var(--gridSize);
+}
+
+.icon {
+  position: relative;
+
+  display: flex;
+
+  width: calc(3 * var(--gridSize));
+  height: calc(3 * var(--gridSize));
+
+  margin: 0;
+  fill: var(--color-icon-secondary);
+}
+
+.icon > svg {
+  fill: inherit;
+
+  /*
+    svg-tweak - papers svg is 1 x 2 view box ratio
+    position, height and translation required
+    to fit into 1x1 - 16px rectangular icon slot.
+   */
+  position: absolute;
+  top: 0;
+
+  width: 77%;
+  height: auto;
+
+  transform: translate(10%, -18%);
+}
+
+.relation {
+  font-weight: 700;
+}
+
+.journal,
+.relation {
+  font-size: var(--typography-S-fontSize);
+  line-height: var(--typography-S-lineHeight);
+}
+
+.journal,
+.text {
+  color: var(--color-typography-secondary);
+}
+
+.title,
+.journal, {
+  word-wrap: break-word;
+  overflow-wrap: break-word;
+  line-break: loose;
+}
+
+.link,
+.text {
+  font-size: var(--typography-M-fontSize);
+  line-height: var(--typography-M-lineHeight);
+
+  word-wrap: inherit;
+  line-break: inherit;
+  overflow-wrap: inherit;
+}
+
+.link > *,
+.text > * {
+  font-size: inherit;
+  line-height: inherit;
+
+  word-wrap: inherit;
+  line-break: inherit;
+  overflow-wrap: inherit;
+}
+
+.sentence {
+  line-break: normal;
+
+  word-wrap: break-word;
+  overflow-wrap: break-word;
+}
+
+.word {
+  line-break: anywhere;
+
+  word-break: break-all;
+  overflow-wrap: anywhere;
+}
diff --git a/src/pages/item/page/components/linkback/card.jsx b/src/pages/item/page/components/linkback/card.jsx
new file mode 100644
index 000000000..763f03a69
--- /dev/null
+++ b/src/pages/item/page/components/linkback/card.jsx
@@ -0,0 +1,73 @@
+import React from "react";
+import classnames from "classnames";
+import { bool, oneOfType, string, number } from "prop-types";
+import Papers from "@figshare/fcl/icons/papers";
+import { GenericButton } from "@figshare/fcl/button";
+import { NodeWithHighlights } from "shared/ui/highlights";
+
+import styles from "./card.css";
+
+
+export function LinkbackCard({ id, itemId, title, relation, identifier, type, isUrl, journal, titleHasWords }) {
+  return (
+    <div
+      key={id}
+      className={styles.card}
+      data-linkback-material-as-link={isUrl}
+      data-linkback-material-id={id}
+      data-linkback-material-identifier={identifier}
+      data-linkback-material-identifier-type={type}
+      data-linkback-material-journal-publication={journal}
+      data-linkback-material-relation={relation}
+    >
+      <div className={styles.header}>
+        <div className={styles.title}>
+          <span className={styles.icon}>
+            <Papers />
+          </span>
+          <h4 className={styles.relation}>{relation}</h4>
+        </div>
+        {journal && <p className={styles.journal}>{journal}</p>}
+      </div>
+      <div className={classnames(styles.content, titleHasWords ? styles.sentence : styles.word)}>
+        {isUrl && (
+          <GenericButton
+            className={styles.link}
+            href={identifier}
+            target="_blank"
+          >
+            <NodeWithHighlights itemId={itemId} text={title} />
+          </GenericButton>
+        )}
+        {!isUrl && (
+          <span
+            className={styles.text}
+            data-linkback-material-text-identifier={identifier}
+          >
+            <NodeWithHighlights itemId={itemId} tag="i" text={title} />{" ("}
+            <NodeWithHighlights itemId={itemId} tag="span" text={identifier} />
+            {")"}
+          </span>
+        )}
+      </div>
+    </div>
+  );
+}
+
+LinkbackCard.propTypes = {
+  id: oneOfType([string, number]).isRequired,
+  identifier: string.isRequired,
+  isUrl: bool.isRequired,
+  relation: string.isRequired,
+  title: string.isRequired,
+  type: string.isRequired,
+  itemId: oneOfType([string, number]),
+  journal: string,
+  titleHasWords: bool,
+};
+
+LinkbackCard.defaultProps = {
+  itemId: undefined,
+  journal: undefined,
+  titleHasWords: true,
+};
diff --git a/src/pages/item/page/components/linkback/index.css b/src/pages/item/page/components/linkback/index.css
index 3fd890698..e7fd31d9a 100644
--- a/src/pages/item/page/components/linkback/index.css
+++ b/src/pages/item/page/components/linkback/index.css
@@ -1,69 +1,17 @@
 .linkback {
   position: relative;
 
-  display: flex;
-  flex-direction: column;
-
-  width: 100%;
-  padding: calc(2 * var(--gridSize));
-
-  border: 1px solid var(--color-border-primary);
-  border-radius: 3px;
-  background: var(--color-layout-primary-background);
-}
-
-.titleWrapper {
-  display: flex;
-  flex-direction: row;
-  justify-content: flex-start;
-  align-items: flex-start;
-
-  margin-top: var(--gridSize);
+  list-style: none;
 }
 
-.icon {
-  position: relative;
-  flex-shrink: 0;
-
-  margin: 0 calc(2 * var(--gridSize)) 0 0;
-  fill: var(--color-icon-secondary);
+.linkback > li {
+  list-style: none;
 }
 
-.titleTexts {
-  display: flex;
-  flex-direction: column;
-  flex: 1;
-}
-
-.title,
-.journal {
-  font-size: var(--typography-S-fontSize);
-  line-height: var(--typography-S-lineHeight);
-
-  margin: 0;
-}
-
-.sectionTitle {
-  font-size: var(--typography-S-fontSize);
-  font-weight: bold;
-  line-height: var(--typography-S-lineHeight);
-}
-
-h2.title.sectionTitle {
-  text-transform: none;
-}
-
-.journal {
-  color: var(--color-typography-secondary);
-}
-
-.container {
-  margin-top: calc(2 * var(--gridSize));
-
-  word-break: break-word;
+.item {
+  list-style: none;
 }
 
-.link {
-  font-size: var(--typography-S-fontSize);
-  line-height: var(--typography-S-lineHeight);
+.item:not(:last-child) {
+  margin-bottom: calc(2 * var(--gridSize));
 }
diff --git a/src/pages/item/page/components/linkback/index.jsx b/src/pages/item/page/components/linkback/index.jsx
index e262937e6..7c0e845bf 100644
--- a/src/pages/item/page/components/linkback/index.jsx
+++ b/src/pages/item/page/components/linkback/index.jsx
@@ -1,76 +1,95 @@
-import classnames from "classnames";
-import PropTypes from "prop-types";
-import React, { Component } from "react";
-import { GenericButton } from "@figshare/fcl/button";
-import LinkbackPublication from "@figshare/fcl/icons/papers";
-import { URLS } from "utils/constants";
-import { NodeWithHighlights } from "shared/ui/highlights";
+import React, { useContext, useMemo } from "react";
+import getIn from "utils/getIn";
+import { useIdentifiersAndRelationshipsResource } from
+  "pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships";
+import { useRelatedMaterials } from
+  "pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/useRelatedMaterials";
+import { resolveIdentifier } from
+  "pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/utils";
 
 import Context from "../../context";
 
-import style from "./index.css";
+import { LinkbackCard } from "./card";
+import styles from "./index.css";
 
 
-export default class Linkback extends Component {
-  static propTypes = { className: PropTypes.string }
+function renderItem(material, identifiers, relationships, itemId) {
+  const { id, identifier, identifierType, relation, title } = material;
+  const relationship = relationships.find((entry) => entry.value === relation)?.key ?? relation;
+  const displayTitle = title || identifier;
+  const identifierTypeObj = identifiers.find((entry) => entry.value === identifierType);
+  const isUrl = getIn(material, "isUrl", getIn(identifierTypeObj, "meta.isUrl", false));
+  const resolver = getIn(material, "resolver", getIn(identifierTypeObj, "meta.resolver", ""));
+  const resolvedIdentifier = resolveIdentifier(identifier, identifierType, resolver);
+  const journal = getIn(material, "meta.publication");
+  const titleHasWords = displayTitle.search(/\s/) !== -1;
 
-  static defaultProps = { className: undefined }
-
-  static contextType = Context;
+  return (
+    <li key={id} className={styles.item}>
+      <LinkbackCard
+        id={id}
+        identifier={resolvedIdentifier}
+        isUrl={isUrl}
+        itemId={itemId}
+        journal={journal}
+        relation={relationship}
+        title={displayTitle}
+        titleHasWords={titleHasWords}
+        type={identifierType}
+      />
+    </li>
+  );
+}
 
-  render() {
-    const { domainData } = this.context;
+export function Linkback(props) {
+  const { item, domainData } = useContext(Context);
+  const { identifiers, relationships } = useIdentifiersAndRelationshipsResource();
+  const variables = useMemo(() => {
+    return {
+      id: getIn(item, "id"),
+      version: getIn(item, "version"),
+      value: getIn(item, "references.items", getIn(item, "references", [])),
+    };
+  }, [item]);
+  const { materials: unfiltered } = useRelatedMaterials(variables, { sort: true, remap: false });
+  /* filter materials without linkout. */
+  const materials = useMemo(() => unfiltered.filter((material) => material.isLinkout), [unfiltered]);
+  const empty = !materials.length;
+  const itemId = item?.id;
+  /** retrieve backwards compatibility resource information if it exists */
+  const linkback = useMemo(() => {
+    const collection = getIn(item, "linkbackCollection", {});
+    const linkBackTitle = getIn(domainData, "linkBackTitle");
 
-    if (!domainData) {
-      return null;
+    if (!empty || !collection || !linkBackTitle) {
+      return undefined;
     }
 
-    const { id, linkbackCollection } = this.context.item;
-
-    if (!linkbackCollection) {
-      return null;
-    }
+    const { resourceDoi, resourceTitle, resourcePublication } = collection;
 
-    const { resourceTitle, resourceDoi, resourcePublication } = linkbackCollection;
-    if (!resourceDoi || !resourceTitle) {
-      return null;
+    if (!resourceDoi) {
+      return undefined;
     }
 
-    const { className } = this.props;
+    return {
+      id: "resource-linkback-compat",
+      title: resourceTitle,
+      identifier: resourceDoi,
+      identifierType: "DOI",
+      relation: domainData?.linkBackTitle,
+      meta: {
+        type: "resource-publication",
+        publication: resourcePublication,
+      },
+    };
+  }, [item, empty, domainData]);
 
-    return (
-      <div className={classnames(style.linkback, className)}>
-        <div className={style.titleWrapper}>
-          <LinkbackPublication className={style.icon} />
-          <div className={style.titleTexts}>
-            <h2 className={classnames(style.title, style.sectionTitle)}>
-              {domainData.linkBackTitle}
-            </h2>
-            {this.renderJournalDetails(resourcePublication)}
-          </div>
-        </div>
-        <div className={style.container}>
-          <GenericButton
-            className={style.link}
-            href={`${URLS.DOI}${resourceDoi}`}
-            target="_blank"
-          >
-            <NodeWithHighlights itemId={id} text={resourceTitle} />
-          </GenericButton>
-        </div>
-      </div>
-    );
-  }
-
-  renderJournalDetails = (resourcePublication) => {
-    if (!resourcePublication) {
-      return null;
-    }
-
-    return (
-      <p className={style.journal}>
-        in {resourcePublication}
-      </p>
-    );
-  }
+  return (
+    <ul className={styles.linkback} {...props}>
+      {linkback && renderItem(linkback, identifiers.data, relationships.data, itemId)}
+      {materials.map((material) => renderItem(material, identifiers.data, relationships.data, itemId))}
+    </ul>
+  );
 }
+
+export default Linkback;
diff --git a/src/pages/item/page/components/linkback/index.test.jsx b/src/pages/item/page/components/linkback/index.test.jsx
index c155ea64f..d69e3ccef 100644
--- a/src/pages/item/page/components/linkback/index.test.jsx
+++ b/src/pages/item/page/components/linkback/index.test.jsx
@@ -1,83 +1,240 @@
 import React, { Component } from "react";
 import { mount } from "enzyme";
+import { MockedProvider } from "@apollo/react-testing";
+import { wait } from "utils/apollo/testing";
+import { getRelatedMaterials, getRelatedMaterialTypes, getRelatedMaterialRelations } from
+  "pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.gql";
 
-import mockedItem from "../../mocks/item";
-import mockedDomainData from "../../mocks/domainData";
 import Context from "../../context";
 
-import TestedComponent from "./index";
+import { LinkbackCard } from "./card";
+import Linkback from "./index";
 
 
-let item = null;
-let domainData = null;
-
-class Wrapped extends Component {
+class LinkbackWrapped extends Component {
   render() {
-    const context = { item, domainData, ...this.props };
+    // eslint-disable-next-line react/prop-types
+    const { item, domainData, mocks } = this.props;
+    const context = { item, domainData };
 
     return (
-      <Context.Provider value={context}>
-        <TestedComponent />
-      </Context.Provider>
+      <MockedProvider addTypename={false} mocks={mocks}>
+        <Context.Provider value={context}>
+          <Linkback />
+        </Context.Provider>
+      </MockedProvider>
     );
   }
 }
 
+LinkbackWrapped.defaultProps = {
+  mocks: [],
+  item: null,
+  domainData: null,
+};
 
-describe("<ItemPublicPageLinkback />", () => {
-  beforeEach(() => {
-    item = mockedItem;
-    domainData = mockedDomainData;
-  });
 
-  it("renders correctly", () => {
+describe("<Linkback />", () => {
+  const getRelatedMaterialsEmptyMock = [{
+    request: { query: getRelatedMaterials, variables: { relatedMaterialIds: [] } },
+    result: { data: { getRelatedMaterials: [] } },
+  }];
+  const getRelatedMaterialsDataMock = [{
+    request: {
+      query: getRelatedMaterials,
+      variables: { relatedMaterialIds: [1, 2, 3], articleVersion: 0, articleId: 12000 },
+    },
+    result: {
+      data: {
+        getRelatedMaterials: [
+          {
+            id: 1,
+            identifier: "identifier-one",
+            title: "identifier-one-title",
+            relation: "IsCitedBy",
+            identifierType: "DOI",
+            isLinkout: true,
+            isUrl: false,
+            resolver: "https://doi.org/",
+          },
+          {
+            id: 2,
+            identifier: "identifier-two",
+            title: "",
+            relation: "IsCitedBy",
+            identifierType: "DOI",
+            isLinkout: true,
+            isUrl: true,
+            resolver: "https://doi.org/",
+          },
+
+          {
+            id: 3,
+            identifier: "identifier-three",
+            title: "identifier-one-title",
+            relation: "IsCitedBy",
+            identifierType: "DOI",
+            isLinkout: false,
+            isUrl: true,
+            resolver: "https://doi.org/",
+          },
+        ],
+      },
+    },
+  }];
+
+  const getIdentifiersAndRelationshipsMocks = [{
+    request: { query: getRelatedMaterialTypes },
+    result: {
+      data: {
+        getRelatedMaterialTypes: [
+          { name: "DOI", resolver: "https://doi.org/", isUrl: true },
+        ],
+      },
+    },
+  },
+  {
+    request: { query: getRelatedMaterialRelations },
+    result: {
+      data: {
+        getRelatedMaterialRelations: [
+          "IsCitedBy", "Cites",
+        ],
+      },
+    },
+  }];
+
+  it("renders a compatibility linkback entry if there is no reference data, and item has linkback", async() => {
     const testItem = {
-      ...item,
+      id: 12000,
+      version: 0,
+      references: [],
       linkbackCollection: {
-        resourceTitle: "test",
-        resourceDoi: "test",
-        resourcePublication: "test",
+        resourceTitle: "test-title",
+        resourceDoi: "test-identifier",
+        resourcePublication: "test-journal",
       },
     };
 
-    const tested = mount(<Wrapped item={testItem} />);
-    expect(tested.isEmptyRender()).toEqual(false);
-  });
+    const component = mount(
+      <LinkbackWrapped
+        domainData={ { linkBackTitle: "My linkback title" } }
+        item={testItem}
+        mocks={[...getRelatedMaterialsEmptyMock, ...getIdentifiersAndRelationshipsMocks]}
+      />
+    );
 
-  it("returns null with no domainData", () => {
-    const tested = mount(<Wrapped domainData={null} />);
-    expect(tested.isEmptyRender()).toEqual(true);
-  });
+    await wait(() => component.update());
+    const linkbackCards = component.find(LinkbackCard);
+
+    expect(linkbackCards).toHaveLength(1);
 
-  it("returns null with no linkbackCollection", () => {
+    expect(linkbackCards.at(0).props()).toEqual(expect.objectContaining({
+      title: "test-title",
+      relation: "My linkback title",
+      identifier: "https://doi.org/test-identifier",
+      journal: "test-journal",
+    }));
+  });
+  it("renders related materials if references is defined", async() => {
     const testItem = {
-      ...item,
-      linkbackCollection: undefined,
+      id: 12000,
+      version: 0,
+      references: [1, 2, 3],
+      linkbackCollection: {
+        resourceTitle: "test-title",
+        resourceDoi: "test-identifier",
+        resourcePublication: "test-journal",
+      },
     };
-    const tested = mount(<Wrapped item={testItem} />);
-    expect(tested.isEmptyRender()).toEqual(true);
+
+    const component = mount(
+      <LinkbackWrapped
+        domainData={ { linkBackTitle: "My linkback title" } }
+        item={testItem}
+        mocks={[...getRelatedMaterialsDataMock, ...getIdentifiersAndRelationshipsMocks]}
+      />
+    );
+
+    await wait(() => component.update());
+    const linkbackCards = component.find(LinkbackCard);
+
+    expect(linkbackCards.at(0).props()).toEqual(expect.objectContaining({
+      title: "identifier-one-title",
+      relation: "Is cited by",
+      identifier: "https://doi.org/identifier-one",
+    }));
   });
 
-  it("returns null with empty linkbackCollection", () => {
+
+  it("does not render if linkbackTitle is missing and no related materials", async() => {
     const testItem = {
-      ...item,
-      linkbackCollection: {},
+      id: 12000,
+      version: 0,
+      references: [],
+      linkbackCollection: {
+        resourceTitle: "test-title",
+        resourceDoi: "test-identifier",
+        resourcePublication: "test-journal",
+      },
     };
-    const tested = mount(<Wrapped item={testItem} />);
-    expect(tested.isEmptyRender()).toEqual(true);
+
+    const component = mount(
+      <LinkbackWrapped
+        domainData={ { linkBackTitle: null } }
+        item={testItem}
+        mocks={[...getRelatedMaterialsEmptyMock]}
+      />
+    );
+
+    await wait(() => component.update());
+
+    expect(component.isEmptyRender()).toEqual(true);
   });
 
-  it("doesn't render journal details if no publication info is found", () => {
+  it("does not render if resourceDoi is missing and no related materials", async() => {
     const testItem = {
-      ...item,
+      id: 12000,
+      version: 0,
+      references: [],
       linkbackCollection: {
-        resourceTitle: "test",
-        resourceDoi: "test",
-        resourcePublication: undefined,
+        resourceTitle: "test-title",
+        resourceDoi: null,
+        resourcePublication: "test-journal",
       },
     };
 
-    const tested = mount(<Wrapped item={testItem} />);
-    expect(tested.find(".journal")).toHaveLength(0);
+    const component = mount(
+      <LinkbackWrapped
+        domainData={ { linkBackTitle: null } }
+        item={testItem}
+        mocks={[...getRelatedMaterialsEmptyMock]}
+      />
+    );
+
+    await wait(() => component.update());
+
+    expect(component.isEmptyRender()).toEqual(true);
+  });
+
+  it("does not render if collection is missing and no related materials", async() => {
+    const testItem = {
+      id: 12000,
+      version: 0,
+      references: [],
+      linkbackCollection: null,
+    };
+
+    const component = mount(
+      <LinkbackWrapped
+        domainData={ { linkBackTitle: "My linkback title" } }
+        item={testItem}
+        mocks={[...getRelatedMaterialsEmptyMock]}
+      />
+    );
+
+    await wait(() => component.update());
+
+    expect(component.isEmptyRender()).toEqual(true);
   });
 });
diff --git a/src/pages/item/page/components/relatedMaterials/index.css b/src/pages/item/page/components/relatedMaterials/index.css
new file mode 100644
index 000000000..95dae2306
--- /dev/null
+++ b/src/pages/item/page/components/relatedMaterials/index.css
@@ -0,0 +1,6 @@
+.sectionTitle {
+  font-size: var(--typography-S-fontSize);
+  line-height: var(--typography-S-lineHeight);
+
+  margin-bottom: 0 !important;
+}
diff --git a/src/pages/item/page/components/relatedMaterials/index.jsx b/src/pages/item/page/components/relatedMaterials/index.jsx
new file mode 100644
index 000000000..69f3b3110
--- /dev/null
+++ b/src/pages/item/page/components/relatedMaterials/index.jsx
@@ -0,0 +1,49 @@
+import React, { useContext, useMemo } from "react";
+import getIn from "utils/getIn";
+import { RelatedMaterialsList } from
+  "pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/relatedMaterialsList";
+import { useIdentifiersAndRelationshipsResource } from
+  "pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/components/identifiersAndRelationships";
+import { useRelatedMaterials } from
+  "pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/useRelatedMaterials";
+
+import Context from "../../context";
+
+import style from "./index.css";
+
+
+export function RelatedMaterials(props) {
+  const { item } = useContext(Context);
+  const resources = useIdentifiersAndRelationshipsResource();
+  const variables = useMemo(() => {
+    return {
+      id: getIn(item, "id"),
+      version: getIn(item, "version"),
+      value: getIn(item, "references.items", getIn(item, "references", [])),
+    };
+  }, [item]);
+  const { materials } = useRelatedMaterials(variables, { sort: true, remap: true });
+  const empty = !materials?.length;
+
+  return (
+    <div {...props}>
+      <h2 className={style.sectionTitle}>Related Materials</h2>
+      {empty &&
+      <span data-id="related-materials-empty">
+        No related materials.
+      </span>
+      }
+      {!empty && (
+        <RelatedMaterialsList
+          identifiers={resources.identifiers.data}
+          itemId={item?.id}
+          materials={materials}
+          publicList={true}
+          relationships={resources.relationships.data}
+        />
+      )}
+    </div>
+  );
+}
+
+export default RelatedMaterials;
diff --git a/src/pages/item/page/components/relatedMaterials/index.test.jsx b/src/pages/item/page/components/relatedMaterials/index.test.jsx
new file mode 100644
index 000000000..ee8d756cc
--- /dev/null
+++ b/src/pages/item/page/components/relatedMaterials/index.test.jsx
@@ -0,0 +1,134 @@
+import React, { Component } from "react";
+import { mount } from "enzyme";
+import { MockedProvider } from "@apollo/react-testing";
+import { wait } from "utils/apollo/testing";
+import { getRelatedMaterials } from
+  "pages/account/itemEdit/main/form/formField/figshareFields/relatedMaterials/index.gql";
+
+import Context from "../../context";
+
+import RelatedMaterials from "./index";
+
+
+class RelatedMaterialsWrapped extends Component {
+  render() {
+    // eslint-disable-next-line react/prop-types
+    const { item, mocks } = this.props;
+    const context = { item };
+
+    return (
+      <MockedProvider addTypename={false} mocks={mocks}>
+        <Context.Provider value={context}>
+          <RelatedMaterials />
+        </Context.Provider>
+      </MockedProvider>
+    );
+  }
+}
+
+RelatedMaterials.defaultProps = {
+  mocks: [],
+  item: null,
+};
+
+
+describe("<RelatedMaterials />", () => {
+
+  const getRelatedMaterialsEmptyMock = [{
+    request: { query: getRelatedMaterials, variables: { relatedMaterialIds: [] } },
+    result: { data: { getRelatedMaterials: [] } },
+  }];
+  const getRelatedMaterialsDataMock = [{
+    request: { query: getRelatedMaterials, variables: { relatedMaterialIds: [1, 2, 3] } },
+    result: {
+      data: {
+        getRelatedMaterials: [
+          {
+            id: 1,
+            identifier: "identifier-one",
+            title: "identifier-one-title",
+            relation: "IsMetadataFor",
+            identifierType: "UPC",
+            isLinkout: true,
+            isUrl: false,
+            resolver: "urn:upc:",
+          },
+          {
+            id: 2,
+            identifier: "identifier-two",
+            title: "",
+            relation: "IsCitedBy",
+            identifierType: "DOI",
+            isLinkout: true,
+            isUrl: true,
+            resolver: "https://doi.org/",
+          },
+
+          {
+            id: 3,
+            identifier: "identifier-three",
+            title: "identifier-one-title",
+            relation: "References",
+            identifierType: "DOI",
+            isLinkout: false,
+            isUrl: true,
+            resolver: "https://doi.org/",
+          },
+        ],
+      },
+    },
+  }];
+
+  it("renders correctly", async() => {
+    const testItem = {
+      id: 12000,
+      references: [],
+      linkbackCollection: {
+        resourceTitle: "test-title",
+        resourceDoi: "test-identifier",
+        resourcePublication: "test-journal",
+      },
+    };
+    const tested = mount(<RelatedMaterialsWrapped item={testItem} mocks={[...getRelatedMaterialsEmptyMock]} />);
+    await wait(tested.update());
+
+    expect(tested.isEmptyRender()).toEqual(false);
+    expect(tested.find("h2")).toHaveLength(1);
+  });
+
+  it("renders empty message correctly", async() => {
+    const testItem = {
+      id: 12000,
+      references: [],
+      linkbackCollection: {
+        resourceTitle: "test-title",
+        resourceDoi: "test-identifier",
+        resourcePublication: "test-journal",
+      },
+    };
+
+    const tested = mount(<RelatedMaterialsWrapped item={testItem} mocks={[...getRelatedMaterialsEmptyMock]} />);
+    await wait(tested.update());
+
+    expect(tested.isEmptyRender()).toEqual(false);
+    expect(tested.find("span").text()).toContain("No related materials.");
+  });
+
+  it("renders list message correctly", async() => {
+    const testItem = {
+      id: 12000,
+      references: [1, 2, 3],
+      linkbackCollection: {
+        resourceTitle: "test-title",
+        resourceDoi: "test-identifier",
+        resourcePublication: "test-journal",
+      },
+    };
+
+    const tested = mount(<RelatedMaterialsWrapped item={testItem} mocks={[...getRelatedMaterialsDataMock]} />);
+    await wait(tested.update());
+
+    expect(tested.isEmptyRender()).toEqual(false);
+    expect("li").toHaveLength(2);
+  });
+});
diff --git a/src/shared/ui/forms/index.jsx b/src/shared/ui/forms/index.jsx
new file mode 100644
index 000000000..ba126a720
--- /dev/null
+++ b/src/shared/ui/forms/index.jsx
@@ -0,0 +1,3 @@
+export * from "./utils";
+export * from "./registry";
+export * from "./useForm";
diff --git a/src/shared/ui/forms/initializer.js b/src/shared/ui/forms/initializer.js
new file mode 100644
index 000000000..6c3f736b6
--- /dev/null
+++ b/src/shared/ui/forms/initializer.js
@@ -0,0 +1,59 @@
+import getIn from "utils/getIn";
+
+import { Forms } from "./registry";
+
+
+export function initFormState({ data, persist, schema, validation }) {
+  const newState = JSON.parse(JSON.stringify(schema));
+
+  newState.order.forEach((id) => {
+    if (newState.fields[id] && data?.[id] !== undefined) {
+      const value = getIn(data, `${id}.key`, getIn(data, id));
+      newState.fields[id].value = value;
+      newState.fields[id].initial = value;
+    }
+  });
+
+  newState.id = data?.id ?? "add";
+  newState.namespace = schema.namespace;
+  newState.schema = schema;
+  newState.validation = validation;
+
+  const domain = { schema, data, state: newState };
+
+  newState.formId = newState.id;
+
+  if (schema.id) {
+    newState.formId = schema.id.replaceAll(/({[A-z0-9.]*})/g, (string, templatePath) => {
+      const value = getIn(domain, templatePath.replace(/{|}/, ""));
+
+      return value ?? "";
+    });
+  }
+
+  newState.persist = persist;
+
+  newState.changes = new Set();
+  newState.changed = false;
+  newState.touched = false;
+
+  const hidrate = Forms.registry.get(`form-changes-${newState.formId}`);
+
+  // UPDATE: could be optimised to remove a loop
+  if (persist && hidrate) {
+    const changes = Object.entries(hidrate);
+
+    changes.forEach(([hidratedField, hidratedValue]) => {
+      newState.fields[hidratedField].value = hidratedValue;
+      newState.changes.add(hidratedField);
+    });
+
+    if (changes.length) {
+      newState.changed = true;
+      newState.touched = true;
+      newState.submittable = true;
+    }
+  }
+
+  return newState;
+}
diff --git a/src/shared/ui/forms/reducer.js b/src/shared/ui/forms/reducer.js
new file mode 100644
index 000000000..e84231314
--- /dev/null
+++ b/src/shared/ui/forms/reducer.js
@@ -0,0 +1,77 @@
+import { initFormState } from "./initializer";
+import { Forms } from "./registry";
+
+
+export function formReducer(state, action) {
+  switch (action.type) {
+    case "init":
+      return initFormState({
+        schema: state.schema,
+        validation: state.validation,
+        persist: state.persist,
+        ...action.args,
+      });
+    case "update-field": {
+      const { id, change } = action;
+      const field = state.fields[id];
+
+      if (!field) {
+        return state;
+      }
+
+      const newField = { ...field, ...change };
+
+      const newFields = { ...state.fields, [id]: newField };
+      const definedChange = change.value !== undefined;
+      const valueChanged = (definedChange && field.value !== newField.value);
+      const originalValueChanged = newField.initial !== newField.value;
+      const touched = valueChanged || state.touched;
+      const hasErrors = state.order.some((entryId) => !!newFields[entryId]?.error);
+
+      newField.touched = valueChanged;
+      newField.changed = originalValueChanged;
+
+      const registryKey = `form-changes-${state.formId}`;
+      const changes = Forms.registry.get(registryKey) ?? {};
+
+      if (originalValueChanged) {
+        state.changes.add(id);
+
+        changes[id] = newField.value;
+        Forms.registry.set(`form-changes-${state.formId}`, changes);
+      } else if (definedChange) {
+        state.changes.delete(id);
+
+        delete changes[id];
+        Forms.registry.set(`form-changes-${state.formId}`, changes);
+      }
+
+      return {
+        ...state,
+        touched,
+        changed: state.changes.size > 0,
+        hasErrors,
+        submittable: touched && !hasErrors,
+        fields: newFields,
+      };
+    }
+    case "batch-update": {
+      const { batch } = action;
+      const { order, fields: changed, ...others } = batch;
+
+      const newFields = { ...state.fields };
+
+      order.forEach((id) => {
+        const field = newFields[id];
+        const change = changed[id];
+        newFields[id] = { ...field, ...change };
+      });
+
+      // UPDATE: add registry changes to batch-updates
+
+      return { ...state, ...others, fields: newFields };
+    }
+    default:
+      return state;
+  }
+}
diff --git a/src/shared/ui/forms/registry.jsx b/src/shared/ui/forms/registry.jsx
new file mode 100644
index 000000000..73228df1d
--- /dev/null
+++ b/src/shared/ui/forms/registry.jsx
@@ -0,0 +1,47 @@
+export const Forms = (() => {
+  const subscribers = new Map();
+  const registry = new Map();
+
+  function subscribe(channel, callback) {
+    if (subscribers.has(channel)) {
+      const set = subscribers.get(channel);
+
+      set.add(callback);
+    } else {
+      subscribers.set(channel, new Set([callback]));
+    }
+  }
+
+  function unsubscribe(channel, callback) {
+    if (subscribers.has(channel)) {
+      const set = subscribers.get(channel);
+
+      set.delete(callback);
+    }
+  }
+
+  function publish(channel, message) {
+
+    if (subscribers.has(channel)) {
+      subscribers.get(channel).forEach((listener) => listener(message));
+    }
+  }
+
+  function clear(opts) {
+    const { namespace } = opts;
+
+    if (namespace) {
+      registry.forEach((v, key) => {
+        if (key.includes(namespace)) {
+          registry.delete(key);
+        }
+      });
+    }
+  }
+
+  const module = { subscribe, unsubscribe, publish, registry, subscribers, clear };
+
+  window.Forms = module;
+
+  return module;
+})();
diff --git a/src/shared/ui/forms/useForm.jsx b/src/shared/ui/forms/useForm.jsx
new file mode 100644
index 000000000..19c4d9ae7
--- /dev/null
+++ b/src/shared/ui/forms/useForm.jsx
@@ -0,0 +1,77 @@
+/* eslint-disable no-use-before-define */
+import { useReducer, useRef, useCallback, useEffect } from "react";
+
+import { formReducer } from "./reducer";
+import { initFormState } from "./initializer";
+import { Forms } from "./registry";
+import { validate } from "./utils";
+
+
+export function useForm({ data, persist, schema, validation }) {
+  const [state, dispatch] = useReducer(
+    formReducer,
+    { data, persist, schema, validation },
+    initFormState
+  );
+  const stateRef = useRef(state);
+
+  const resetForm = useCallback((args = {}) => {
+    Forms.registry.delete(`form-changes-${stateRef.current.formId}`);
+
+    dispatch({
+      type: "init",
+      args,
+    });
+  }, [dispatch]);
+
+  const updateField = useCallback((id, change) => {
+    dispatch({
+      type: "update-field",
+      id,
+      change,
+    });
+  }, [dispatch]);
+
+  const batchUpdate = useCallback((batch) => {
+    dispatch({
+      type: "batch-update",
+      batch,
+    });
+  }, [dispatch]);
+
+  const getFieldHtmlId = useCallback((name) => {
+    const { formId } = stateRef.current;
+
+    return `${formId}-field-${name}`;
+  }, [dispatch]);
+
+  const getFieldError = useCallback((parameters) =>
+    validate(parameters, stateRef.current.validation), []);
+
+  useEffect(() => {
+    stateRef.current = state;
+  }, [state, stateRef]);
+
+  useEffect(() => {
+    dispatch({
+      type: "init",
+      args: { data, persist },
+    });
+  }, [data, persist, resetForm]);
+
+  useEffect(() => {
+    Forms.publish(state.formId, { changed: state.changed });
+
+    if (typeof state.changed === "boolean" && !state.changed) {
+      Forms.registry.delete(`form-changes-${state.formId}`);
+    }
+
+  }, [state.formId, state.changed]);
+
+  return {
+    state, dispatch, stateRef,
+    resetForm, updateField, batchUpdate, getFieldHtmlId,
+    getFieldError,
+  };
+}
+
diff --git a/src/shared/ui/forms/utils/index.js b/src/shared/ui/forms/utils/index.js
new file mode 100644
index 000000000..9431d1c55
--- /dev/null
+++ b/src/shared/ui/forms/utils/index.js
@@ -0,0 +1 @@
+export * from "./validate";
diff --git a/src/shared/ui/forms/utils/validate.jsx b/src/shared/ui/forms/utils/validate.jsx
new file mode 100644
index 000000000..d32ece6c4
--- /dev/null
+++ b/src/shared/ui/forms/utils/validate.jsx
@@ -0,0 +1,56 @@
+import getIn from "utils/getIn";
+
+
+export function validate(args, schema) {
+  const { value, name, at, meta } = args;
+
+  const rules = schema[name];
+
+  if (!Array.isArray(rules)) {
+    return undefined;
+  }
+
+  let result = undefined;
+
+  rules.some((rule) => {
+    const { at: applies, fn: execute } = rule;
+    let resolves = true;
+    let event = at;
+
+    // decorate event with additional modifiers
+    // if present in the "at" string, separated by ":" and all meta values are truthy
+    // continue and mark the extra checks as resolved
+    if (at.includes(":")) {
+      const [eventName, ...flags] = at.split(":");
+
+      event = eventName;
+
+      resolves = flags.every((flag) => !!getIn(meta, flag, false));
+    }
+
+    if (!applies.includes(at) || !resolves) {
+      return false;
+    }
+
+
+    const label = getIn(meta, "settings.label", getIn(meta, "label", "Field"));
+    const params = getIn(meta, "parameters", {});
+
+    // validation functions return reversed:
+    // true if invalid, false if valid
+    // NOTE: needs stability - false fails, true resolves
+    const valid = execute(value, params);
+
+    if (valid) {
+      return false;
+    }
+
+    const message = rule.message({ label, parameters: params });
+    const formId = getIn(meta, "formId", "unknown-form");
+    result = { at: event, message, id: `${formId}-error-for-${name}}` };
+
+    return true;
+  });
+
+  return result;
+}
diff --git a/src/shared/ui/visible/index.test.jsx b/src/shared/ui/visible/index.test.jsx
index 6daf4155b..a6096bca9 100644
--- a/src/shared/ui/visible/index.test.jsx
+++ b/src/shared/ui/visible/index.test.jsx
@@ -1,22 +1,25 @@
 import React from "react";
 import { mount } from "enzyme";
+import { act } from "react-dom/test-utils";
 
 import Visible from "./index";
 
 
 describe("<Visible />", () => {
   beforeEach(() => {
-    const mockIntersectionObserver = jest.fn();
-    mockIntersectionObserver.mockReturnValue({ observe: () => false });
-    window.IntersectionObserver = mockIntersectionObserver;
+    window.IntersectionObserversInterface.clearObservers();
   });
 
   it("should render correctly", () => {
     const component = mount(
       <Visible>
-        {() => (<div data-id="visible-wrap">tes is</div>)}
+        {() => (<div data-id="visible-wrap">test is visible</div>)}
       </Visible>);
 
+    act(() => {
+      window.IntersectionObserversInterface.invokeAll({ isIntersecting: true });
+    });
+
     const visibleWrap = component.find("[data-id=\"visible-wrap\"]");
     expect(visibleWrap).toHaveLength(1);
 
diff --git a/src/utils/apollo/testing/index.jsx b/src/utils/apollo/testing/index.jsx
index 4676f2944..e0ef72ce6 100644
--- a/src/utils/apollo/testing/index.jsx
+++ b/src/utils/apollo/testing/index.jsx
@@ -67,3 +67,15 @@ export class MockedProvider extends Component {
     return null;
   }
 }
+
+const DEFAULT_DELAY = 200;
+
+export const wait = (resolution, rejection, delay = DEFAULT_DELAY) => act(() => new Promise((resolve, reject) => {
+  setTimeout(() => {
+    if (rejection !== undefined) {
+      reject(typeof rejection === "function" ? rejection() : rejection);
+    } else {
+      resolve(typeof resolution === "function" ? resolution() : resolution);
+    }
+  }, delay);
+}));
diff --git a/src/utils/apollo/testing/index.test.jsx b/src/utils/apollo/testing/index.test.jsx
index 7c37083ea..bc7b54d23 100644
--- a/src/utils/apollo/testing/index.test.jsx
+++ b/src/utils/apollo/testing/index.test.jsx
@@ -3,7 +3,7 @@ import { mount } from "enzyme";
 import gql from "graphql-tag";
 import { useQuery } from "@apollo/react-hooks";
 
-import { MockedProvider } from "./index";
+import { MockedProvider, wait } from "./index";
 
 
 const query = gql`{ foo, bar }`;
@@ -80,3 +80,21 @@ describe("<MockedProvider />", () => {
     expect(componentData.error).not.toBeUndefined();
   });
 });
+
+
+describe("wait()", () => {
+  it("returns a promise wrapped in act with a provided resolution or rejection", async() => {
+    const base = 10;
+    const resolved = base;
+    const resolver = () => base * 3;
+    const rejection = base * 2;
+    const rejector = () => base * 4;
+    const delay = 300;
+
+    await expect(wait(resolved)).resolves.toBe(resolved);
+    await expect(wait(resolved, rejection)).rejects.toBe(rejection);
+    await expect(wait(resolver)).resolves.toBe(resolver());
+    await expect(wait(resolver, rejector)).rejects.toBe(rejector());
+    await expect(wait(resolved, undefined, delay)).resolves.toBe(resolved);
+  });
+});
diff --git a/src/utils/compact.js b/src/utils/compact.js
new file mode 100644
index 000000000..138827810
--- /dev/null
+++ b/src/utils/compact.js
@@ -0,0 +1,27 @@
+const Filters = {
+  "falsy": (value) => (value !== "") && (value !== undefined) && (value !== null) && (value !== 0),
+  "nullish": (value) => (value !== undefined) && (value !== null),
+};
+
+
+export function compact(collection, hasValue = Filters.falsy) {
+  if (Array.isArray(collection)) {
+    return collection.filter(hasValue);
+  }
+
+  if (typeof collection === "object" && collection !== null) {
+    return Object.entries(collection).reduce(((compacted, [key, value]) => {
+      if (hasValue(value)) {
+        compacted[key] = value;
+      }
+
+      return compacted;
+    }), {});
+  }
+
+  return collection;
+}
+
+compact.filters = Filters;
+
+export default compact;
diff --git a/src/utils/compact.test.js b/src/utils/compact.test.js
new file mode 100644
index 000000000..c69e03729
--- /dev/null
+++ b/src/utils/compact.test.js
@@ -0,0 +1,22 @@
+import { compact } from "./compact";
+
+
+describe("compact(collection)", () => {
+  it("filters out falsy entries from arrays or objects", () => {
+    expect(compact([0, "", null, 10, undefined, "defined"])).toEqual([10, "defined"]);
+    expect(compact({ a: 0, b: "defined", c: null, d: "" })).toEqual({ b: "defined" });
+    expect(compact("")).toEqual("");
+    expect(compact(0)).toEqual(0);
+    expect(compact(1)).toEqual(1);
+    expect(compact(null)).toEqual(null);
+  });
+
+  it("accepts a filter function as a second argument, provides a set in 'compact.filters' ", () => {
+    expect(compact([0, "", null, 10, undefined, "defined"], compact.filters.nullish)).toEqual([0, "", 10, "defined"]);
+    expect(compact(
+      { a: 0, b: "defined", c: null, d: "" },
+      compact.filters.nullish)
+    ).toEqual({ a: 0, b: "defined", d: "" });
+    expect(compact("", compact.filters.nullish)).toEqual("");
+  });
+});
diff --git a/src/utils/registry.js b/src/utils/registry.js
new file mode 100644
index 000000000..77d4f4cfe
--- /dev/null
+++ b/src/utils/registry.js
@@ -0,0 +1,8 @@
+/**
+ * Hold key value references to any modules we want to reference globally
+ * For example mutable ref objects to states in field managers or other modules
+ * we need to query from an external location.
+ */
+export const Registry = new Map();
+
+export default Registry;
