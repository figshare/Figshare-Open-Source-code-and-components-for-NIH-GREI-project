diff --git a/src/pages/item/byResourceDOI/index.gql b/src/pages/item/byResourceDOI/index.gql
index 97c3cc891c..3e9dedf129 100644
--- a/src/pages/item/byResourceDOI/index.gql
+++ b/src/pages/item/byResourceDOI/index.gql
@@ -26,6 +26,7 @@ query item($doi: String!) {
     baseUrl
     createdDate
     description
+    folderStructure
     curationReviewDate
     publishedDate
     modifiedDate
diff --git a/src/pages/item/page/components/viewer/components/controlsBar/index.test.jsx b/src/pages/item/page/components/viewer/components/controlsBar/controlsBar.test.jsx
similarity index 68%
rename from src/pages/item/page/components/viewer/components/controlsBar/index.test.jsx
rename to src/pages/item/page/components/viewer/components/controlsBar/controlsBar.test.jsx
index 44afc0bd74..371987da6d 100644
--- a/src/pages/item/page/components/viewer/components/controlsBar/index.test.jsx
+++ b/src/pages/item/page/components/viewer/components/controlsBar/controlsBar.test.jsx
@@ -61,19 +61,22 @@ jest.mock("shared/ui/highlights/utils", () => {
 
 
 describe("<ViewersSystemControlsBar />", () => {
+  const context = {
+    activeFileIndex: 0,
+    filesCount: 1,
+    item: { id: 1, folderStructure: {} },
+  };
+
+  const loadedFiles = [{
+    previewState: "available",
+    viewerType: "image",
+    virusScanInfo: {},
+  }];
+
   it("renders correctly", () => {
-    const context = {
-      activeFileIndex: 0,
-      files: [{
-        previewState: "available",
-        viewerType: "image",
-        virusScanInfo: {},
-      }],
-      item: { id: 1 },
-    };
     const mounted = mount(
       <Context.Provider value={context}>
-        <Controls />
+        <Controls loadedFiles={loadedFiles} />
       </Context.Provider>
     );
 
@@ -86,8 +89,8 @@ describe("<ViewersSystemControlsBar />", () => {
 
   it("returns null if no files", () => {
     const mounted = mount(
-      <Context.Provider value={ {} }>
-        <Controls />
+      <Context.Provider value={context}>
+        <Controls loadedFiles={[]} />
       </Context.Provider>
     );
 
@@ -95,14 +98,11 @@ describe("<ViewersSystemControlsBar />", () => {
   });
 
   it("returns null for linked file", () => {
-    const context = {
-      activeFileIndex: 0,
-      files: [{ isLinkOnly: true }],
-      item: { id: 1 },
-    };
+    const files = [{ isLinkOnly: true }];
+
     const mounted = mount(
       <Context.Provider value={context}>
-        <Controls />
+        <Controls loadedFiles={files} />
       </Context.Provider>
     );
 
@@ -110,24 +110,25 @@ describe("<ViewersSystemControlsBar />", () => {
   });
 
   it("renders Fullscreen when multiple files are available", () => {
-    const context = {
+    const newContext = {
       activeFileIndex: 0,
       filesCount: 2,
-      files: [{
-        previewState: "available",
-        viewerType: "image",
-        virusScanInfo: {},
-      }, {
-        previewState: "available",
-        viewerType: "image",
-        virusScanInfo: {},
-      }],
-      item: { id: 1 },
+      item: { id: 1, folderStructure: {} },
     };
 
+    const files = [{
+      previewState: "available",
+      viewerType: "image",
+      virusScanInfo: {},
+    }, {
+      previewState: "available",
+      viewerType: "image",
+      virusScanInfo: {},
+    }];
+
     const mounted = mount(
-      <Context.Provider value={context}>
-        <Controls />
+      <Context.Provider value={newContext}>
+        <Controls loadedFiles={files} />
       </Context.Provider>
     );
 
@@ -135,18 +136,15 @@ describe("<ViewersSystemControlsBar />", () => {
   });
 
   it("doesn't render Fullscreen if no active file", () => {
-    const context = {
-      files: [{
-        previewState: "available",
-        viewerType: "image",
-        virusScanInfo: {},
-      }],
-      item: { id: 1 },
+    const newContext = {
+      activeFileIndex: null,
+      filesCount: 1,
+      item: { id: 1, folderStructure: {} },
     };
 
     const mounted = mount(
-      <Context.Provider value={context}>
-        <Controls />
+      <Context.Provider value={newContext}>
+        <Controls loadedFiles={loadedFiles} />
       </Context.Provider>
     );
     expect(mounted.find(Fullscreen)).toHaveLength(0);
@@ -154,17 +152,14 @@ describe("<ViewersSystemControlsBar />", () => {
   });
 
   it("doesn't render Fullscreen if no preview files", () => {
-    const context = {
-      activeFileIndex: 0,
-      files: [{
-        previewState: "",
-        virusScanInfo: { virusFound: true },
-      }],
-      item: { id: 1 },
-    };
+    const files = [{
+      previewState: "",
+      virusScanInfo: { virusFound: true },
+    }];
+
     const mounted = mount(
       <Context.Provider value={context}>
-        <Controls />
+        <Controls loadedFiles={files} />
       </Context.Provider>
     );
 
@@ -172,19 +167,14 @@ describe("<ViewersSystemControlsBar />", () => {
   });
 
   it("renders SearchInfo component", () => {
-    const context = {
-      files: [{
-        previewState: "available",
-        viewerType: "image",
-        virusScanInfo: {},
-      }],
-      item: { id: 1 },
+    const newContext = {
+      item: { id: 1, folderStructure: {} },
       viewMode: VIEW_MODES.thumbnail,
     };
 
     const mounted = mount(
-      <Context.Provider value={context}>
-        <Controls />
+      <Context.Provider value={newContext}>
+        <Controls loadedFiles={loadedFiles} />
       </Context.Provider>
     );
 
@@ -193,19 +183,14 @@ describe("<ViewersSystemControlsBar />", () => {
 
 
   it("doesn't render SearchInfo component if viewMode is single", () => {
-    const context = {
-      files: [{
-        previewState: "available",
-        viewerType: "image",
-        virusScanInfo: {},
-      }],
-      item: { id: 1 },
+    const newContext = {
+      item: { id: 1, folderStructure: {} },
       viewMode: VIEW_MODES.single,
     };
 
     const mounted = mount(
-      <Context.Provider value={context}>
-        <Controls />
+      <Context.Provider value={newContext}>
+        <Controls loadedFiles={loadedFiles} />
       </Context.Provider>
     );
 
diff --git a/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/fileControls.test.jsx b/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/fileControls.test.jsx
new file mode 100644
index 0000000000..3e17a5f23e
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/fileControls.test.jsx
@@ -0,0 +1,137 @@
+import React from "react";
+import { mount } from "enzyme";
+import manager from "services/networkManager";
+import Exclamation from "@figshare/fcl/icons/warning/medium";
+
+import files from "../../../../../../mocks/files";
+import Context from "../../../../context";
+import { VIEW_MODES } from "../../../../constants";
+
+import TestedComponent from "./index";
+
+
+describe("<ViewersGenericFileControls />", () => {
+  const context = {
+    viewMode: VIEW_MODES.single,
+    showFileDetails: undefined,
+    activeFileIndex: 0,
+    files,
+    onShowFileDetails: jest.fn(),
+  };
+
+  const file = context.files[context.activeFileIndex];
+  const props = { file, highlights: [] };
+
+  function mountComponent({ newContext, newProps }) {
+    return mount(
+      <Context.Provider value={ { ...context, ...newContext } }>
+        <TestedComponent {...props} {...newProps} />
+      </Context.Provider>
+    );
+  }
+
+  beforeEach(() => {
+    manager.accountClient.query.mockImplementation(() => new Promise((resolve) => {
+      resolve({
+        data: { session: { account: { id: 1, institutionId: 2 } } },
+        sessionAccountRoles: { isInstitutionAdmin: true },
+      });
+    }));
+  });
+
+  it("renders correctly", () => {
+    let tested = mountComponent({});
+    expect(tested.isEmptyRender()).toEqual(false);
+
+    tested = mountComponent({ newContext: { viewMode: VIEW_MODES.thumbnail } });
+    expect(tested.isEmptyRender()).toEqual(true);
+
+    tested = mountComponent({ newContext: { viewMode: VIEW_MODES.single } });
+    expect(tested.find(".filesDetails")).toHaveLength(0);
+  });
+
+  it("handles show file details when activeFileIndex is not equal with showFileDetails", () => {
+    const tested = mountComponent({});
+
+    const instance = tested.find(TestedComponent).instance();
+
+    instance.onShowFileDetails();
+    expect(context.onShowFileDetails).toHaveBeenCalledWith(context.activeFileIndex);
+  });
+
+  it("handles show file details when activeFileIndex is equal with showFileDetails", () => {
+    const tested = mountComponent({ newContext: { activeFileIndex: 0, showFileDetails: 0 } });
+
+    const instance = tested.find(TestedComponent).instance();
+
+    instance.onShowFileDetails();
+    expect(context.onShowFileDetails).toHaveBeenCalledWith(undefined);
+  });
+
+  it("renders download button correctly", async() => {
+    let testedFiles = [...files];
+    testedFiles[0].downloadUrl = undefined;
+
+    let tested = mountComponent({ newContext: { files: testedFiles } });
+    await tested.setState({ downloadDisabled: false });
+    tested.update();
+    expect(tested.find(Exclamation)).toHaveLength(1);
+
+    testedFiles[0].downloadUrl = "test";
+    testedFiles[0].virusScanInfo = undefined;
+
+    tested = mountComponent({ newContext: { files: testedFiles } });
+    await tested.setState({ downloadDisabled: false });
+    tested.update();
+    expect(tested.find(Exclamation)).toHaveLength(0);
+
+    tested = mountComponent({ newContext: { files: [] } });
+    await tested.setState({ downloadDisabled: false });
+    tested.update();
+    expect(tested.find(Exclamation)).toHaveLength(0);
+
+    testedFiles = [files[0]];
+    testedFiles[0].previewState = "not_suported";
+
+    tested = mountComponent({ newContext: { files: testedFiles } });
+    await tested.setState({ downloadDisabled: false });
+    tested.update();
+    expect(tested.find(Exclamation)).toHaveLength(0);
+  });
+
+  it("handles toggle focus", () => {
+    const testedFiles = [...files];
+    testedFiles[0].virusScanInfo = { virusFound: true };
+
+    const tested = mountComponent({ newContext: { files: testedFiles } });
+    const instance = tested.find(TestedComponent).instance();
+
+    expect(instance.state.focused).toEqual(false);
+    instance.onToggle();
+    expect(instance.state.focused).toEqual(true);
+    instance.onToggle();
+    expect(instance.state.focused).toEqual(false);
+  });
+
+  it("renders file name with highlight", () => {
+    jest.spyOn(document, "referrer", "get").mockReturnValue("http://custom.figshare.test/search/new?q=test");
+
+    const highlights = [{
+      type: "file-highlights",
+      value: {
+        files: [{ pageNo: 5, fileId: 1 }],
+        item: 2,
+      },
+    }];
+
+    const tested = mountComponent({ newProps: { highlights } });
+
+    expect(tested.find(TestedComponent).find("[data-text-highlight=true]")).toHaveLength(1);
+  });
+
+  it("renders file name without highlight", () => {
+    const tested = mountComponent({});
+
+    expect(tested.find(TestedComponent).find("[data-text-highlight=false]")).toHaveLength(1);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/index.jsx b/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/index.jsx
index bde9f96478..0fd5f4c1d1 100644
--- a/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/index.jsx
+++ b/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/index.jsx
@@ -22,9 +22,9 @@ import { getAccountData } from "./index.gql";
 export default class FileControls extends Component {
   static contextType = Context;
 
-  static propTypes = { highlights: PropTypes.array }
+  static propTypes = { file: PropTypes.object, highlights: PropTypes.array }
 
-  static defaultProps = { highlights: [] }
+  static defaultProps = { file: {}, highlights: [] }
 
   state = {
     downloadDisabled: true,
@@ -62,11 +62,10 @@ export default class FileControls extends Component {
   }
 
   renderDownloadButton = () => {
-    const { files, activeFileIndex } = this.context;
     const { downloadDisabled } = this.state;
-    const file = files[activeFileIndex];
+    const { file } = this.props;
 
-    if (!files?.length || (files.length === 1 && file?.previewState !== "available")) {
+    if (!file || !Object.keys(file).length || file?.previewState !== "available") {
       return null;
     }
 
@@ -137,19 +136,12 @@ export default class FileControls extends Component {
   }
 
   renderFileName = () => {
-    const {
-      files,
-      activeFileIndex,
-    } = this.context;
+    const { highlights, file } = this.props;
 
-    const { highlights } = this.props;
-
-    if (!files.length || !files[activeFileIndex]) {
+    if (!file || !Object.keys(file).length) {
       return null;
     }
 
-    const file = files[activeFileIndex];
-
     const { id: fileId, name, extension, size } = file;
     const filename = name.replace(`.${extension}`, "");
 
diff --git a/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/index.test.jsx b/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/index.test.jsx
deleted file mode 100644
index 1dab6721db..0000000000
--- a/src/pages/item/page/components/viewer/components/controlsBar/genericControls/fileControls/index.test.jsx
+++ /dev/null
@@ -1,160 +0,0 @@
-import PropTypes from "prop-types";
-import React, { Component } from "react";
-import { mount } from "enzyme";
-import manager from "services/networkManager";
-import Exclamation from "@figshare/fcl/icons/warning/medium";
-
-import files from "../../../../../../mocks/files";
-import VirusTooltip from "../../../../../virusTooltip";
-import Context from "../../../../context";
-import { VIEW_MODES } from "../../../../constants";
-
-import TestedComponent from "./index";
-
-
-jest.mock("../../../../../virusTooltip");
-jest.mock("@figshare/fcl/toggletip", () => {
-  return {
-    __esModule: true,
-    UncontrolledToggletip: ({ children }) => children(),
-    Trigger: ({ children, ...rest }) => children(rest),
-  };
-});
-
-jest.mock("@figshare/fcl/popup");
-
-
-class Wrapped extends Component {
-  static propTypes = { highlights: PropTypes.array }
-
-  static defaultProps = { highlights: [] }
-
-  render() {
-    const context = {
-      viewMode: VIEW_MODES.single,
-      showFileDetails: undefined,
-      activeFileIndex: 0,
-      files,
-      ...this.props,
-    };
-
-    const componentProps = { highlights: this.props.highlights };
-
-    return (
-      <Context.Provider value={context}>
-        <TestedComponent {...componentProps} />
-      </Context.Provider>
-    );
-  }
-}
-
-describe("<ViewersGenericFileControls />", () => {
-  beforeEach(() => {
-    manager.accountClient.query.mockImplementation(() => new Promise((resolve) => {
-      resolve({
-        data: { session: { account: { id: 1, institutionId: 2 } } },
-        sessionAccountRoles: { isInstitutionAdmin: true },
-      });
-    }));
-  });
-
-  it("renders correctly", () => {
-    const tested = mount(<Wrapped />);
-    expect(tested.isEmptyRender()).toEqual(false);
-
-    tested.setProps({ viewMode: VIEW_MODES.thumbnail });
-    tested.update();
-    expect(tested.isEmptyRender()).toEqual(true);
-
-    tested.setProps({ viewMode: VIEW_MODES.single });
-    tested.update();
-    expect(tested.find(".filesDetails")).toHaveLength(0);
-  });
-
-  it("handles show file details", () => {
-    const onShowFileDetails = jest.fn();
-    const tested = mount(<Wrapped onShowFileDetails={onShowFileDetails} />);
-    const instance = tested.find(TestedComponent).instance();
-
-    instance.onShowFileDetails();
-    expect(onShowFileDetails).toHaveBeenCalledWith(0);
-
-    tested.setProps({ activeFileIndex: 0, showFileDetails: 0 });
-    instance.onShowFileDetails();
-    expect(onShowFileDetails).toHaveBeenCalledWith(undefined);
-  });
-
-  it("renders download button correctly", async() => {
-    let testedFiles = [...files];
-    testedFiles[0].downloadUrl = undefined;
-
-    const tested = mount(<Wrapped files={testedFiles} />);
-
-    await tested.setState({ downloadDisabled: false });
-    tested.update();
-
-    expect(tested.find(Exclamation)).toHaveLength(1);
-
-    testedFiles[0].downloadUrl = "test";
-    testedFiles[0].virusScanInfo = undefined;
-    tested.setProps({ files: testedFiles });
-    expect(tested.find(Exclamation)).toHaveLength(0);
-
-    tested.setProps({ files: [] });
-    expect(tested.find(Exclamation)).toHaveLength(0);
-
-    testedFiles = [files[0]];
-    testedFiles[0].previewState = "not_suported";
-    tested.setProps({ files: testedFiles });
-
-    expect(tested.find(Exclamation)).toHaveLength(0);
-  });
-
-  it("handles file with virus", async() => {
-    const testedFiles = [...files];
-    testedFiles[0].virusScanInfo = { virusFound: true };
-
-    const tested = mount(<Wrapped files={testedFiles} />);
-
-    await tested.setState({ downloadDisabled: false });
-    tested.update();
-
-    expect(tested.find(VirusTooltip)).toHaveLength(1);
-  });
-
-  it("handles toggle focus", () => {
-    const testedFiles = [...files];
-    testedFiles[0].virusScanInfo = { virusFound: true };
-    const tested = mount(<Wrapped files={testedFiles} />).find(TestedComponent).instance();
-
-    expect(tested.state.focused).toEqual(false);
-    tested.onToggle();
-    expect(tested.state.focused).toEqual(true);
-    tested.onToggle();
-    expect(tested.state.focused).toEqual(false);
-  });
-
-  it("renders file name with highlight", () => {
-    jest.spyOn(document, "referrer", "get").mockReturnValue("http://custom.figshare.test/search/new?q=test");
-
-    const highlights = [{
-      type: "file-highlights",
-      value: {
-        files: [{ pageNo: 5, fileId: 1 }],
-        item: 2,
-      },
-    }];
-
-    const tested = mount(<Wrapped highlights={highlights} />).find(TestedComponent);
-
-    expect(tested.find("[data-text-highlight=true]")).toHaveLength(1);
-  });
-
-  it("renders file name without highlight", () => {
-    const highlights = [];
-
-    const tested = mount(<Wrapped highlights={highlights} />).find(TestedComponent);
-
-    expect(tested.find("[data-text-highlight=false]")).toHaveLength(1);
-  });
-});
diff --git a/src/pages/item/page/components/viewer/components/controlsBar/genericControls/pagination/index.jsx b/src/pages/item/page/components/viewer/components/controlsBar/genericControls/pagination/index.jsx
index f1e4c23d66..6b7537e083 100644
--- a/src/pages/item/page/components/viewer/components/controlsBar/genericControls/pagination/index.jsx
+++ b/src/pages/item/page/components/viewer/components/controlsBar/genericControls/pagination/index.jsx
@@ -43,7 +43,9 @@ export default class Pagination extends Component {
         >
           Previous file
         </IconButton>
-
+        <div className={style.pageDisplay}>
+          {activeFileIndex + 1}/{count}
+        </div>
         <IconButton
           Icon={ArrowRight}
           disabled={nextDisabled}
@@ -51,9 +53,6 @@ export default class Pagination extends Component {
         >
           Next file
         </IconButton>
-        <div className={style.pageDisplay}>
-          {activeFileIndex + 1}/{count}
-        </div>
       </div>
     );
   }
diff --git a/src/pages/item/page/components/viewer/components/controlsBar/genericControls/viewerControls/index.jsx b/src/pages/item/page/components/viewer/components/controlsBar/genericControls/viewerControls/index.jsx
index df86d52a55..9a0167e1c7 100644
--- a/src/pages/item/page/components/viewer/components/controlsBar/genericControls/viewerControls/index.jsx
+++ b/src/pages/item/page/components/viewer/components/controlsBar/genericControls/viewerControls/index.jsx
@@ -1,4 +1,5 @@
 import React, { Component } from "react";
+import PropTypes from "prop-types";
 import { Controls as ViewerControls } from "@figshare/viewers";
 
 import Context from "../../../../context";
@@ -8,6 +9,10 @@ import style from "./viewerControls.css";
 
 
 export default class ViewerSpecificControls extends Component {
+  static propTypes = { file: PropTypes.object }
+
+  static defaultProps = { file: {} }
+
   render() {
     return (
       <Context.Consumer>
@@ -16,8 +21,8 @@ export default class ViewerSpecificControls extends Component {
     );
   }
 
-  renderWithContext = ({ viewerControlsProps, activeFileIndex, files, viewMode, onActivate }) => {
-    const file = files[activeFileIndex];
+  renderWithContext = ({ viewerControlsProps, viewMode, onActivate }) => {
+    const { file } = this.props;
 
     let viewerControls = null;
     if ([VIEW_MODES.single].includes(viewMode)) {
diff --git a/src/pages/item/page/components/viewer/components/controlsBar/index.jsx b/src/pages/item/page/components/viewer/components/controlsBar/index.jsx
index 2393a80d61..19b466e3b7 100644
--- a/src/pages/item/page/components/viewer/components/controlsBar/index.jsx
+++ b/src/pages/item/page/components/viewer/components/controlsBar/index.jsx
@@ -1,4 +1,5 @@
 import classnames from "classnames";
+import PropTypes from "prop-types";
 import React, { Component } from "react";
 import { HighlightContext } from "shared/ui/highlights/highlightContext";
 import { getHighlightsCount, isComingFromSearchPage, isNavigatingInPage } from "shared/ui/highlights/utils";
@@ -16,16 +17,23 @@ import style from "./controlsBar.css";
 
 
 export default class Controls extends Component {
+  static propTypes = { loadedFiles: PropTypes.array }
+
+  static defaultProps = { loadedFiles: [] }
+
   static contextType = Context;
 
   render() {
-    const { files, activeFileIndex, fsStatus } = this.context;
+    const { activeFileIndex, fsStatus, item } = this.context;
+    const { loadedFiles } = this.props;
 
-    if (!files?.length) {
+    if (!loadedFiles?.length) {
       return null;
     }
 
-    const file = files[activeFileIndex];
+    const file = item?.folderStructure && Object.keys(item?.folderStructure)?.length ? loadedFiles.find(
+      (el) => el.index === activeFileIndex) : loadedFiles[activeFileIndex];
+
     if (file && file.isLinkOnly) {
       return null;
     }
@@ -41,11 +49,11 @@ export default class Controls extends Component {
             {({ highlights }) => (
               <>
                 {this.renderSearchInfo(highlights)}
-                <FileControls highlights={highlights} />
+                <FileControls file={file} highlights={highlights} />
               </>
             )}
           </HighlightContext.Consumer>
-          <ViewerControls />
+          <ViewerControls file={file} />
           {this.renderFullScreen()}
         </div>
       </div>
@@ -66,14 +74,17 @@ export default class Controls extends Component {
   }
 
   renderFullScreen = () => {
-    const { files, activeFileIndex, filesCount } = this.context;
-    const file = files[activeFileIndex];
+    const { activeFileIndex, filesCount, item } = this.context;
+    const { loadedFiles } = this.props;
+
+    const file = item?.folderStructure && Object.keys(item?.folderStructure)?.length ? loadedFiles.find(
+      (el) => el.index === activeFileIndex) : loadedFiles[activeFileIndex];
 
     if (filesCount > 1) {
       return <Fullscreen />;
     }
 
-    if (!file) {
+    if (!file || !Object.keys(file).length) {
       return null;
     }
 
diff --git a/src/pages/item/page/components/viewer/components/fileDetailsSidebar/index.css b/src/pages/item/page/components/viewer/components/fileView/fileDetailsSidebar/fileDetailsSidebar.css
similarity index 71%
rename from src/pages/item/page/components/viewer/components/fileDetailsSidebar/index.css
rename to src/pages/item/page/components/viewer/components/fileView/fileDetailsSidebar/fileDetailsSidebar.css
index 303c9c4f9d..ad94de11b2 100644
--- a/src/pages/item/page/components/viewer/components/fileDetailsSidebar/index.css
+++ b/src/pages/item/page/components/viewer/components/fileView/fileDetailsSidebar/fileDetailsSidebar.css
@@ -31,67 +31,56 @@
   flex-direction: row;
 
   width: 100%;
-
-  height: calc(10 * var(--gridSize));
-
-  padding: calc(2 * var(--gridSize)) var(--gridSize);
-  flex-shrink: 0;
-  justify-content: center;
+  padding: 0 var(--gridSize);
+  justify-content: flex-start;
   align-items: center;
 
-  color: var(--color-typography-tertiary);
+  color: var(--color-typography-primary);
 }
 
-.content {
-  overflow: hidden;
-  overflow-y: auto;
+.title {
+  font-size: var(--typography-L-fontSize);
+  line-height: var(--typography-L-lineHeight);
 
-  width: 100%;
-  flex: 1;
-  -webkit-overflow-scrolling: touch;
+  padding: calc(2 * var(--gridSize)) var(--gridSize);
 
-  padding: calc(3 * var(--gridSize));
+  color: var(--color-typography-primary);
 }
 
-.contentParagraph {
+.label {
   font-size: var(--typography-S-fontSize);
   line-height: var(--typography-S-lineHeight);
 
-  margin: var(--gridSize) 0;
+  margin-bottom: calc(0.5 * var(--gridSize));
+
+  color: var(--color-typography-tertiary);
 }
 
-.button {
-  position: relative;
+.value {
+  font-size: var(--typography-M-fontSize);
+  line-height: var(--typography-M-lineHeight);
 
-  display: flex;
-  flex-direction: row;
-
-  width: calc(6 * var(--gridSize));
-  height: calc(6 * var(--gridSize));
-  margin-left: 0;
-  flex-shrink: 0;
-  justify-content: center;
-  align-items: center;
+  color: var(--color-typography-primary);
 }
 
-.title {
-  margin: auto;
+.content {
+  overflow: hidden;
+  overflow-y: auto;
+
+  width: 100%;
+  padding: 0 calc(3 * var(--gridSize));
 }
 
-.content p {
+.contentParagraph {
+  font-size: var(--typography-S-fontSize);
+  line-height: var(--typography-S-lineHeight);
+
   display: flex;
   flex-direction: column;
 
-  margin: 0;
-  margin-bottom: calc(3 * var(--gridSize));
+  margin: var(--gridSize) 0 calc(3 * var(--gridSize)) 0;
 
   word-wrap: break-word;
-
-  color: var(--color-typography-primary);
-}
-
-.content p strong {
-  margin-bottom: var(--gridSize);
 }
 
 .downloadButton {
diff --git a/src/pages/item/page/components/viewer/components/fileDetailsSidebar/index.test.jsx b/src/pages/item/page/components/viewer/components/fileView/fileDetailsSidebar/fileDetailsSidebar.test.jsx
similarity index 67%
rename from src/pages/item/page/components/viewer/components/fileDetailsSidebar/index.test.jsx
rename to src/pages/item/page/components/viewer/components/fileView/fileDetailsSidebar/fileDetailsSidebar.test.jsx
index cfa4664e45..0608b09fc4 100644
--- a/src/pages/item/page/components/viewer/components/fileDetailsSidebar/index.test.jsx
+++ b/src/pages/item/page/components/viewer/components/fileView/fileDetailsSidebar/fileDetailsSidebar.test.jsx
@@ -1,15 +1,15 @@
 import React from "react";
 import { mount } from "enzyme";
 
-import files from "../../../../mocks/files";
-import VirusTooltip from "../../../virusTooltip";
-import Context from "../../context";
-import { VIEW_MODES } from "../../constants";
+import files from "../../../../../mocks/files";
+import VirusTooltip from "../../../../virusTooltip";
+import Context from "../../../context";
+import { VIEW_MODES } from "../../../constants";
 
 import TestedComponent from "./index";
 
 
-jest.mock("../../../virusTooltip");
+jest.mock("../../../../virusTooltip");
 jest.mock("@figshare/fcl/toggletip", () => {
   return {
     __esModule: true,
@@ -30,10 +30,10 @@ describe("<ViewersFileDetailsSidebar />", () => {
     viewMode: VIEW_MODES.single,
     activeFileIndex: 0,
     showFileDetails: 0,
-    files,
+    onShowFileDetails: jest.fn(),
   };
 
-  const props = { downloadDisabled: false };
+  const props = { file: files[0], downloadDisabled: false };
 
   it("renders correctly", () => {
     let tested = mountComponent({ context, props });
@@ -43,36 +43,37 @@ describe("<ViewersFileDetailsSidebar />", () => {
     tested.update();
     expect(tested.isEmptyRender()).toEqual(true);
 
-    tested = mountComponent({ context: { ...context, showFileDetails: 0, files: [] }, props });
+    tested = mountComponent(
+      { context: { ...context, showFileDetails: 0 }, props: { downloadDisabled: false, file: {} } }
+    );
     tested.update();
     expect(tested.isEmptyRender()).toEqual(true);
   });
 
   it("handles close", () => {
-    const onShowFileDetails = jest.fn();
-    const tested = mountComponent({ context: { ...context, onShowFileDetails }, props });
+    const tested = mountComponent({ context, props });
 
     tested.find(TestedComponent).instance().onClose();
 
-    expect(onShowFileDetails).toHaveBeenCalledWith(undefined);
+    expect(context.onShowFileDetails).toHaveBeenCalledWith(undefined);
   });
 
   it("renders download button correctly", () => {
     const testedFiles = [...files];
     testedFiles[0].downloadUrl = undefined;
 
-    let tested = mountComponent({ context: { ...context, files: testedFiles }, props });
+    let tested = mountComponent({ context, props: { downloadDisabled: false, file: testedFiles[0] } });
     expect(tested.find("[title=\"Download is not available for this file\"]")).toHaveLength(1);
 
     testedFiles[0].downloadUrl = "test";
     testedFiles[0].virusScanInfo = undefined;
 
-    tested = mountComponent({ context: { ...context, files: testedFiles }, props });
+    tested = mountComponent({ context, props: { downloadDisabled: false, file: testedFiles[0] } });
     expect(tested.find("[title=\"Download is not available for this file\"]")).toHaveLength(0);
   });
 
   it("doesn't render download button if download is disabled", () => {
-    const tested = mountComponent({ context, props: { downloadDisabled: true } });
+    const tested = mountComponent({ context, props: { downloadDisabled: true, file: files[0] } });
 
     expect(tested.find(".downloadButton")).toHaveLength(0);
   });
@@ -81,7 +82,7 @@ describe("<ViewersFileDetailsSidebar />", () => {
     const testedFiles = [...files];
     testedFiles[0].virusScanInfo = { virusFound: true };
 
-    const tested = mountComponent({ context: { ...context, files: testedFiles }, props });
+    const tested = mountComponent({ context, props: { downloadDisabled: false, file: testedFiles[0] } });
     expect(tested.find(VirusTooltip)).toHaveLength(1);
   });
 });
diff --git a/src/pages/item/page/components/viewer/components/fileDetailsSidebar/index.jsx b/src/pages/item/page/components/viewer/components/fileView/fileDetailsSidebar/index.jsx
similarity index 63%
rename from src/pages/item/page/components/viewer/components/fileDetailsSidebar/index.jsx
rename to src/pages/item/page/components/viewer/components/fileView/fileDetailsSidebar/index.jsx
index 5f0f7a6555..56b16be01c 100644
--- a/src/pages/item/page/components/viewer/components/fileDetailsSidebar/index.jsx
+++ b/src/pages/item/page/components/viewer/components/fileView/fileDetailsSidebar/index.jsx
@@ -2,59 +2,67 @@ import classnames from "classnames";
 import PropTypes from "prop-types";
 import React, { Component, Fragment } from "react";
 import { IconButton, GenericButton } from "@figshare/fcl/button";
-import ArrowLeft from "@figshare/fcl/icons/chevron/left/medium";
+import ArrowLeft from "@figshare/fcl/icons/arrow/left/small";
 import Exclamation from "@figshare/fcl/icons/warning/small";
 import { Trigger, UncontrolledToggletip as Toggletip } from "@figshare/fcl/toggletip";
 import filesize from "utils/filesize";
 
-import VirusTooltip from "../../../virusTooltip";
-import Context from "../../context";
+import VirusTooltip from "../../../../virusTooltip";
+import Context from "../../../context";
 
-import style from "./index.css";
+import style from "./fileDetailsSidebar.css";
 
 
 export default class FileDetails extends Component {
   static contextType = Context;
 
-  static propTypes = { downloadDisabled: PropTypes.bool }
+  static propTypes = { downloadDisabled: PropTypes.bool, file: PropTypes.object }
 
-  static defaultProps = { downloadDisabled: true }
+  static defaultProps = { downloadDisabled: true, file: {} }
 
   render() {
-    const { showFileDetails, files } = this.context;
+    const { showFileDetails } = this.context;
+    const { file } = this.props;
 
     if (showFileDetails === undefined) {
       return null;
     }
 
-    const file = files[showFileDetails];
-
-    if (!file) {
+    if (!file || !Object.keys(file).length) {
       return null;
     }
 
+    const fileName = file.name?.substr(0, file.name?.length - file.extension?.length - 1);
+
     return (
       <div className={style.fileDetails}>
         <div className={style.header}>
           <IconButton
             Icon={ArrowLeft}
-            className={style.button}
-            theme="secondary"
+            theme="tertiary"
             onClick={this.onClose}
           >
             Back
           </IconButton>
-          <span className={style.title}>File info</span>
+          <span className={style.title}>File information</span>
         </div>
         <div className={style.content}>
           <p className={style.contentParagraph}>
-            {file.name} ({filesize(file.size).format()})
+            <span className={style.label}>Name</span>
+            <span className={style.value}>{fileName}</span>
           </p>
           <p className={style.contentParagraph}>
-            <strong>MD5 checksum:</strong>
-            <span>{file.suppliedMd5}</span>
+            <span className={style.label}>Format</span>
+            <span className={style.value}>{`.${file.extension}`}</span>
+          </p>
+          <p className={style.contentParagraph}>
+            <span className={style.label}>Size</span>
+            <span className={style.value}>{filesize(file.size).format()}</span>
+          </p>
+          <p className={style.contentParagraph}>
+            <span className={style.label}>MD5 checksum:</span>
+            <span className={style.value}>{file.suppliedMd5}</span>
           </p>
-
           {this.renderDownloadButton()}
         </div>
       </div>
@@ -62,16 +70,14 @@ export default class FileDetails extends Component {
   }
 
   renderDownloadButton = () => {
-    const { showFileDetails, files } = this.context;
-    const { downloadDisabled } = this.props;
-
-    const file = files[showFileDetails];
-    const { downloadUrl, virusScanInfo } = file;
+    const { downloadDisabled, file } = this.props;
 
-    if (downloadDisabled) {
+    if (downloadDisabled || !file || !Object.keys(file).length) {
       return null;
     }
 
+    const { downloadUrl, virusScanInfo } = file;
+
     if (virusScanInfo?.virusFound) {
       return this.renderDownloadWithVirus();
     }
diff --git a/src/pages/item/page/components/viewer/components/fileView/index.css b/src/pages/item/page/components/viewer/components/fileView/fileView.css
similarity index 100%
rename from src/pages/item/page/components/viewer/components/fileView/index.css
rename to src/pages/item/page/components/viewer/components/fileView/fileView.css
diff --git a/src/pages/item/page/components/viewer/components/fileView/fileView.test.jsx b/src/pages/item/page/components/viewer/components/fileView/fileView.test.jsx
new file mode 100644
index 0000000000..8ae1181583
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/fileView/fileView.test.jsx
@@ -0,0 +1,86 @@
+import React from "react";
+import { mount } from "enzyme";
+
+import Context from "../../context";
+import RatingTooltip from "../../../ratingSystem/tooltip";
+import { VIEW_MODES } from "../../constants";
+
+import FileDetails from "./fileDetailsSidebar";
+import FileView from "./index";
+import Sidebar from "./sidebar";
+import View from "./view";
+
+
+jest.mock("../../../ratingSystem/tooltip");
+jest.mock("./sidebar");
+
+describe("<FileView />", () => {
+  const context = {
+    filesCount: 2,
+    fsStatus: true,
+    item: {
+      id: 1,
+      folderStructure: {},
+      virusScanInfo: { virusFound: false },
+    },
+    showFileDetails: undefined,
+    showSideListOnDesktop: false,
+    showSideListOnMobile: true,
+    viewMode: VIEW_MODES.thumbnail,
+    onActivate: () => undefined,
+  };
+
+  const files = [{ id: 1, name: "File 1" }, { id: 2, name: "File 2" }];
+  const props = { downloadDisabled: false, isLoadingFiles: false, loadedFiles: files };
+
+  function mountComponent({ newContext, newProps }) {
+    return mount(
+      <Context.Provider value={ { ...context, ...newContext } }>
+        <FileView {...props} {...newProps} />
+      </Context.Provider>
+    );
+  }
+
+  it("renders correctly", () => {
+    const tested = mountComponent({});
+
+    expect(tested.find(FileView).find(Sidebar)).toHaveLength(1);
+    expect(tested.find(FileView).find(FileDetails)).toHaveLength(1);
+    expect(tested.find(FileView).find(View)).toHaveLength(1);
+  });
+
+  it("handles sidebar visibility", () => {
+    let tested = mountComponent({});
+
+    expect(tested.find(FileView).find(".sidebarHidden")).toHaveLength(1);
+
+    tested = mountComponent({ newContext: { showFileDetails: 1 } });
+
+    expect(tested.find(FileView).find(".sidebarHidden")).toHaveLength(0);
+
+    context.showFileDetails = undefined;
+    context.viewMode = VIEW_MODES.single;
+    context.filesCount = 10;
+    context.showSideListOnMobile = true;
+    context.showSideListOnDesktop = true;
+    tested = mountComponent({
+      newContext: {
+        showFileDetails: undefined,
+        viewMode: VIEW_MODES.single,
+        filesCount: 10,
+        showSideListOnMobile: true,
+        showSideListOnDesktop: true,
+      },
+    });
+
+    expect(tested.find(FileView).find(".sidebarHidden")).toHaveLength(0);
+  });
+
+  it("renders ratingTooltip correctly", () => {
+    let tested = mountComponent({ newContext: { fsStatus: false } });
+    expect(tested.find(FileView).find(RatingTooltip)).toHaveLength(1);
+
+    tested = mountComponent({ newContext: { fsStatus: true } });
+    expect(tested.find(FileView).find(RatingTooltip)).toHaveLength(0);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/fileView/index.jsx b/src/pages/item/page/components/viewer/components/fileView/index.jsx
index 4256df63a2..d0152e29e1 100644
--- a/src/pages/item/page/components/viewer/components/fileView/index.jsx
+++ b/src/pages/item/page/components/viewer/components/fileView/index.jsx
@@ -2,27 +2,35 @@ import classnames from "classnames";
 import PropTypes from "prop-types";
 import React, { Component } from "react";
 
-import FileDetails from "../fileDetailsSidebar";
-import Sidebar from "../sidebar";
 import Context from "../../context";
 import { VIEW_MODES } from "../../constants";
 import RatingTooltip from "../../../ratingSystem/tooltip";
 
-
+import FileDetails from "./fileDetailsSidebar";
+import Sidebar from "./sidebar";
 import View from "./view";
-import style from "./index.css";
+import style from "./fileView.css";
 
 
-export default class FileViewContainer extends Component {
-  static contextType = Context;
+export default class FileView extends Component {
+  static propTypes = {
+    downloadDisabled: PropTypes.bool,
+    isLoadingFiles: PropTypes.bool,
+    loadedFiles: PropTypes.array,
+  }
 
-  static propTypes = { downloadDisabled: PropTypes.bool }
+  static defaultProps = {
+    downloadDisabled: true,
+    isLoadingFiles: false,
+    loadedFiles: [],
+  }
 
-  static defaultProps = { downloadDisabled: true }
+  static contextType = Context;
 
   render() {
     const {
       fsStatus,
+      item,
       showFileDetails,
       viewMode,
       showSideListOnDesktop,
@@ -30,7 +38,7 @@ export default class FileViewContainer extends Component {
       filesCount,
     } = this.context;
 
-    const { downloadDisabled } = this.props;
+    const { downloadDisabled, isLoadingFiles, loadedFiles } = this.props;
 
     let sidebarVisible = false;
 
@@ -49,14 +57,17 @@ export default class FileViewContainer extends Component {
       [style.sidebarHiddenMobile]: !showSideListOnMobile && showFileDetails === undefined,
     }];
 
+    const file = item?.folderStructure && Object.keys(item?.folderStructure)?.length ? loadedFiles.find(
+      (el) => el.index === showFileDetails) : loadedFiles[showFileDetails];
+
     return (
       <div className={classnames(style.wrapper, { [style.fileViewFullscreen]: fsStatus })}>
         <div className={classnames(sidebarClassName)}>
-          <Sidebar />
-          <FileDetails downloadDisabled={downloadDisabled} />
+          <Sidebar isLoadingFiles={isLoadingFiles} loadedFiles={loadedFiles} />
+          <FileDetails downloadDisabled={downloadDisabled} file={file} />
         </div>
         <div className={style.fileViewContainer}>
-          <View downloadDisabled={downloadDisabled} />
+          <View downloadDisabled={downloadDisabled} loadedFiles={loadedFiles} />
         </div>
         {this.renderRatingTooltip()}
       </div>
diff --git a/src/pages/item/page/components/viewer/components/fileView/index.test.jsx b/src/pages/item/page/components/viewer/components/fileView/index.test.jsx
deleted file mode 100644
index 6b15e36ee8..0000000000
--- a/src/pages/item/page/components/viewer/components/fileView/index.test.jsx
+++ /dev/null
@@ -1,83 +0,0 @@
-import React from "react";
-import { mount } from "enzyme";
-
-
-import FileDetails from "../fileDetailsSidebar";
-import Sidebar from "../sidebar";
-import Context from "../../context";
-import RatingTooltip from "../../../ratingSystem/tooltip";
-import { VIEW_MODES } from "../../constants";
-
-import View from "./view";
-import TestedComponent from "./index";
-
-
-jest.mock("../../../ratingSystem/tooltip");
-jest.mock("../fileDetailsSidebar");
-jest.mock("../sidebar");
-jest.mock("./view");
-
-describe("<FileView />", () => {
-  it("renders correctly", () => {
-    const context = { fsStatus: true };
-    const testedComponent = mount(
-      <Context.Provider value={context}>
-        <TestedComponent />
-      </Context.Provider>
-    );
-
-    expect(testedComponent.find(FileDetails)).toHaveLength(1);
-    expect(testedComponent.find(Sidebar)).toHaveLength(1);
-    expect(testedComponent.find(View)).toHaveLength(1);
-  });
-
-  it("handles sidebar visibility", () => {
-    const context = { fsStatus: true };
-
-    let testedComponent = mount(
-      <Context.Provider value={context}>
-        <TestedComponent />
-      </Context.Provider>
-    );
-
-    expect(testedComponent.find(".sidebarHidden")).toHaveLength(1);
-
-    context.showFileDetails = 1;
-    testedComponent = mount(
-      <Context.Provider value={context}>
-        <TestedComponent />
-      </Context.Provider>
-    );
-    expect(testedComponent.find(".sidebarHidden")).toHaveLength(0);
-
-    context.showFileDetails = undefined;
-    context.viewMode = VIEW_MODES.single;
-    context.filesCount = 10;
-    context.showSideListOnMobile = true;
-    context.showSideListOnDesktop = true;
-    testedComponent = mount(
-      <Context.Provider value={context}>
-        <TestedComponent />
-      </Context.Provider>
-    );
-    expect(testedComponent.find(".sidebarHidden")).toHaveLength(0);
-  });
-
-  it("renders ratingTooltip correctly", () => {
-    const context = { fsStatus: false };
-    let testedComponent = mount(
-      <Context.Provider value={context}>
-        <TestedComponent />
-      </Context.Provider>
-    );
-    expect(testedComponent.find(RatingTooltip)).toHaveLength(1);
-
-    context.fsStatus = true;
-    testedComponent = mount(
-      <Context.Provider value={context}>
-        <TestedComponent />
-      </Context.Provider>
-    );
-    expect(testedComponent.find(RatingTooltip)).toHaveLength(0);
-  });
-});
diff --git a/src/pages/item/page/components/viewer/components/sidebar/components/file/index.css b/src/pages/item/page/components/viewer/components/fileView/sidebar/components/file/file.css
similarity index 100%
rename from src/pages/item/page/components/viewer/components/sidebar/components/file/index.css
rename to src/pages/item/page/components/viewer/components/fileView/sidebar/components/file/file.css
diff --git a/src/pages/item/page/components/viewer/components/sidebar/components/file/index.test.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/components/file/file.test.jsx
similarity index 100%
rename from src/pages/item/page/components/viewer/components/sidebar/components/file/index.test.jsx
rename to src/pages/item/page/components/viewer/components/fileView/sidebar/components/file/file.test.jsx
diff --git a/src/pages/item/page/components/viewer/components/sidebar/components/file/index.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/components/file/index.jsx
similarity index 99%
rename from src/pages/item/page/components/viewer/components/sidebar/components/file/index.jsx
rename to src/pages/item/page/components/viewer/components/fileView/sidebar/components/file/index.jsx
index b9e77efe5e..897083079e 100644
--- a/src/pages/item/page/components/viewer/components/sidebar/components/file/index.jsx
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/components/file/index.jsx
@@ -8,7 +8,7 @@ import { isPartOfItemHighlight } from "shared/ui/highlights/utils";
 import filesize from "utils/filesize";
 
 
-import style from "./index.css";
+import style from "./file.css";
 
 
 export default class File extends Component {
diff --git a/src/pages/item/page/components/viewer/components/sidebar/components/fileLoading/index.css b/src/pages/item/page/components/viewer/components/fileView/sidebar/components/fileLoading/fileLoading.css
similarity index 100%
rename from src/pages/item/page/components/viewer/components/sidebar/components/fileLoading/index.css
rename to src/pages/item/page/components/viewer/components/fileView/sidebar/components/fileLoading/fileLoading.css
diff --git a/src/pages/item/page/components/viewer/components/sidebar/components/fileLoading/index.test.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/components/fileLoading/fileLoading.test.jsx
similarity index 100%
rename from src/pages/item/page/components/viewer/components/sidebar/components/fileLoading/index.test.jsx
rename to src/pages/item/page/components/viewer/components/fileView/sidebar/components/fileLoading/fileLoading.test.jsx
diff --git a/src/pages/item/page/components/viewer/components/sidebar/components/fileLoading/index.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/components/fileLoading/index.jsx
similarity index 92%
rename from src/pages/item/page/components/viewer/components/sidebar/components/fileLoading/index.jsx
rename to src/pages/item/page/components/viewer/components/fileView/sidebar/components/fileLoading/index.jsx
index bb20d79d9e..caec89d751 100644
--- a/src/pages/item/page/components/viewer/components/sidebar/components/fileLoading/index.jsx
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/components/fileLoading/index.jsx
@@ -1,7 +1,7 @@
 import classnames from "classnames";
 import React, { Component } from "react";
 
-import styles from "./index.css";
+import styles from "./fileLoading.css";
 
 
 export default class FileLoading extends Component {
diff --git a/src/pages/item/page/components/viewer/components/sidebar/bar.css b/src/pages/item/page/components/viewer/components/fileView/sidebar/filesOnlySidebar/filesOnlySidebar.css
similarity index 93%
rename from src/pages/item/page/components/viewer/components/sidebar/bar.css
rename to src/pages/item/page/components/viewer/components/fileView/sidebar/filesOnlySidebar/filesOnlySidebar.css
index 582c291953..ab0f3f84bd 100644
--- a/src/pages/item/page/components/viewer/components/sidebar/bar.css
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/filesOnlySidebar/filesOnlySidebar.css
@@ -1,4 +1,3 @@
-/* stylelint-disable a11y/no-display-none */
 .sidebar {
   display: none;
 
@@ -79,13 +78,7 @@
 }
 
 .mobile {
-  top: 0;
-  right: 0;
-  bottom: 0;
-  left: 0;
-
   display: none;
-
   overflow: auto;
 
   width: 100%;
diff --git a/src/pages/item/page/components/viewer/components/sidebar/bar.test.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/filesOnlySidebar/filesOnlySidebar.test.jsx
similarity index 95%
rename from src/pages/item/page/components/viewer/components/sidebar/bar.test.jsx
rename to src/pages/item/page/components/viewer/components/fileView/sidebar/filesOnlySidebar/filesOnlySidebar.test.jsx
index df66bf1724..4749959056 100644
--- a/src/pages/item/page/components/viewer/components/sidebar/bar.test.jsx
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/filesOnlySidebar/filesOnlySidebar.test.jsx
@@ -1,13 +1,13 @@
 import React, { Component } from "react";
 import { mount } from "enzyme";
 
-import files from "../../../../mocks/files";
-import Context from "../../context";
-import { DISPLAY_MODE, VIEW_MODES } from "../../constants";
+import files from "../../../../../../mocks/files";
+import Context from "../../../../context";
+import { DISPLAY_MODE, VIEW_MODES } from "../../../../constants";
+import File from "../components/file";
+import FileLoading from "../components/fileLoading";
 
-import File from "./components/file";
-import FileLoading from "./components/fileLoading";
-import TestedComponent from "./bar";
+import TestedComponent from ".";
 
 
 jest.mock("@figshare/viewers/viewer", () => {
@@ -17,8 +17,8 @@ jest.mock("@figshare/viewers/viewer", () => {
   };
 });
 
-jest.mock("./components/file");
-jest.mock("./components/fileLoading");
+jest.mock("../components/file");
+jest.mock("../components/fileLoading");
 
 const itemsPerPage = 20;
 
@@ -50,7 +50,7 @@ class Wrapped extends Component {
   }
 }
 
-describe("<ViewersSidebarList />", () => {
+describe("<FilesOnlySidebar />", () => {
   const ORIGINAL_ENV = process.env;
 
   beforeEach(() => {
diff --git a/src/pages/item/page/components/viewer/components/sidebar/bar.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/filesOnlySidebar/index.jsx
similarity index 94%
rename from src/pages/item/page/components/viewer/components/sidebar/bar.jsx
rename to src/pages/item/page/components/viewer/components/fileView/sidebar/filesOnlySidebar/index.jsx
index 8d18ec40f8..f961c33eda 100644
--- a/src/pages/item/page/components/viewer/components/sidebar/bar.jsx
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/filesOnlySidebar/index.jsx
@@ -6,18 +6,18 @@ import ListIcon from "@figshare/fcl/icons/list/small";
 import { HighlightContext } from "shared/ui/highlights/highlightContext";
 
 
-import { VIEW_MODES, DISPLAY_MODE } from "../../constants";
-import Context from "../../context";
+import { VIEW_MODES, DISPLAY_MODE } from "../../../../constants";
+import Context from "../../../../context";
+import File from "../components/file";
+import FileLoading from "../components/fileLoading";
 
-import File from "./components/file";
-import FileLoading from "./components/fileLoading";
-import style from "./bar.css";
+import style from "./filesOnlySidebar.css";
 
 
 const SCROLL_THRESHOLD = 100;
+const BREAK_POINT = 900;
 
-
-export default class Sidebar extends Component {
+export default class FilesOnlySidebar extends Component {
   static propTypes = { storageKey: PropTypes.string.isRequired }
   static contextType = Context;
 
@@ -249,9 +249,5 @@ export default class Sidebar extends Component {
     target.querySelector("button:first-of-type").focus();
   }
 
-  computeIsDesktop = () => {
-    const BREAK_POINT = 900;
-
-    return document.body.clientWidth > BREAK_POINT;
-  }
+  computeIsDesktop = () => document.body.clientWidth > BREAK_POINT;
 }
diff --git a/src/pages/item/page/components/viewer/components/fileView/sidebar/folderStructureSidebar/folderStructureSidebar.css b/src/pages/item/page/components/viewer/components/fileView/sidebar/folderStructureSidebar/folderStructureSidebar.css
new file mode 100644
index 0000000000..f2ef524e3a
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/folderStructureSidebar/folderStructureSidebar.css
@@ -0,0 +1,168 @@
+.sidebar {
+  display: none;
+
+  overflow: hidden;
+  overflow-y: auto;
+  flex-direction: column;
+
+  width: calc(70 * var(--gridSize));
+  height: 100%;
+
+  border-right: 1px solid var(--color-border-primary);
+  background: var(--color-layout-primary-background);
+
+  @media (max-width: 1600px) {
+    width: calc(60 * var(--gridSize));
+  }
+
+  @media (max-width: 1200px) {
+    width: calc(50 * var(--gridSize));
+  }
+
+  @media (max-width: 900px) {
+    padding-bottom: calc(4 * var(--gridSize));
+  }
+}
+
+.content {
+  display: flex;
+  flex-direction: column;
+  justify-content: space-between;
+
+  height: 100%;
+}
+
+.structureList {
+  padding-left: calc(2 * var(--gridSize));
+
+  list-style-type: none;
+}
+
+.title {
+  font-size: var(--typography-L-fontSize);
+  line-height: var(--typography-L-lineHeight);
+
+  display: flex;
+  justify-content: flex-start;
+  align-items: center;
+
+  padding: calc(2 * var(--gridSize)) calc(3 * var(--gridSize));
+
+  color: var(--color-typography-primary);
+}
+
+.directoryRow {
+  display: flex;
+  flex-direction: row;
+  align-items: center;
+
+  width: 100%;
+  padding: var(--gridSize) calc(2 * var(--gridSize)) var(--gridSize) 0;
+
+  cursor: default;
+}
+
+.fileButton {
+  display: flex;
+  flex-direction: column;
+  align-items: flex-start;
+
+  width: 100%;
+  padding: var(--gridSize) calc(2 * var(--gridSize)) var(--gridSize) calc(2 * var(--gridSize));
+
+  @media (max-width: 1023px) {
+    margin-left: calc(2 * var(--gridSize));
+  }
+}
+
+.directoryRow:hover,
+.directoryRow:focus,
+.fileButton:hover,
+.fileButton:focus {
+  text-decoration: none;
+
+  background-color: var(--color-layout-secondary-background);
+}
+
+.name {
+  color: var(--color-typography-primary);
+}
+
+.fileSize {
+  color: var(--color-typography-tertiary);
+}
+
+.children {
+  margin-left: calc(2 * var(--gridSize));
+}
+
+.loader {
+  width: calc(3 * var(--gridSize));
+  height: calc(3 * var(--gridSize));
+  margin-left: calc(4 * var(--gridSize));
+}
+
+.error {
+  font-weight: bold;
+
+  position: relative;
+
+  display: flex;
+  flex-direction: row;
+
+  width: 100%;
+
+  height: calc(8 * var(--gridSize));
+  margin-bottom: calc(2 * var(--gridSize));
+  margin-left: calc(2 * var(--gridSize));
+
+  text-align: center;
+
+  background: var(--color-layout-error-background);
+  justify-content: center;
+  align-items: center;
+  flex-shrink: 0;
+}
+
+.errorButton {
+  font-weight: bold;
+
+  margin-left: calc(3 * var(--gridSize));
+}
+
+.warning {
+  display: flex;
+  flex-direction: row;
+  align-items: center;
+
+  width: 100%;
+  padding: var(--gridSize) calc(2 * var(--gridSize));
+
+  background-color: var(--color-layout-warning-background);
+}
+
+.warningIcon {
+  margin-right: var(--gridSize);
+  fill: var(--color-icon-warning);
+}
+
+.desktop {
+  display: flex;
+}
+
+.mobile {
+  display: none;
+  overflow: auto;
+
+  width: 100%;
+}
+
+@media all and (max-width: 900px) {
+  .desktop {
+    display: none;
+  }
+
+  .mobile {
+    display: flex;
+  }
+}
diff --git a/src/pages/item/page/components/viewer/components/fileView/sidebar/folderStructureSidebar/folderStructureSidebar.test.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/folderStructureSidebar/folderStructureSidebar.test.jsx
new file mode 100644
index 0000000000..d1af814ed1
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/folderStructureSidebar/folderStructureSidebar.test.jsx
@@ -0,0 +1,243 @@
+import React from "react";
+import { mount } from "enzyme";
+import FigshareLoader from "@figshare/fcl/icons/figshare/logo";
+
+import Context from "../../../../context";
+import { VIEW_MODES } from "../../../../constants";
+import { getFileIndexById } from "../../../../utils";
+
+import FolderStructureSidebar from "./index";
+
+
+describe("<FolderStructureSidebar />", () => {
+  const context = {
+    error: false,
+    filesError: false,
+    item: { id: 1, folderStructure: { 100: "dir1", 101: "dir1/dir2", 102: "", 103: "dir3" } },
+    levelHierarchy: [],
+    showFileDetails: undefined,
+    showSideListOnDesktop: true,
+    showSideListOnMobile: false,
+    viewMode: VIEW_MODES.single,
+    onChangeFile: jest.fn(),
+    onChangeParentDirectory: jest.fn(),
+    onLoadMoreFiles: jest.fn(),
+    onToggleSideListView: jest.fn(),
+    setSideListVisibilityKey: jest.fn(),
+  };
+
+  const props = {
+    isLoadingFiles: false,
+    loadedFiles: [
+      {
+        id: 102,
+        name: "test.jpg",
+        status: "available",
+        extension: "jpg",
+        size: 74237,
+        viewerType: "image",
+        virusScanInfo: { virusFound: false },
+        md5: "md5",
+        isLinkOnly: false,
+        suppliedMd5: "md5",
+        previewState: "available",
+        downloadUrl: "download/files/102",
+        index: 2,
+        parentPath: "",
+      },
+    ],
+    storageKey: "testKey",
+  };
+
+  function mountComponent({ newContext, newProps }) {
+    return mount(
+      <Context.Provider value={ { ...context, ...newContext } }>
+        <FolderStructureSidebar {...props} {...newProps} />
+      </Context.Provider>
+    );
+  }
+
+  it("renders null when view mode is not single", () => {
+    const tested = mountComponent({ newContext: { viewMode: VIEW_MODES.thumbnail } });
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("renders null when file details sidebar is activated", () => {
+    const tested = mountComponent({ newContext: { showFileDetails: true } });
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("renders null when sidebar is hidden", () => {
+    const tested = mountComponent({ newContext: { showSideListOnDesktop: false, showSideListOnMobile: false } });
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("renders desktop sidebar", () => {
+    process.env.BROWSER = true;
+
+    Object.defineProperty(window.document.body, "clientWidth", {
+      writable: true,
+      value: 901,
+    });
+
+    const tested = mountComponent({ newContext: { showSideListOnDesktop: true, showSideListOnMobile: false } });
+    expect(tested.find(".desktop")).toHaveLength(1);
+    expect(tested.find(".mobile")).toHaveLength(0);
+  });
+
+  it("renders mobile sidebar", () => {
+    process.env.BROWSER = true;
+
+    Object.defineProperty(window.document.body, "clientWidth", {
+      writable: true,
+      value: 800,
+    });
+
+    const tested = mountComponent({ newContext: { showSideListOnDesktop: false, showSideListOnMobile: true } });
+    expect(tested.find(".desktop")).toHaveLength(0);
+    expect(tested.find(".mobile")).toHaveLength(1);
+  });
+
+  it("handles render when there are only files", () => {
+    const tested = mountComponent({});
+
+    const renderFile = jest.spyOn(tested.instance(), "renderFile");
+    const renderFolder = jest.spyOn(tested.instance(), "renderFolder");
+    const renderChildren = jest.spyOn(tested.instance(), "renderChildren");
+
+
+    tested.setState({ folderStructureTree: ["102"] });
+    tested.update();
+
+    expect(renderFile).toHaveBeenCalledWith("102");
+    expect(renderFolder).not.toHaveBeenCalled();
+    expect(renderChildren).not.toHaveBeenCalled();
+  });
+
+  it("handles render when there is a directory with file", () => {
+    const tested = mountComponent({});
+
+    const renderFile = jest.spyOn(tested.instance(), "renderFile");
+    const renderFolder = jest.spyOn(tested.instance(), "renderFolder");
+    const renderChildren = jest.spyOn(tested.instance(), "renderChildren");
+
+    const directory = { name: "dir1", isDirectory: true, completePath: "dir1", children: ["102"] };
+    tested.setState({ folderStructureTree: [directory, "102"] });
+    tested.update();
+
+    expect(renderFile).toHaveBeenCalledWith("102");
+    expect(renderFolder).toHaveBeenCalledWith(directory);
+    expect(renderChildren).toHaveBeenCalledWith(directory);
+  });
+
+  it("handles render when there is only one directory with no file", () => {
+    const tested = mountComponent({});
+
+    const renderFile = jest.spyOn(tested.instance(), "renderFile");
+    const renderFolder = jest.spyOn(tested.instance(), "renderFolder");
+    const renderChildren = jest.spyOn(tested.instance(), "renderChildren");
+
+    const directory = { name: "dir1", isDirectory: true, completePath: "dir1", children: [] };
+    tested.setState({ folderStructureTree: [directory] });
+    tested.update();
+
+    expect(renderFile).not.toHaveBeenCalled();
+    expect(renderFolder).toHaveBeenCalledWith(directory);
+    expect(renderChildren).not.toHaveBeenCalled();
+  });
+
+  it("renders children when showChildren is true", () => {
+    const tested = mountComponent({});
+
+    const directory = { name: "dir1", isDirectory: true, completePath: "dir1", children: ["102"] };
+    tested.setState({ folderStructureTree: [directory, "102"], showChildren: { [directory.completePath]: true } });
+    tested.update();
+
+    expect(tested.find(".children")).toHaveLength(1);
+  });
+
+  it("renders no children when showChildren is false", () => {
+    const tested = mountComponent({});
+
+    const directory = { name: "dir1", isDirectory: true, completePath: "dir1", children: ["102"] };
+    tested.setState({ folderStructureTree: [directory, "102"], showChildren: { [directory.completePath]: false } });
+    tested.update();
+
+    expect(tested.find(".children")).toHaveLength(0);
+  });
+
+  it("renders loading when showLoading is true", () => {
+    const tested = mountComponent({});
+
+    const directory = { name: "dir1", isDirectory: true, completePath: "dir1", children: ["102"] };
+    tested.setState({
+      folderStructureTree: [directory, "102"],
+      showChildren: { [directory.completePath]: true },
+      showLoading: { [directory.completePath]: true },
+    });
+    tested.update();
+
+    expect(tested.find(FigshareLoader)).toHaveLength(1);
+  });
+
+  it("renders no loading when showLoading is false", () => {
+    const tested = mountComponent({});
+
+    const directory = { name: "dir1", isDirectory: true, completePath: "dir1", children: ["102"] };
+    tested.setState({
+      folderStructureTree: [directory, "102"],
+      showChildren: { [directory.completePath]: true },
+      showLoading: { [directory.completePath]: false },
+    });
+    tested.update();
+
+    expect(tested.find(FigshareLoader)).toHaveLength(0);
+  });
+
+  it("handles on change file based on index", () => {
+    const tested = mountComponent({});
+
+    tested.instance().onChangeFile("102")({ preventDefault: () => null });
+    expect(context.onChangeFile).toHaveBeenCalledWith(getFileIndexById("102", context.item.folderStructure));
+  });
+
+  it("handles on resize for mobile", () => {
+    process.env.BROWSER = true;
+
+    Object.defineProperty(window.document.body, "clientWidth", {
+      writable: true,
+      value: 800,
+    });
+
+    const tested = mountComponent({});
+
+    tested.setState({ isDesktop: false });
+    tested.update();
+
+    tested.instance().onResize({ preventDefault: () => null });
+    expect(context.onToggleSideListView).not.toHaveBeenCalled();
+
+    tested.setState({ isDesktop: true });
+    tested.update();
+
+    tested.instance().onResize({ preventDefault: () => null });
+    expect(context.onToggleSideListView).not.toHaveBeenCalled();
+  });
+
+  it("handles on resize for desktop", () => {
+    process.env.BROWSER = true;
+
+    Object.defineProperty(window.document.body, "clientWidth", {
+      writable: true,
+      value: 901,
+    });
+
+    const tested = mountComponent({});
+
+    tested.setState({ isDesktop: false });
+    tested.update();
+
+    tested.instance().onResize({ preventDefault: () => null });
+    expect(context.onToggleSideListView).toHaveBeenCalled();
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/fileView/sidebar/folderStructureSidebar/index.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/folderStructureSidebar/index.jsx
new file mode 100644
index 0000000000..2e99c76534
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/folderStructureSidebar/index.jsx
@@ -0,0 +1,271 @@
+import React, { Component } from "react";
+import classnames from "classnames";
+import PropTypes from "prop-types";
+import filesize from "utils/filesize";
+import { Button, IconButton, GenericButton } from "@figshare/fcl/button";
+import ArrowDown from "@figshare/fcl/icons/chevron/down/small";
+import ArrowUp from "@figshare/fcl/icons/chevron/up/small";
+import FigshareLoader from "@figshare/fcl/icons/figshare/logo";
+import InfoIcon from "@figshare/fcl/icons/warning/medium";
+
+import { VIEW_MODES, DISPLAY_MODE } from "../../../../constants";
+import { getFileIndexById, mapFolderStructure } from "../../../../utils";
+import Context from "../../../../context";
+
+import style from "./folderStructureSidebar.css";
+
+
+const BREAK_POINT = 900;
+const MAX_LEVEL = 10;
+
+
+export default class FolderStructureSidebar extends Component {
+  static propTypes = {
+    storageKey: PropTypes.string.isRequired,
+    isLoadingFiles: PropTypes.bool,
+    loadedFiles: PropTypes.array,
+  }
+
+  static defaultProps = { isLoadingFiles: false, loadedFiles: [] }
+
+  static contextType = Context;
+
+  constructor(...args) {
+    super(...args);
+
+    let computedIsDesktop = true;
+
+    if (process.env.BROWSER) {
+      computedIsDesktop = this.computeIsDesktop();
+    }
+
+    this.state = {
+      folderStructureTree: mapFolderStructure(this.context.item?.folderStructure),
+      isDesktop: computedIsDesktop,
+      showChildren: {},
+      showLoading: {},
+      lastToggledDirId: "",
+      levelLimitReached: 0,
+    };
+  }
+
+  componentDidMount() {
+    window.addEventListener("resize", this.onResize);
+    this.context.setSideListVisibilityKey(this.props.storageKey);
+  }
+
+  componentDidUpdate(prevProps, prevState) {
+    (() => {
+      const { lastToggledDirId } = this.state;
+
+      if (this.props.isLoadingFiles !== prevProps.isLoadingFiles) {
+        this.setState({
+          showLoading: {
+            ...prevState.showLoading,
+            [lastToggledDirId]:
+              prevState.showLoading?.[lastToggledDirId] ? !prevState.showLoading?.[lastToggledDirId] : true,
+          },
+        });
+      }
+    })();
+  }
+
+  componentWillUnmount() {
+    window.removeEventListener("resize", this.onResize);
+  }
+
+  render() {
+    const {
+      showFileDetails,
+      showSideListOnDesktop,
+      showSideListOnMobile,
+      viewMode,
+    } = this.context;
+    const { folderStructureTree, levelLimitReached } = this.state;
+
+    const hideSideList = !showSideListOnDesktop && !showSideListOnMobile;
+    const _showFileDetails = showFileDetails !== undefined;
+
+    if (viewMode !== VIEW_MODES.single || _showFileDetails || hideSideList) {
+      return null;
+    }
+
+    const { isDesktop } = this.state;
+
+    const classNames = classnames(style.sidebar, {
+      [style.desktop]: isDesktop && showSideListOnDesktop,
+      [style.mobile]: !isDesktop && showSideListOnMobile,
+    });
+
+    return (
+      <div ref={this.setRef} className={classNames}>
+        <span className={style.title}>Files</span>
+        <div className={style.content}>
+          {this.renderTree(folderStructureTree)}
+          {levelLimitReached > MAX_LEVEL && this.renderWarning()}
+        </div>
+      </div>
+    );
+  }
+
+  renderTree = (data) => (
+    <ul className={style.structureList}>
+      {data?.map((item) => {
+        const key = item.isDirectory ? item.completePath : item;
+
+        return (
+          <li key={key}>
+            {item.isDirectory && this.renderFolder(item)}
+            {!item.isDirectory && this.renderFile(item)}
+            {item.isDirectory && item?.children?.length && this.renderChildren(item)}
+          </li>
+        );
+      })}
+    </ul>
+  )
+
+  renderFolder = (item) => {
+    const { showChildren } = this.state;
+
+    let Icon = ArrowUp;
+    let tooltipText = "Expand";
+
+    if (showChildren[item.completePath]) {
+      Icon = ArrowDown;
+      tooltipText = "Collaps";
+    }
+
+    return (
+      <div className={style.directoryRow}>
+        <IconButton
+          Icon={Icon}
+          theme="tertiary"
+          onClick={this.onToggle(item)}
+        >
+          {tooltipText}
+        </IconButton>
+        <span className={style.name}>{item.name}</span>
+      </div>
+    );
+  }
+
+  renderFile = (item) => {
+    const { loadedFiles } = this.props;
+    const file = loadedFiles?.find?.((el) => el.id.toString() === item.toString());
+
+    if (!file || !Object.keys(file).length) {
+      return null;
+    }
+
+    return (
+      <Button className={style.fileButton} theme="tertiaryAlt" onClick={this.onChangeFile(file.id)}>
+        <span className={style.name}>{file.name}</span>
+        <span className={style.fileSize}>{filesize(file.size).format()}</span>
+      </Button>
+    );
+  }
+
+  renderChildren = (item) => {
+    const { showChildren, showLoading } = this.state;
+
+    if (!showChildren[item.completePath]) {
+      return null;
+    }
+
+    return (
+      <div className={style.children}>
+        {showLoading[item.completePath] && <FigshareLoader className={style.loader} />}
+        {this.renderError()}
+        {this.renderTree(item.children)}
+      </div>
+    );
+  }
+
+  renderWarning = () => (
+    <div className={style.warning}>
+      <InfoIcon className={style.warningIcon} />
+      <span>To view all files, download the folder.</span>
+    </div>
+  );
+
+  renderError = () => {
+    const { error, filesError } = this.context;
+    if (!(error || filesError)) {
+      return null;
+    }
+
+    return (
+      <li className={style.error}>
+        Error loading files.
+        <GenericButton className={style.errorButton} onClick={this.onRetry}>
+          Retry
+        </GenericButton>
+      </li>
+    );
+  }
+
+  onChangeFile = (fileId) => (event) => {
+    event.preventDefault();
+
+    const { onChangeFile, item } = this.context;
+    const fileIndex = getFileIndexById(fileId, item?.folderStructure);
+
+    return onChangeFile(fileIndex);
+  };
+
+  onResize = (event) => {
+    event.preventDefault();
+
+    const { isDesktop } = this.state;
+    const computedIsDesktop = this.computeIsDesktop();
+
+    if (isDesktop !== computedIsDesktop) {
+      this.setState({ isDesktop: computedIsDesktop }, () => {
+        if (this.state.isDesktop) {
+          this.context.onToggleSideListView(DISPLAY_MODE.MOBILE, false);
+        }
+      });
+    }
+  }
+
+  onRetry = () => this.context.onLoadMoreFiles();
+
+  onToggle = (item) => () => {
+    const { completePath } = item;
+    const { levelHierarchy, onChangeParentDirectory } = this.context;
+
+    const callback = this.updateState(completePath);
+    onChangeParentDirectory(item, [...levelHierarchy, item], item?.children, callback);
+  };
+
+  updateState = (completePath) => {
+    const { loadedFiles } = this.props;
+
+    this.setState((prevState) => {
+      const showChildren = {
+        ...prevState.showChildren,
+        [completePath]: prevState.showChildren?.[completePath] ? !prevState.showChildren?.[completePath] : true,
+      };
+
+      let showLoading = {
+        ...prevState.showLoading,
+        [completePath]: prevState.showLoading?.[completePath] ? !prevState.showLoading?.[completePath] : true,
+      };
+
+      const folderWasOpenedBefore = Object.keys(loadedFiles.find((el) => el.parentPath === completePath) || {}).length;
+
+      if (folderWasOpenedBefore) {
+        showLoading = {
+          ...prevState.showLoading,
+          [completePath]: false,
+        };
+      }
+
+      const levelLimitReached = completePath.split("/").length;
+
+      return { showChildren, showLoading, lastToggledDirId: completePath, levelLimitReached };
+    });
+  };
+
+  computeIsDesktop = () => document.body.clientWidth > BREAK_POINT;
+}
diff --git a/src/pages/item/page/components/viewer/components/fileView/sidebar/index.gql b/src/pages/item/page/components/viewer/components/fileView/sidebar/index.gql
new file mode 100644
index 0000000000..f3fb9a0426
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/index.gql
@@ -0,0 +1,5 @@
+query getCurrentSession{
+	session {
+		account {id}
+	}
+}
diff --git a/src/pages/item/page/components/viewer/components/fileView/sidebar/index.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/index.jsx
new file mode 100644
index 0000000000..9bab7239af
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/index.jsx
@@ -0,0 +1,59 @@
+
+import React, { Component } from "react";
+import PropTypes from "prop-types";
+import { AccountQuery } from "services/networkManager";
+
+import Context from "../../../context";
+
+import { getCurrentSession } from "./index.gql";
+import FilesOnlySidebar from "./filesOnlySidebar";
+import FolderStructureSidebar from "./folderStructureSidebar";
+
+
+const VISIBILITY_KEY_DESKTOP = "hideSideListView";
+
+export default class Sidebar extends Component {
+  static propTypes = {
+    isLoadingFiles: PropTypes.bool,
+    loadedFiles: PropTypes.array,
+  }
+
+  static defaultProps = {
+    isLoadingFiles: false,
+    loadedFiles: [],
+  }
+
+  static contextType = Context;
+
+  render() {
+    return (
+      <AccountQuery query={getCurrentSession}>
+        {this.renderWithAccount}
+      </AccountQuery>
+    );
+  }
+
+  renderWithAccount=({ data }) => {
+    const { isLoadingFiles, loadedFiles } = this.props;
+    const { id } = data?.session?.account || { id: 0 };
+
+    const { folderStructure } = this.context.item || {};
+    const hasDirectories = !!(folderStructure && Object.keys(folderStructure)?.length);
+
+    return (
+      <>
+        {hasDirectories && (
+          <FolderStructureSidebar
+            isLoadingFiles={isLoadingFiles}
+            loadedFiles={loadedFiles}
+            storageKey={`${VISIBILITY_KEY_DESKTOP}-${id}`}
+          />
+        )}
+        {!hasDirectories && (
+          <FilesOnlySidebar storageKey={`${VISIBILITY_KEY_DESKTOP}-${id}`} />
+        )}
+      </>
+    );
+  }
+}
+
diff --git a/src/pages/item/page/components/viewer/components/fileView/sidebar/sidebar.test.jsx b/src/pages/item/page/components/viewer/components/fileView/sidebar/sidebar.test.jsx
new file mode 100644
index 0000000000..8535b5961d
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/fileView/sidebar/sidebar.test.jsx
@@ -0,0 +1,80 @@
+import React from "react";
+import { mount } from "enzyme";
+import { MockedProvider } from "utils/apollo/testing";
+
+import Context from "../../../context";
+
+import Sidebar from "./index";
+import FilesOnlySidebar from "./filesOnlySidebar";
+import FolderStructureSidebar from "./folderStructureSidebar";
+import { getCurrentSession } from "./index.gql";
+
+
+jest.mock("./filesOnlySidebar");
+jest.mock("./folderStructureSidebar");
+
+describe("<Sidebar />", () => {
+  let mocks = [];
+
+  beforeEach(() => {
+    mocks = [{
+      request: { query: getCurrentSession },
+      result: { data: { session: { account: { id: 1 } } } },
+    }];
+  });
+
+  const context = { item: { id: 1, folderStructure: {} } };
+
+  const files = [{ id: 1, name: "File 1" }, { id: 2, name: "File 2" }];
+  const props = { isLoadingFiles: false, loadedFiles: files };
+
+  function mountComponent({ newContext, newProps }) {
+    return mount(
+      <MockedProvider addTypename={false} mocks={mocks}>
+        <Context.Provider value={ { ...context, ...newContext } }>
+          <Sidebar {...props} {...newProps} />
+        </Context.Provider>
+      </MockedProvider>
+    );
+  }
+
+  it("renders sidebar with account key", async() => {
+    const tested = mountComponent({});
+
+    await mocks[0].response();
+    tested.update();
+
+    expect(tested.find(FilesOnlySidebar).props().storageKey).toEqual("hideSideListView-1");
+  });
+
+  it("renders sidebar without account key", async() => {
+    mocks[0].result.data.session.account = null;
+
+    const tested = mountComponent({});
+
+    await mocks[0].response();
+    tested.update();
+
+    expect(tested.find(FilesOnlySidebar).props().storageKey).toEqual("hideSideListView-0");
+  });
+
+  it("renders files only sidebar when folder structure is empty", async() => {
+    const tested = mountComponent({});
+
+    await mocks[0].response();
+    tested.update();
+
+    expect(tested.find(FilesOnlySidebar)).toHaveLength(1);
+    expect(tested.find(FolderStructureSidebar)).toHaveLength(0);
+  });
+
+  it("renders folder structure sidebar when there are folders", async() => {
+    const tested = mountComponent({ newContext: { item: { id: 1, folderStructure: { 100: "dir1" } } } });
+
+    await mocks[0].response();
+    tested.update();
+
+    expect(tested.find(FilesOnlySidebar)).toHaveLength(0);
+    expect(tested.find(FolderStructureSidebar)).toHaveLength(1);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/fileView/view.jsx b/src/pages/item/page/components/viewer/components/fileView/view.jsx
index 154e6cef36..abc06997a0 100644
--- a/src/pages/item/page/components/viewer/components/fileView/view.jsx
+++ b/src/pages/item/page/components/viewer/components/fileView/view.jsx
@@ -14,12 +14,12 @@ import style from "./view.css";
 const Viewer = loadable(() => import("@figshare/viewers/viewer"), { ssr: false });
 
 
-export default class FileView extends Component {
-  static contextType = Context;
+export default class View extends Component {
+  static propTypes = { downloadDisabled: PropTypes.bool, loadedFiles: PropTypes.array }
 
-  static propTypes = { downloadDisabled: PropTypes.bool }
+  static defaultProps = { downloadDisabled: true, loadedFiles: [] }
 
-  static defaultProps = { downloadDisabled: true }
+  static contextType = Context;
 
   state = { error: false }
 
@@ -31,29 +31,34 @@ export default class FileView extends Component {
     const {
       activeFileIndex,
       fsStatus,
-      files,
       item,
+      setViewerControlsProps,
+      token,
     } = this.context;
-    const { institution } = item;
-    const { downloadDisabled } = this.props;
+    const { folderStructure, institution } = item;
+    const { downloadDisabled, loadedFiles } = this.props;
 
-    if (!files.length) {
+    if (!loadedFiles.length) {
       return <div className={style.noFiles}>- No file added yet -</div>;
     }
 
-    const file = files[activeFileIndex];
-    const { virusScanInfo } = file;
+    const file = folderStructure && Object.keys(folderStructure)?.length ? loadedFiles.find(
+      (el) => el.index === activeFileIndex) : loadedFiles[activeFileIndex];
 
-    const { previewState, viewerType, name, downloadUrl } = file;
+    if (!file || !Object.keys(file).length || file?.isDirectory) {
+      return null;
+    }
 
-    if (file.isLinkOnly) {
+    const { id, isLinkOnly, previewState, viewerType, name, downloadUrl, virusScanInfo } = file;
+
+    if (isLinkOnly) {
       return <LinkedFile downloadUrl={downloadUrl} institution={institution} />;
     }
 
     if (previewState !== "available" || !viewerType || virusScanInfo?.virusFound) {
       return (
         <NoPreview
-          key={`no-preview-${file.id}`}
+          key={`no-preview-${id}`}
           downloadDisabled={downloadDisabled}
           downloadUrl={downloadUrl}
           filename={name}
@@ -63,15 +68,12 @@ export default class FileView extends Component {
       );
     }
 
-    const className = [style.fileView, { [style.fileViewFullscreen]: fsStatus },
-    ];
-
-    const { setViewerControlsProps, token } = this.context;
+    const className = [style.fileView, { [style.fileViewFullscreen]: fsStatus }];
 
     return (
       <div className={classnames(className)}>
         <Viewer
-          key={file.id}
+          key={id}
           {...file}
           setViewerControlsProps={setViewerControlsProps}
           token={token}
diff --git a/src/pages/item/page/components/viewer/components/fileView/view.test.jsx b/src/pages/item/page/components/viewer/components/fileView/view.test.jsx
index facdf9204f..22270af2f1 100644
--- a/src/pages/item/page/components/viewer/components/fileView/view.test.jsx
+++ b/src/pages/item/page/components/viewer/components/fileView/view.test.jsx
@@ -1,15 +1,12 @@
-import React, { Component } from "react";
+import React from "react";
 import { mount } from "enzyme";
 
-import files from "../../../../mocks/files";
-import mockedItem from "../../../../mocks/item";
 import LinkedFile from "../errors/linkedFile";
 import NoPreview from "../errors/noPreviewFile";
 import ErrorScreen from "../errors/errorScreen";
 import Context from "../../context";
-import { VIEW_MODES } from "../../constants";
 
-import TestedComponent from "./view";
+import View from "./view";
 
 
 jest.mock("../errors/linkedFile", () => {
@@ -19,70 +16,64 @@ jest.mock("../errors/linkedFile", () => {
   };
 });
 
-jest.mock("@figshare/viewers/viewer", () => {
-  return {
-    __esModule: true,
-    default: () => null,
-  };
-});
-
 jest.mock("../../../ratingSystem/tooltip");
 
 
-class Wrapped extends Component {
-  render() {
-    files[0].previewState = "available";
-    files[0].viewerType = "test";
-
-    const context = {
-      activeFileIndex: 0,
-      fsStatus: false,
-      viewMode: VIEW_MODES.single,
-      showFileDetails: undefined,
-      files,
-      item: { ...mockedItem },
-      ...this.props,
-    };
-
-    return (
-      <Context.Provider value={context}>
-        <TestedComponent />
+describe("<View />", () => {
+  const context = {
+    activeFileIndex: 0,
+    fsStatus: false,
+    item: {
+      id: 1,
+      folderStructure: {},
+      institution: {},
+    },
+    token: "token",
+    setViewerControlsProps: jest.fn(),
+  };
+
+  const files = [{ previewState: "available", viewerType: "test" }];
+  const props = { downloadDisabled: false, loadedFiles: files };
+
+  function mountComponent({ newContext, newProps }) {
+    return mount(
+      <Context.Provider value={ { ...context, ...newContext } }>
+        <View {...props} {...newProps} />
       </Context.Provider>
     );
   }
-}
 
-describe("<ViewersFileView />", () => {
   it("renders correctly", () => {
-    const tested = mount(<Wrapped />);
-    expect(tested.find(TestedComponent)).toHaveLength(1);
+    const tested = mountComponent({});
+    expect(tested.find(View)).toHaveLength(1);
   });
 
   it("renders message for no files", () => {
-    const tested = mount(<Wrapped files={[]} />);
+    const tested = mountComponent({ newProps: { loadedFiles: [] } });
     expect(tested.text()).toEqual("- No file added yet -");
   });
 
   it("handles linked files", () => {
-    const tested = mount(<Wrapped files={[{ isLinkOnly: true }]} />);
+    const tested = mountComponent({ newProps: { loadedFiles: [{ isLinkOnly: true }] } });
+
     expect(tested.find(LinkedFile)).toHaveLength(1);
   });
 
   it("renders correctly for no preview files", () => {
-    const testedFiles = [{
+    const loadedFiles = [{
       previewState: "error",
       viewerType: "",
       name: "test",
       downloadUrl: "test",
     }];
 
-    const tested = mount(<Wrapped files={testedFiles} />);
+    const tested = mountComponent({ newProps: { loadedFiles } });
     expect(tested.find(NoPreview)).toHaveLength(1);
   });
 
   it("handles viewers error", () => {
-    const tested = mount(<Wrapped />);
-    const instance = tested.find(TestedComponent).instance();
+    const tested = mountComponent({});
+    const instance = tested.find(View).instance();
     instance.onError();
     tested.update();
     expect(tested.find(ErrorScreen)).toHaveLength(1);
diff --git a/src/pages/item/page/components/viewer/components/filesMerger/filesMerger.test.jsx b/src/pages/item/page/components/viewer/components/filesMerger/filesMerger.test.jsx
new file mode 100644
index 0000000000..3cde5a426a
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/filesMerger/filesMerger.test.jsx
@@ -0,0 +1,33 @@
+import React from "react";
+import { mount } from "enzyme";
+
+import Context from "../../context";
+
+import FilesMerger from "./index";
+
+
+const mountComponent = ({ context, props }) => mount(
+  <Context.Provider value={context} >
+    <FilesMerger {...props} />
+  </Context.Provider>
+);
+
+const context = { item: { id: 1, folderStructure: {} } };
+const props = { children: () => null, files: [], isLoadingFiles: false };
+
+describe("FilesMerger", () => {
+  it("renders null when children returns null", () => {
+    const tested = mountComponent({ context, props });
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("renders children", () => {
+    const newProps = {
+      ...props,
+      children: () => <div>test</div>,
+    };
+
+    const tested = mountComponent({ context, props: newProps });
+    expect(tested.isEmptyRender()).toEqual(false);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/filesMerger/index.jsx b/src/pages/item/page/components/viewer/components/filesMerger/index.jsx
new file mode 100644
index 0000000000..dfb7a5d296
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/filesMerger/index.jsx
@@ -0,0 +1,48 @@
+import React, { useState, useContext, useEffect, useRef } from "react";
+import PropTypes from "prop-types";
+
+import Context from "../../context";
+
+
+export default function FilesMerger({ children, files, isLoadingFiles }) {
+  const [merged, setMerged] = useState({ files: [], serial: new Set([]) });
+  const mergedRef = useRef(merged);
+  const { folderStructure } = useContext(Context)?.item || {};
+
+  useEffect(() => {
+    mergedRef.current = merged;
+  }, [merged]);
+
+  useEffect(() => {
+    const mergedState = mergedRef.current;
+    const newMergedState = { files: mergedState.files.slice(), serial: new Set(mergedState.serial) };
+
+    files.forEach((el) => {
+      if (el.isDirectory || newMergedState.serial.has(el.id)) {
+        return;
+      }
+
+      newMergedState.serial.add(el.id);
+      newMergedState.files.push(el);
+    });
+
+    setMerged(newMergedState);
+  }, [files, mergedRef]);
+
+  if (!folderStructure || !Object.keys(folderStructure)?.length) {
+    return <>{children({ files }, isLoadingFiles)}</>;
+  }
+
+  return <>{children(merged, isLoadingFiles)}</>;
+}
+
+FilesMerger.propTypes = {
+  children: PropTypes.func.isRequired,
+  files: PropTypes.array,
+  isLoadingFiles: PropTypes.bool,
+};
+
+FilesMerger.defaultProps = {
+  files: [],
+  isLoadingFiles: false,
+};
diff --git a/src/pages/item/page/components/viewer/components/inactiveOverlay/index.css b/src/pages/item/page/components/viewer/components/inactiveOverlay/inactiveOverlay.css
similarity index 100%
rename from src/pages/item/page/components/viewer/components/inactiveOverlay/index.css
rename to src/pages/item/page/components/viewer/components/inactiveOverlay/inactiveOverlay.css
diff --git a/src/pages/item/page/components/viewer/components/inactiveOverlay/inactiveOverlay.test.jsx b/src/pages/item/page/components/viewer/components/inactiveOverlay/inactiveOverlay.test.jsx
new file mode 100644
index 0000000000..76e1347ef7
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/inactiveOverlay/inactiveOverlay.test.jsx
@@ -0,0 +1,111 @@
+import React from "react";
+import { mount } from "enzyme";
+
+import Context from "../../context";
+import { VIEW_MODES } from "../../constants";
+
+import InactiveOverlay from "./index";
+
+
+jest.mock("@figshare/viewers/viewer", () => {
+  return {
+    __esModule: true,
+    default: () => null,
+  };
+});
+
+
+describe("<InactiveOverlay />", () => {
+  const context = {
+    active: false,
+    activeFileIndex: 0,
+    item: {
+      id: 1,
+      folderStructure: {},
+      virusScanInfo: { virusFound: false },
+    },
+    viewMode: VIEW_MODES.thumbnail,
+    onActivate: () => undefined,
+  };
+
+  const files = [{ previewState: "available", viewerType: "test" }];
+  const props = { loadedFiles: files };
+
+  function mountComponent({ newContext, newProps }) {
+    return mount(
+      <Context.Provider value={ { ...context, ...newContext } }>
+        <InactiveOverlay {...props} {...newProps} />
+      </Context.Provider>
+    );
+  }
+
+
+  it("renders correctly", () => {
+    let tested = mountComponent({ newContext: { viewMode: VIEW_MODES.single } });
+    expect(tested.isEmptyRender()).toEqual(false);
+    expect(tested.find(".overlay")).toHaveLength(1);
+
+    tested = mountComponent({ newContext: { active: true, viewMode: VIEW_MODES.single } });
+    expect(tested.isEmptyRender()).toEqual(true);
+
+    tested = mountComponent({ newContext: { active: false, viewMode: VIEW_MODES.list } });
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("returns null for linked file", () => {
+    const loadedFiles = [{ isLinkOnly: true }];
+    const tested = mountComponent({ newProps: { loadedFiles }, newContext: { viewMode: VIEW_MODES.single } });
+
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("returns null for file with no preview", () => {
+    const loadedFiles = [{ previewState: "nope" }];
+    const tested = mountComponent({ newProps: { loadedFiles }, newContext: { viewMode: VIEW_MODES.single } });
+
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("returns null for file with no viewer type", () => {
+    const loadedFiles = [{ previewState: "available", viewerType: null }];
+    const tested = mountComponent({ newProps: { loadedFiles }, newContext: { viewMode: VIEW_MODES.single } });
+
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("returns null for item with viruses", () => {
+    const tested = mountComponent(
+      { newContext: { item: { virusScanInfo: { virusFound: true } }, viewMode: VIEW_MODES.single } }
+    );
+
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("returns null for spciecified viewers", () => {
+    let loadedFiles = [{ viewerType: "test", previewState: "available" }];
+    let tested = mountComponent({ newProps: { loadedFiles }, newContext: { viewMode: VIEW_MODES.single } });
+
+    expect(tested.isEmptyRender()).toEqual(false);
+
+    loadedFiles = [{ viewerType: "audio", previewState: "available" }];
+    tested = mountComponent({ newProps: { loadedFiles }, newContext: { viewMode: VIEW_MODES.single } });
+
+    expect(tested.isEmptyRender()).toEqual(true);
+
+    loadedFiles = [{ viewerType: "video", previewState: "available" }];
+    tested = mountComponent({ newProps: { loadedFiles }, newContext: { viewMode: VIEW_MODES.single } });
+
+    expect(tested.isEmptyRender()).toEqual(true);
+
+    loadedFiles = [{ viewerType: "presentation", previewState: "available" }];
+    tested = mountComponent({ newProps: { loadedFiles }, newContext: { viewMode: VIEW_MODES.single } });
+
+    expect(tested.isEmptyRender()).toEqual(true);
+
+    loadedFiles = [{ viewerType: "image", previewState: "available" }];
+    tested = mountComponent({ newProps: { loadedFiles }, newContext: { viewMode: VIEW_MODES.single } });
+
+    expect(tested.isEmptyRender()).toEqual(true);
+
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/inactiveOverlay/index.jsx b/src/pages/item/page/components/viewer/components/inactiveOverlay/index.jsx
index 5c99bc361b..91b5f54087 100644
--- a/src/pages/item/page/components/viewer/components/inactiveOverlay/index.jsx
+++ b/src/pages/item/page/components/viewer/components/inactiveOverlay/index.jsx
@@ -1,14 +1,19 @@
 import React, { Component } from "react";
+import PropTypes from "prop-types";
 import { Button, GenericButton } from "@figshare/fcl/button";
 import ChevronIcon from "@figshare/fcl/icons/doubleChevron/down/small";
 
 import Context from "../../context";
 import { VIEW_MODES } from "../../constants";
 
-import style from "./index.css";
+import style from "./inactiveOverlay.css";
 
 
 export default class InactiveOverlay extends Component {
+  static propTypes = { loadedFiles: PropTypes.array }
+
+  static defaultProps = { loadedFiles: [] }
+
   render() {
     return (
       <Context.Consumer>
@@ -17,8 +22,10 @@ export default class InactiveOverlay extends Component {
     );
   }
 
-  renderWithContext = ({ active, onActivate, activeFileIndex, files, viewMode, item }) => {
-    if (active || !files?.length) {
+  renderWithContext = ({ active, onActivate, activeFileIndex, viewMode, item }) => {
+    const { loadedFiles } = this.props;
+
+    if (active || !loadedFiles?.length) {
       return null;
     }
 
@@ -26,7 +33,13 @@ export default class InactiveOverlay extends Component {
       return null;
     }
 
-    const file = files[activeFileIndex];
+    const file = item?.folderStructure && Object.keys(item?.folderStructure)?.length ? loadedFiles.find(
+      (el) => el.index === activeFileIndex) : loadedFiles[activeFileIndex];
+
+    if (!file || !Object.keys(file).length) {
+      return null;
+    }
+
     if (file?.isLinkOnly) {
       return null;
     }
diff --git a/src/pages/item/page/components/viewer/components/inactiveOverlay/index.test.jsx b/src/pages/item/page/components/viewer/components/inactiveOverlay/index.test.jsx
deleted file mode 100644
index 78fd867659..0000000000
--- a/src/pages/item/page/components/viewer/components/inactiveOverlay/index.test.jsx
+++ /dev/null
@@ -1,94 +0,0 @@
-import React, { Component } from "react";
-import { mount } from "enzyme";
-
-import Context from "../../context";
-import { VIEW_MODES } from "../../constants";
-
-import TestedComponent from "./index";
-
-
-jest.mock("@figshare/viewers/viewer", () => {
-  return {
-    __esModule: true,
-    default: () => null,
-  };
-});
-
-
-class Wrapped extends Component {
-  render() {
-    const context = {
-      active: false,
-      onActivate: () => undefined,
-      files: [{ previewState: "available", viewerType: "test" }],
-      ...this.props,
-    };
-
-    return (
-      <Context.Provider value={context}>
-        <TestedComponent />
-      </Context.Provider>
-    );
-  }
-}
-
-describe("<ViewersFileView />", () => {
-  it("renders correctly", () => {
-    const tested = mount(<Wrapped activeFileIndex={0} viewMode={VIEW_MODES.single} />);
-    expect(tested.isEmptyRender()).toEqual(false);
-
-    tested.setProps({ active: true });
-    tested.update();
-    expect(tested.isEmptyRender()).toEqual(true);
-
-    tested.setProps({ active: false, viewMode: VIEW_MODES.list });
-    tested.update();
-    expect(tested.isEmptyRender()).toEqual(true);
-  });
-
-  it("returns null for linked file", () => {
-    const files = [{ isLinkOnly: true }];
-    const mounted = mount(
-      <Wrapped activeFileIndex={0} files={files} viewMode={VIEW_MODES.single} />
-    );
-
-    expect(mounted.isEmptyRender()).toEqual(true);
-  });
-
-  it("returns null for file with no preview", () => {
-    const files = [{ previewState: "nope" }];
-    const mounted = mount(
-      <Wrapped activeFileIndex={0} files={files} viewMode={VIEW_MODES.single} />
-    );
-
-    expect(mounted.isEmptyRender()).toEqual(true);
-  });
-
-  it("returns null for spciecified viewers", () => {
-    const files = [{ viewerType: "test", previewState: "available" }];
-    const mounted = mount(
-      <Wrapped activeFileIndex={0} files={files} viewMode={VIEW_MODES.single} />
-    );
-    expect(mounted.isEmptyRender()).toEqual(false);
-
-    files[0].viewerType = "audio";
-    mounted.setProps({ files });
-    mounted.update();
-    expect(mounted.isEmptyRender()).toEqual(true);
-
-    files[0].viewerType = "video";
-    mounted.setProps({ files });
-    mounted.update();
-    expect(mounted.isEmptyRender()).toEqual(true);
-
-    files[0].viewerType = "presentation";
-    mounted.setProps({ files });
-    mounted.update();
-    expect(mounted.isEmptyRender()).toEqual(true);
-
-    files[0].viewerType = "image";
-    mounted.setProps({ files });
-    mounted.update();
-    expect(mounted.isEmptyRender()).toEqual(true);
-  });
-});
diff --git a/src/pages/item/page/components/viewer/components/listView/components/error/index.jsx b/src/pages/item/page/components/viewer/components/listView/components/error/index.jsx
deleted file mode 100644
index 4814298d3b..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/components/error/index.jsx
+++ /dev/null
@@ -1,38 +0,0 @@
-import PropTypes from "prop-types";
-import React, { PureComponent } from "react";
-import { GenericButton } from "@figshare/fcl/button";
-
-import style from "./index.css";
-
-
-export default class FilesListError extends PureComponent {
-  static propTypes = {
-    error: PropTypes.bool.isRequired,
-    onRetry: PropTypes.func.isRequired,
-  }
-
-  container = null;
-
-  render() {
-    const { error } = this.props;
-    if (!error) {
-      return null;
-    }
-
-    return (
-      <p ref={this.setContainerRef} className={style.error}>
-        Error loading files.
-        <GenericButton className={style.button} onClick={this.onRetry}>
-          Retry
-        </GenericButton>
-      </p>
-    );
-  }
-
-  setContainerRef = (node) => this.container = node;
-
-  onRetry = () => {
-    const page = this.container.previousSibling;
-    this.props.onRetry(page, 0, true);
-  }
-}
diff --git a/src/pages/item/page/components/viewer/components/listView/components/error/index.test.jsx b/src/pages/item/page/components/viewer/components/listView/components/error/index.test.jsx
deleted file mode 100644
index 394a9a86bc..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/components/error/index.test.jsx
+++ /dev/null
@@ -1,23 +0,0 @@
-import React from "react";
-import { mount } from "enzyme";
-
-import ErrorComponent from "./index";
-
-
-describe("<FilesViewerErrorComponent />", () => {
-  it("renders", () => {
-    const onRetry = jest.fn();
-    const tested = mount(<ErrorComponent error={false} onRetry={onRetry} />);
-    expect(tested.isEmptyRender()).toEqual(true);
-
-    tested.setProps({ error: true });
-    expect(tested.isEmptyRender()).toEqual(false);
-  });
-
-  it("handles click", () => {
-    const onRetry = jest.fn();
-    const tested = mount(<ErrorComponent error={true} onRetry={onRetry} />);
-    tested.find("button").simulate("click");
-    expect(onRetry).toHaveBeenCalledWith(null, 0, true);
-  });
-});
diff --git a/src/pages/item/page/components/viewer/components/listView/components/file/index.css b/src/pages/item/page/components/viewer/components/listView/components/file/index.css
deleted file mode 100644
index f03690f8fe..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/components/file/index.css
+++ /dev/null
@@ -1,115 +0,0 @@
-.file {
-  position: relative;
-
-  display: flex;
-  flex-direction: column;
-
-  width: 100%;
-  height: calc(8 * var(--gridSize));
-
-  border-radius: 0;
-}
-
-.searched {
-  border: 1px solid #008064;
-  background: rgba(0, 128, 100, 0.06);
-}
-
-.button {
-  font-size: var(--typography-S-fontSize);
-  font-weight: bold;
-  line-height: var(--typography-S-lineHeight);
-
-  position: relative;
-
-  display: flex;
-  flex-direction: row;
-  justify-content: flex-start;
-  align-items: center;
-
-  width: 100%;
-  height: 100%;
-  padding: 0 calc(18 * var(--gridSize)) 0 calc(2 * var(--gridSize));
-
-  text-align: left;
-  white-space: pre-wrap;
-  text-decoration: none;
-
-  color: var(--color-button-tertiaryAlt-label);
-
-  border-radius: 0;
-}
-
-.file:hover,
-.file:focus,
-.file.focused {
-  background: var(--color-layout-tertiary-background);
-}
-
-.file:hover .button,
-.file:focus .button,
-.file.focused .button {
-  text-decoration: none;
-
-  color: var(--color-button-tertiaryAlt-label_hover);
-}
-
-.fileExtension,
-.fileSize {
-  flex-shrink: 0;
-}
-
-.fileName {
-  overflow: hidden;
-
-  white-space: nowrap;
-  text-overflow: ellipsis;
-}
-
-.fileSize {
-  font-weight: normal;
-}
-
-/* stylelint-disable-next-line */
-.buttons {
-  position: absolute;
-  right: 0;
-
-  display: flex;
-  flex-direction: row;
-
-  height: 100%;
-  justify-content: flex-start;
-  align-items: center;
-}
-
-.buttons > button,
-.buttons > a,
-.buttons > span {
-  display: flex;
-  flex-direction: row;
-  justify-content: center;
-  align-items: center;
-
-  width: calc(6 * var(--gridSize));
-  height: calc(6 * var(--gridSize));
-
-  margin-right: var(--gridSize);
-}
-
-.downloadIcon {
-  fill: var(--color-iconButton-primary-icon);
-}
-
-.downloadIconDisabled {
-  fill: var(--color-iconButton-primary-icon_disabled);
-}
-
-.buttons span.downloadButtonDisabled {
-  width: calc(8 * var(--gridSize));
-  justify-content: space-around;
-}
-
-.virusWarning {
-  fill: var(--color-iconButton-primary-icon);
-}
diff --git a/src/pages/item/page/components/viewer/components/listView/components/file/index.jsx b/src/pages/item/page/components/viewer/components/listView/components/file/index.jsx
deleted file mode 100644
index d9c20fbc3a..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/components/file/index.jsx
+++ /dev/null
@@ -1,160 +0,0 @@
-import classnames from "classnames";
-import PropTypes from "prop-types";
-import React, { Component, Fragment } from "react";
-import { GenericButton, IconButton } from "@figshare/fcl/button";
-import EyeIcon from "@figshare/fcl/icons/eye/visible/medium";
-import DownloadIcon from "@figshare/fcl/icons/download";
-import DownloadLockIcon from "@figshare/fcl/icons/downloadLock";
-import Exclamation from "@figshare/fcl/icons/warning/small";
-import { Trigger, UncontrolledToggletip as Toggletip } from "@figshare/fcl/toggletip";
-import { isPartOfItemHighlight } from "shared/ui/highlights/utils";
-import filesize from "utils/filesize";
-
-import VirusTooltip from "../../../../../virusTooltip";
-
-import style from "./index.css";
-
-
-export default class File extends Component {
-  static propTypes = {
-    file: PropTypes.object.isRequired,
-    onBlur: PropTypes.func.isRequired,
-    onClick: PropTypes.func.isRequired,
-    onFocus: PropTypes.func.isRequired,
-    activeFileIndex: PropTypes.number,
-    downloadDisabled: PropTypes.bool,
-    highlights: PropTypes.array,
-    lastActiveFileIndex: PropTypes.number,
-  }
-
-  static defaultProps = {
-    activeFileIndex: undefined,
-    downloadDisabled: true,
-    highlights: [],
-    lastActiveFileIndex: undefined,
-  }
-
-  state = { focused: false }
-
-  render() {
-    const { file, onBlur, onFocus, activeFileIndex, highlights, lastActiveFileIndex } = this.props;
-    const { name, extension, size, index } = file;
-    const filename = name.replace(`.${extension}`, "");
-    const tabIndex = lastActiveFileIndex === index ? "0" : "-1";
-
-    const className = [
-      style.file,
-      { [style.focused]: activeFileIndex === index || this.state.focused },
-      { [style.searched]: isPartOfItemHighlight(file.id, highlights) },
-    ];
-
-    return (
-      <div className={classnames(className)}>
-        <GenericButton
-          className={style.button}
-          tabIndex={tabIndex}
-          onBlur={onBlur}
-          onClick={this.onClick}
-          onFocus={onFocus}
-        >
-          <span className={style.fileName}>{filename}.</span>
-          <span className={style.fileExtension}>{extension}</span>
-          <span className={style.fileSize}>{" "}({filesize(size).format()})</span>
-        </GenericButton>
-        <div className={style.buttons}>
-          <IconButton
-            Icon={EyeIcon}
-            tabIndex={tabIndex}
-            theme="tertiary"
-            onBlur={onBlur}
-            onClick={this.onClick}
-          >
-            View file
-          </IconButton>
-          {this.renderDownloadButton()}
-        </div>
-      </div>
-    );
-  }
-
-  renderDownloadButton = () => {
-    const { file } = this.props;
-    const { downloadDisabled } = this.props;
-    const { downloadUrl, virusScanInfo } = file;
-
-    if (downloadDisabled) {
-      return (
-        <IconButton
-          Icon={DownloadLockIcon}
-          disabled={true}
-          theme="tertiary"
-        >
-          This item contains files with download restrictions
-        </IconButton>
-      );
-    }
-
-    if (virusScanInfo?.virusFound) {
-      return this.renderDownloadWithVirus();
-    }
-
-    if (!downloadUrl) {
-      return (
-        <span
-          aria-label="Download is not available for this file"
-          className={style.downloadButtonDisabled}
-          tooltip="Download is not available for this file"
-        >
-          <DownloadIcon className={classnames(style.downloadIcon, style.downloadIconDisabled)} />
-          <Exclamation className={style.virusWarning} />
-        </span>
-      );
-    }
-
-    return (
-      <IconButton Icon={DownloadIcon} href={downloadUrl} theme="tertiary">
-        Download file
-      </IconButton>
-    );
-  }
-
-  renderDownloadWithVirus = () => (
-    <Toggletip onToggle={this.onToggleFocus}>
-      {this.renderToggleTipContent}
-    </Toggletip>
-  )
-
-  renderToggleTipContent = () => (
-    <Fragment>
-      <Trigger>
-        {this.renderButton}
-      </Trigger>
-      <VirusTooltip placement="bottom" />
-    </Fragment>
-  )
-
-  renderButton = (triggerProps) => {
-    const { ref, ...restProps } = triggerProps;
-
-    return (
-      <IconButton
-        Icon={DownloadIcon}
-        innerRef={ref}
-        theme="tertiary"
-        {...restProps}
-      >
-        Download file
-      </IconButton>
-    );
-  }
-
-  onToggleFocus = () => this.setState((state) => {
-    return { focused: !state.focused };
-  })
-
-  onClick = () => {
-    const { file, onClick } = this.props;
-
-    onClick(file.index)();
-  }
-}
diff --git a/src/pages/item/page/components/viewer/components/listView/components/file/index.test.jsx b/src/pages/item/page/components/viewer/components/listView/components/file/index.test.jsx
deleted file mode 100644
index 354cb48348..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/components/file/index.test.jsx
+++ /dev/null
@@ -1,86 +0,0 @@
-import React from "react";
-import { mount } from "enzyme";
-import DownloadIcon from "@figshare/fcl/icons/download";
-import DownloadLockIcon from "@figshare/fcl/icons/downloadLock";
-import { IconButton } from "@figshare/fcl/button";
-
-import VirusTooltip from "../../../../../virusTooltip";
-
-import File from "./index";
-
-
-jest.mock("../../../../../virusTooltip");
-jest.mock("@figshare/fcl/toggletip", () => {
-  return {
-    __esModule: true,
-    UncontrolledToggletip: ({ children }) => children(),
-    Trigger: ({ children, ...rest }) => children(rest),
-  };
-});
-
-jest.mock("@figshare/fcl/popup");
-
-
-describe("<ViewerThumbnailItem />", () => {
-  const file = {
-    index: 0,
-    extentions: "test",
-    name: "test file",
-  };
-
-  const props = {
-    downloadDisabled: false,
-    file,
-    onBlur: jest.fn(),
-    onClick: jest.fn(() => jest.fn()),
-    onFocus: jest.fn(),
-  };
-
-  it("handles on click", () => {
-    const tested = mount(<File {...props} />);
-
-    tested.instance().onClick();
-
-    expect(props.onClick).toHaveBeenCalledWith(file.index);
-  });
-
-  it("renders download button correctly", () => {
-    let tested = mount(<File {...props} />);
-
-    expect(tested.find("[aria-label=\"Download is not available for this file\"]")).toHaveLength(1);
-
-    file.downloadUrl = "test";
-    file.virusScanInfo = undefined;
-
-    tested = mount(<File {...props} />);
-    expect(tested.find("[aria-label=\"Download is not available for this file\"]")).toHaveLength(0);
-  });
-
-  it("handles file with virus", () => {
-    file.virusScanInfo = { virusFound: true };
-    const tested = mount(<File {...props} />);
-
-    expect(tested.find(VirusTooltip)).toHaveLength(1);
-  });
-
-  it("renders disabled download lock button", () => {
-    const tested = mount(<File {...props} downloadDisabled={true} />);
-
-    expect(tested.find(DownloadIcon)).toHaveLength(0);
-    expect(tested.find(DownloadLockIcon)).toHaveLength(1);
-    expect(tested.find(IconButton).at(1).props().disabled).toEqual(true);
-    expect(tested.find(IconButton).at(1).props().children).toEqual(
-      "This item contains files with download restrictions");
-  });
-
-  it("handles toggle focus", () => {
-    const tested = mount(<File {...props} />);
-    const instance = tested.instance();
-
-    expect(instance.state.focused).toEqual(false);
-    instance.onToggleFocus();
-    expect(instance.state.focused).toEqual(true);
-    instance.onToggleFocus();
-    expect(instance.state.focused).toEqual(false);
-  });
-});
diff --git a/src/pages/item/page/components/viewer/components/listView/components/loading/index.css b/src/pages/item/page/components/viewer/components/listView/components/loading/index.css
deleted file mode 100644
index 2c86623ffa..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/components/loading/index.css
+++ /dev/null
@@ -1,93 +0,0 @@
-.page {
-  position: relative;
-
-  display: flex;
-  flex-direction: row;
-
-  width: calc((100% - (4 * 5 * var(--gridSize))) / 5);
-  height: 100%;
-  flex-shrink: 0;
-  flex-wrap: wrap;
-  justify-content: space-between;
-
-  margin-right: calc(5 * var(--gridSize));
-
-  @media (max-width: 2000px) {
-    width: calc((100% - (3 * 5 * var(--gridSize))) / 4);
-  }
-
-  @media (max-width: 1600px) {
-    width: calc((100% - (2 * 5 * var(--gridSize))) / 3);
-  }
-
-  @media (max-width: 1200px) {
-    width: calc((100% - (1 * 5 * var(--gridSize))) / 2);
-  }
-
-  @media (max-width: 800px) {
-    width: 100%;
-  }
-}
-
-@keyframes loadingPulse {
-  0% {
-    transform: translateX(-100%);
-  }
-
-  60% {
-    transform: translateX(300%);
-  }
-
-  100% {
-    transform: translateX(300%);
-  }
-}
-
-.file {
-  position: relative;
-
-  display: flex;
-
-  overflow: hidden;
-  flex-direction: column;
-
-  width: 100%;
-  height: calc(8 * var(--gridSize));
-  justify-content: center;
-
-  @media screen and (prefers-reduced-motion: reduce) {
-    &::after {
-      animation: none;
-    }
-  }
-
-  &::after {
-    position: absolute;
-    top: 0;
-    left: 0;
-
-    width: 40%;
-    height: 100%;
-
-    content: "";
-    transform: translateX(-100%);
-
-    animation: loadingPulse 2s ease-in infinite 0.3s;
-
-    background: var(--color-layout-primary-background);
-    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 50%, rgba(255, 255, 255, 0) 100%);
-  }
-}
-
-.placeholder {
-  position: relative;
-
-  width: 100%;
-  height: calc(2 * var(--gridSize));
-
-  background: var(--color-layout-tertiary-background);
-}
-
-.file:nth-child(2n) .placeholder {
-  width: 75%;
-}
diff --git a/src/pages/item/page/components/viewer/components/listView/components/loading/index.jsx b/src/pages/item/page/components/viewer/components/listView/components/loading/index.jsx
deleted file mode 100644
index 5935a6c28b..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/components/loading/index.jsx
+++ /dev/null
@@ -1,45 +0,0 @@
-import PropTypes from "prop-types";
-import React, { Component } from "react";
-
-import style from "./index.css";
-
-
-export default class Loading extends Component {
-  static propTypes = {
-    cols: PropTypes.number.isRequired,
-    loading: PropTypes.bool.isRequired,
-    rows: PropTypes.number.isRequired,
-  }
-
-  render() {
-    const { loading, cols } = this.props;
-
-    if (!loading) {
-      return null;
-    }
-
-    const pages = Array.from({ length: cols });
-
-    return pages.map(this.renderPage);
-  }
-
-  renderPage = (_, index) => {
-    const loadingItems = Array.from({ length: this.props.rows });
-
-    return (
-      <div key={`page-loading-${index}`} className={style.page}>
-        {loadingItems.map(this.renderLoadingFile)}
-      </div>
-    );
-  }
-
-  renderLoadingFile = (_, index) => {
-    const key = `loading-file-${index}`;
-
-    return (
-      <div key={key} className={style.file}>
-        <div className={style.placeholder} />
-      </div>
-    );
-  }
-}
diff --git a/src/pages/item/page/components/viewer/components/listView/constants.js b/src/pages/item/page/components/viewer/components/listView/constants.js
deleted file mode 100644
index 11b94443e9..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/constants.js
+++ /dev/null
@@ -1,28 +0,0 @@
-export const MAX_WIDTH = 2560;
-export const MAX_HEIGHT = 1080;
-export const COLUMNS = {
-  800: 1,
-  1200: 2,
-  1500: 3,
-  2000: 4,
-  2560: 5,
-};
-
-export const ROWS = {
-  700: 4,
-  900: 8,
-  1080: 13,
-};
-
-export const FS_ROWS = {
-  600: 10,
-  720: 13,
-  768: 14,
-  864: 15,
-  900: 17,
-  1080: 20,
-};
-
-export const MAX_ROWS = 13;
-export const MAX_COLS = 5;
-export const KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "PageUp", "PageDown"];
diff --git a/src/pages/item/page/components/viewer/components/listView/index.css b/src/pages/item/page/components/viewer/components/listView/index.css
deleted file mode 100644
index 965ac01cd6..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/index.css
+++ /dev/null
@@ -1,168 +0,0 @@
-.listView {
-  position: relative;
-
-  display: flex;
-  flex-direction: row;
-
-  width: 100%;
-
-  background: white;
-  justify-content: center;
-}
-
-.listContainer {
-  position: relative;
-
-  display: block;
-  overflow: hidden;
-
-  width: 100%;
-
-  margin: calc(3 * var(--gridSize)) calc(7 * var(--gridSize));
-  padding: calc(3 * var(--gridSize));
-
-  @media (max-width: 640px) {
-    & {
-      max-width: calc(50 * var(--gridSize));
-    }
-  }
-}
-
-.viewportSelector {
-  position: fixed;
-  top: -3840px;
-  left: -3840px;
-
-  width: 3840px;
-  height: 2160px;
-
-  pointer-events: none;
-
-  opacity: 0;
-
-  @media (max-width: 2000px) {
-    & {
-      width: 2000px;
-    }
-  }
-
-  @media (max-width: 1500px) {
-    & {
-      width: 1500px;
-    }
-  }
-
-  @media (max-width: 1200px) {
-    & {
-      width: 1200px;
-    }
-  }
-
-  @media (max-width: 800px) {
-    & {
-      width: 800px;
-    }
-  }
-
-  @media (max-height: 1080px) {
-    & {
-      height: 1080px;
-    }
-  }
-
-  @media (max-height: 900px) {
-    & {
-      height: 900px;
-    }
-  }
-
-  @media (max-height: 700px) {
-    & {
-      height: 700px;
-    }
-  }
-}
-
-.slider {
-  position: relative;
-
-  display: block;
-
-  width: 100%;
-  height: 100%;
-
-  transition: 0.3s all linear;
-}
-
-.pages {
-  position: relative;
-
-  display: flex;
-  flex-direction: row;
-  flex-wrap: nowrap;
-}
-
-.page {
-  position: relative;
-
-  display: flex;
-  flex-direction: row;
-
-  width: calc((100% - (4 * 5 * var(--gridSize))) / 5);
-  height: 100%;
-  flex-shrink: 0;
-  flex-wrap: wrap;
-  justify-content: space-between;
-
-  margin-right: calc(5 * var(--gridSize));
-
-  @media (max-width: 2000px) {
-    width: calc((100% - (3 * 5 * var(--gridSize))) / 4);
-  }
-
-  @media (max-width: 1600px) {
-    width: calc((100% - (2 * 5 * var(--gridSize))) / 3);
-  }
-
-  @media (max-width: 1200px) {
-    width: calc((100% - (1 * 5 * var(--gridSize))) / 2);
-  }
-
-  @media (max-width: 800px) {
-    width: 100%;
-  }
-}
-
-.pagination {
-  position: absolute;
-  top: 0;
-
-  display: flex;
-
-  height: 100%;
-  align-items: center;
-  justify-content: center;
-  flex-flow: column;
-}
-
-.paginationPages {
-  font-weight: bold;
-
-  text-align: center;
-
-  color: var(--color-typography-tertiary);
-}
-
-.paginationLeft {
-  left: calc(2 * var(--gridSize));
-}
-
-.paginationRight {
-  right: calc(2 * var(--gridSize));
-}
-
-@media screen and (prefers-reduced-motion: reduce) {
-  .slider {
-    transition: none;
-  }
-}
diff --git a/src/pages/item/page/components/viewer/components/listView/index.jsx b/src/pages/item/page/components/viewer/components/listView/index.jsx
index e0d4b083fd..46104b7075 100644
--- a/src/pages/item/page/components/viewer/components/listView/index.jsx
+++ b/src/pages/item/page/components/viewer/components/listView/index.jsx
@@ -1,29 +1,12 @@
-import classnames from "classnames";
 import PropTypes from "prop-types";
 import React, { Component } from "react";
-import { IconButton } from "@figshare/fcl/button";
-import ArrowLeft from "@figshare/fcl/icons/angle/left";
-import ArrowRight from "@figshare/fcl/icons/angle/right";
-import { HighlightContext } from "shared/ui/highlights/highlightContext";
 
-import { VIEW_MODES, MAX_ITEMS_PER_PAGE } from "../../constants";
+import { VIEW_MODES } from "../../constants";
 import Context from "../../context";
 import RatingTooltip from "../../../ratingSystem/tooltip";
 
-import File from "./components/file";
-import Loading from "./components/loading";
-import Error from "./components/error";
-import style from "./index.css";
-import {
-  MAX_WIDTH,
-  MAX_HEIGHT,
-  COLUMNS,
-  ROWS,
-  FS_ROWS,
-  MAX_ROWS,
-  MAX_COLS,
-  KEYS,
-} from "./constants";
+import ListViewTable from "./listViewTable";
+import style from "./listView.css";
 
 
 export default class ListView extends Component {
@@ -33,143 +16,22 @@ export default class ListView extends Component {
 
   static defaultProps = { downloadDisabled: true }
 
-  state = {
-    activeFileIndex: undefined,
-    error: false,
-    lastActiveFileIndex: undefined,
-    viewportSize: {
-      width: MAX_WIDTH,
-      height: MAX_HEIGHT,
-    },
-    page: 0,
-    loading: false,
-  }
-
-  filelist = null;
-  thumbnailsContainer = null
-  viewport = null;
-  resizeTimeout = null;
-
-  componentDidMount() {
-    this.onResize();
-    window.addEventListener("resize", this.onResize);
-
-    if (this.filelist) {
-      const selector = "div:first-child div:first-child button";
-      const firstButton = this.filelist.querySelector(selector);
-
-      setTimeout(() => firstButton?.focus?.(), 10);
-    }
-  }
-
-  componentWillUnmount() {
-    window.removeEventListener("resize", this.onResize);
-    clearTimeout(this.resizeTimeout);
-  }
-
   render() {
-    const { viewMode, filesCanLoadMore, filesLoading, filesCount } = this.context;
+    const { viewMode } = this.context;
+    const { downloadDisabled } = this.props;
 
     if (viewMode !== VIEW_MODES.list) {
       return null;
     }
 
-    let pagesLength = Math.ceil(this.pages.length / this.columns);
-    if (filesLoading) {
-      pagesLength += 1;
-    }
-    const { page, loading, error } = this.state;
-    const sliderStyle = { left: `calc(${100 * -page}% - calc(${page} * 5 * var(--gridSize)))` };
-    const canLoadMore = (page === pagesLength - 1 && !filesCanLoadMore);
-
-    const nextPageDisabled = canLoadMore || loading || error ? true : undefined;
-    const prevPageDisabled = page <= 0 ? true : undefined;
-
-    const maxPages = Math.max(Math.ceil(filesCount / this.itemsPerPage), pagesLength);
-    const showLoading = loading || filesLoading;
-
     return (
       <div className={style.listView}>
-        <div ref={this.setViewportRef} className={style.viewportSelector} role="presentation" />
-        <div ref={this.setThumbnailsContainerRef} className={style.listContainer}>
-          <div className={style.slider} style={sliderStyle}>
-            <div ref={this.setFileListRef} className={style.pages}>
-              {this.pages.map(this.renderPage)}
-              <Loading cols={this.columns} loading={showLoading} rows={this.rows} />
-              <Error error={error} onRetry={this.onLoadMoreFiles} />
-            </div>
-          </div>
-        </div>
-        <div className={classnames([style.pagination, style.paginationRight])}>
-          <IconButton
-            Icon={ArrowRight}
-            disabled={nextPageDisabled}
-            onClick={this.onNextPage}
-          >
-            Next page
-          </IconButton>
-        </div>
-        <div className={classnames([style.pagination, style.paginationLeft])}>
-          <IconButton
-            Icon={ArrowLeft}
-            disabled={prevPageDisabled}
-            onClick={this.onPrevPage}
-          >
-            Previous page
-          </IconButton>
-          <div className={style.paginationPages}>
-            {page + 1}/{maxPages}
-          </div>
-        </div>
         {this.renderRatingTooltip()}
+        <ListViewTable downloadDisabled={downloadDisabled} />
       </div>
     );
   }
 
-  renderPage = (files, index) => {
-    const key = `page-${index}`;
-    const lastPage = files.length < this.itemsPerPage;
-
-    return (
-      <div
-        key={key}
-        className={style.page}
-        role="button"
-        tabIndex="0"
-        onKeyDown={this.onKeyDown}
-        onKeyUp={this.onKeyUp}
-      >
-        {files.map(this.renderFile(lastPage))}
-      </div>
-    );
-  }
-
-  renderFile = (lastPage) => (file) => {
-    const { index } = file;
-    const { activeFileIndex, lastActiveFileIndex } = this.state;
-    const { downloadDisabled } = this.props;
-    const key = `file-${index}`;
-
-    return (
-      <HighlightContext.Consumer key={key}>
-        {({ highlights }) => (
-          <File
-            key={file.id}
-            activeFileIndex={activeFileIndex}
-            downloadDisabled={downloadDisabled}
-            file={file}
-            highlights={highlights}
-            lastActiveFileIndex={lastActiveFileIndex}
-            lastPage={lastPage}
-            onBlur={this.onBlur}
-            onClick={this.onChangeFile}
-            onFocus={this.onFocus(index)}
-          />
-        )}
-      </HighlightContext.Consumer>
-    );
-  }
-
   renderRatingTooltip = () => {
     const { fsStatus } = this.context;
 
@@ -179,324 +41,4 @@ export default class ListView extends Component {
 
     return <RatingTooltip viewType="large" />;
   }
-
-  setFileListRef = (node) => this.filelist = node;
-
-  setThumbnailsContainerRef = (node) => this.thumbnailsContainer = node;
-
-  setViewportRef = (node) => this.viewport = node;
-
-  onChangeFile = (index, showDetails = false) => () => {
-    this.context.onChangeFile(index, showDetails);
-  }
-
-  onResize = () => {
-    clearTimeout(this.resizeTimeout);
-
-    if (!this.viewport) {
-      return;
-    }
-
-    const { offsetWidth: width, offsetHeight: height } = this.viewport;
-
-    const viewportSize = { width, height };
-
-    if (this.state.viewportSize.width !== width || this.state.viewportSize.height !== height) {
-      this.setState({ viewportSize }, () => {
-        this.autoDetectPage(this.state.lastActiveFileIndex || 0);
-        this.fillPageWithFiles();
-      });
-    }
-  }
-
-  onKeyDown = (event) => {
-    if (KEYS.includes(event.key)) {
-      event.preventDefault();
-      event.stopPropagation();
-    }
-  }
-
-  onKeyUp = (event) => {
-    if (KEYS.includes(event.key)) {
-      event.preventDefault();
-      event.stopPropagation();
-    }
-
-    if (this.context.filesLoading) {
-      return;
-    }
-
-    const page = this.getParentPage(event.target);
-    const selector = ":scope > div > button:first-child";
-    const allItems = Array.from(page.querySelectorAll(selector));
-    const selectedIndex = allItems.indexOf(event.target) || 0;
-    let next = null;
-
-    switch (event.key) {
-      case "ArrowRight": {
-        const nextPage = page.nextSibling;
-        if (!nextPage) {
-          this.onLoadMoreFiles(page, selectedIndex);
-
-          break;
-        }
-
-        const nextPageItems = Array.from(nextPage.querySelectorAll(selector));
-        const nextIndex = Math.min(selectedIndex, nextPageItems.length - 1);
-        next = nextPageItems[nextIndex];
-
-        break;
-      }
-
-      case "ArrowLeft": {
-        const prevPage = page.previousSibling;
-        if (!prevPage) {
-          break;
-        }
-
-        const nextPageItems = Array.from(prevPage.querySelectorAll(selector));
-        const nextIndex = Math.min(selectedIndex, nextPageItems.length - 1);
-        next = nextPageItems[nextIndex];
-
-        break;
-      }
-
-      case "ArrowDown": {
-        next = allItems[selectedIndex + 1];
-
-        if (!next) {
-          const nextPage = page.nextSibling;
-
-          if (nextPage) {
-            next = nextPage.querySelector(selector);
-          } else {
-            this.onLoadMoreFiles(page);
-          }
-        }
-        break;
-      }
-
-      case "ArrowUp": {
-        next = allItems[selectedIndex - 1];
-
-        if (!next) {
-          const prevPage = page.previousSibling;
-          if (prevPage) {
-            next = prevPage.querySelector(":scope > div:last-child > button:first-child");
-          }
-        }
-        break;
-      }
-
-      case "PageUp": {
-        this.onPrevPage();
-        break;
-      }
-
-      case "PageDown": {
-        this.onNextPage();
-        break;
-      }
-
-      default: {
-        break;
-      }
-    }
-
-    if (next) {
-      next.focus();
-    }
-  }
-
-  onLoadMoreFiles = (page, selectedIndex, retry = false) => {
-    const { filesLoading, filesCanLoadMore, onLoadMoreFiles } = this.context;
-
-    if (filesCanLoadMore && !filesLoading) {
-      this.setState({ loading: true, error: false }, () => {
-        const delay = 300;
-        setTimeout(() => onLoadMoreFiles(this.itemsPerPage, (success) => {
-          this.setState({ loading: false, error: !success });
-          const nextPage = page.nextSibling;
-
-          if (nextPage) {
-            const selector = `:scope > div:nth-child(${selectedIndex + 1}) > button:first-child`;
-            const next = nextPage.querySelector(selector);
-            if (next) {
-              next.focus();
-            }
-          }
-        }), delay);
-      });
-
-      if (!retry) {
-        this.setState((state) => {
-          return { page: state.page + 1 };
-        });
-      }
-    }
-  }
-
-  onFocus = (activeFileIndex) => () => {
-    if (this.state.activeFileIndex === activeFileIndex) {
-      return;
-    }
-
-    this.thumbnailsContainer.scrollTo(0, 0);
-
-    this.setState({ activeFileIndex, lastActiveFileIndex: activeFileIndex }, () => {
-      this.autoDetectPage(activeFileIndex);
-    });
-  }
-
-  onBlur = () => {
-    setTimeout(() => {
-      if (!this.filelist) {
-        return;
-      }
-
-      const focused = this.filelist.querySelector(":focus");
-      if (!focused) {
-        const { activeFileIndex } = this.state;
-
-        this.setState({
-          activeFileIndex: undefined,
-          lastActiveFileIndex: activeFileIndex,
-        });
-      }
-    }, 0);
-  }
-
-  onNextPage = (event) => {
-    if (event.isDefaultPrevented()) {
-      return;
-    }
-
-    const { onLoadMoreFiles, filesLoading, filesCanLoadMore } = this.context;
-    let { page } = this.state;
-    let pagesLength = Math.ceil(this.pages.length / this.columns);
-
-    if (this.state.loading) {
-      return;
-    }
-
-    if (filesLoading) {
-      pagesLength += 1;
-    }
-
-    if (page === pagesLength - 1) {
-      if (!filesCanLoadMore || filesLoading) {
-        return;
-      }
-
-      this.setState({ loading: true }, () => {
-        const delay = 300;
-        setTimeout(() => onLoadMoreFiles(Math.min(this.itemsPerPage, MAX_ITEMS_PER_PAGE), (success) => {
-          this.setState({ loading: false, error: !success }, this.fillPageWithFiles);
-        }), delay);
-      });
-    }
-
-    page += 1;
-    const lastActiveFileIndex = page * this.itemsPerPage;
-    this.setState({ page, lastActiveFileIndex });
-  }
-
-  onPrevPage = (event) => {
-    if (event.isDefaultPrevented()) {
-      return;
-    }
-
-    let { page } = this.state;
-
-    if (page === 0) {
-      return;
-    }
-
-    page -= 1;
-    const lastActiveFileIndex = page * this.itemsPerPage;
-
-    this.setState({ page, lastActiveFileIndex });
-  }
-
-  autoDetectPage = (activeFileIndex) => {
-    const pageIndex = Math.floor(activeFileIndex / this.rows);
-
-    const page = Math.floor(pageIndex / this.columns);
-
-    if (page !== this.state.page) {
-      this.setState({ page });
-    }
-  }
-
-  getParentPage = (element) => {
-    if (element.classList.contains(style.page)) {
-      return element;
-    }
-
-    return this.getParentPage(element.parentNode);
-  }
-
-  fillPageWithFiles = () => {
-    const { files, filesCanLoadMore, filesCount, filesLoading, onLoadMoreFiles } = this.context;
-    const diff = files.length % this.itemsPerPage;
-
-    if (diff > 0 && filesCanLoadMore && !filesLoading) {
-      this.resizeTimeout = setTimeout(() => {
-        let itemsToLoad = Math.min(this.itemsPerPage - diff, filesCount - files.length);
-        itemsToLoad = Math.min(itemsToLoad, MAX_ITEMS_PER_PAGE);
-
-        onLoadMoreFiles(itemsToLoad, () => {
-          this.fillPageWithFiles();
-        });
-      });
-    }
-  }
-
-  get rows() {
-    const { fsStatus } = this.context;
-    let { viewportSize: { height } } = this.state;
-    if (fsStatus) {
-      const screenHeight = window.screen.height;
-      height = screenHeight;
-    }
-
-    const rowsObject = fsStatus ? FS_ROWS : ROWS;
-
-    const [, rows] = Object.entries(rowsObject).find(([size]) => height <= size) || [];
-
-    return rows || MAX_ROWS;
-  }
-
-  get columns() {
-    const { viewportSize: { width } } = this.state;
-
-    const [, columns] = Object.entries(COLUMNS).find(([size]) => width <= size) || [];
-
-    return columns || MAX_COLS;
-  }
-
-  get itemsPerPage() {
-    return this.rows * this.columns;
-  }
-
-  get pages() {
-    const { files } = this.context;
-    const pages = [];
-
-    const items = this.rows;
-
-    files.forEach((file, index) => {
-      if (index % items === 0) {
-        pages.push([]);
-      }
-
-      file.index = index;
-      pages[pages.length - 1].push(file);
-    });
-
-    const diff = items - pages[pages.length - 1].length;
-    this.shouldLoadMore = diff;
-
-    return pages;
-  }
 }
diff --git a/src/pages/item/page/components/viewer/components/listView/index.test.jsx b/src/pages/item/page/components/viewer/components/listView/index.test.jsx
deleted file mode 100644
index 5219b6ff28..0000000000
--- a/src/pages/item/page/components/viewer/components/listView/index.test.jsx
+++ /dev/null
@@ -1,435 +0,0 @@
-import React, { Component } from "react";
-import { mount } from "enzyme";
-
-import files from "../../../../mocks/files";
-import Context from "../../context";
-import RatingTooltip from "../../../ratingSystem/tooltip";
-import { VIEW_MODES } from "../../constants";
-
-import TestedComponent from "./index";
-
-
-jest.mock("@figshare/fcl/popup");
-jest.mock("../../../ratingSystem/tooltip");
-
-const triggeredEvent = { isDefaultPrevented: () => false };
-const disabledEvent = { isDefaultPrevented: () => true };
-
-class Wrapped extends Component {
-  render() {
-    const context = {
-      onLoadMoreFiles: () => undefined,
-      onChangeFile: () => undefined,
-      item: { downloadDisabled: false },
-      filesLoading: false,
-      viewMode: VIEW_MODES.list,
-      files,
-      filesCount: files.length,
-      filesCanLoadMore: true,
-      ...this.props,
-    };
-
-    return (
-      <Context.Provider value={context}>
-        <TestedComponent />
-      </Context.Provider>
-    );
-  }
-}
-
-describe("<ViewersFileView />", () => {
-  it("renders correctly", () => {
-    jest.useFakeTimers();
-    let tested = mount(
-      <Wrapped
-        filesCanLoadMore={false}
-        filesLoading={true}
-        fsStatus={true}
-        viewMode={VIEW_MODES.list}
-      />
-    );
-    expect(tested.isEmptyRender()).toEqual(false);
-    jest.runAllTimers();
-
-    const instance = tested.find(TestedComponent).instance();
-    instance.setState({ page: 1, filesCanLoadMore: false });
-    tested.update();
-    expect(tested.isEmptyRender()).toEqual(false);
-
-    tested = mount(<Wrapped />);
-    expect(tested.isEmptyRender()).toEqual(false);
-
-    tested = mount(<Wrapped viewMode={VIEW_MODES.single} />);
-    expect(tested.isEmptyRender()).toEqual(true);
-
-    tested.unmount();
-  });
-
-  it("handles change file", () => {
-    const onChangeFile = jest.fn();
-    const tested = mount(<Wrapped onChangeFile={onChangeFile} />);
-    const instance = tested.find(TestedComponent).instance();
-    instance.onChangeFile(1, true)();
-    expect(onChangeFile).toHaveBeenCalledWith(1, true);
-
-    instance.onChangeFile(1)();
-    expect(onChangeFile).toHaveBeenCalledWith(1, false);
-  });
-
-  it("handles resize", () => {
-    const onLoadMoreFiles = jest.fn();
-    const tested = mount(<Wrapped onLoadMoreFiles={onLoadMoreFiles} />);
-    const instance = tested.find(TestedComponent).instance();
-
-    instance.setState({ page: 20 });
-    const { viewportSize } = instance.state;
-    const increaseViewport = 1000;
-    instance.viewport = {
-      offsetWidth: viewportSize.width,
-      offsetHeight: viewportSize.height,
-    };
-    instance.fillPageWithFiles = jest.fn();
-    instance.onResize();
-    expect(instance.fillPageWithFiles).not.toHaveBeenCalled();
-
-    instance.viewport = {
-      offsetWidth: viewportSize.width + increaseViewport,
-      offsetHeight: viewportSize.height,
-    };
-    instance.fillPageWithFiles = jest.fn();
-    instance.onResize();
-    expect(instance.fillPageWithFiles).toHaveBeenCalled();
-  });
-
-  it("fills page with files", () => {
-    const testedFiles = Array.from({ length: 167 }).map((_, index) => {
-      return {
-        ...files[0],
-        id: index + 1,
-      };
-    });
-    const onLoadMoreFiles = jest.fn();
-    const tested = mount(<Wrapped files={testedFiles} filesCount={files.length} onLoadMoreFiles={onLoadMoreFiles} />);
-    const instance = tested.find(TestedComponent).instance();
-
-    instance.setState({ page: 20 });
-    instance.state.viewport = {
-      offsetWidth: 498,
-      offsetHeight: 365,
-    };
-    jest.useFakeTimers();
-    instance.fillPageWithFiles();
-    jest.runAllTimers();
-    expect(onLoadMoreFiles).toHaveBeenCalled();
-    const callback = onLoadMoreFiles.mock.calls[0][1];
-    instance.fillPageWithFiles = jest.fn();
-    callback();
-    expect(instance.fillPageWithFiles).toHaveBeenCalled();
-  });
-
-  it("handles key down", () => {
-    const tested = mount(<Wrapped />);
-    const instance = tested.find(TestedComponent).instance();
-
-    const event = {
-      preventDefault: jest.fn(),
-      stopPropagation: jest.fn(),
-    };
-
-    instance.onKeyDown(event);
-    expect(event.preventDefault).not.toHaveBeenCalled();
-    expect(event.stopPropagation).not.toHaveBeenCalled();
-
-    instance.onKeyDown({ ...event, key: "ArrowUp" });
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-  });
-
-  it("handles key up", () => {
-    const testedFiles = Array.from({ length: 20 }).map((_, index) => {
-      return {
-        ...files[0],
-        id: index + 1,
-      };
-    });
-    const tested = mount(<Wrapped files={testedFiles} filesCount={testedFiles.length} />);
-    const instance = tested.find(TestedComponent).instance();
-    instance.onLoadMoreFiles = jest.fn();
-
-    const selector = ":scope > div > button:first-child";
-    const allPages = tested.find(".page");
-
-    const event = {
-      preventDefault: jest.fn(),
-      stopPropagation: jest.fn(),
-      target: allPages.at(0).getDOMNode().querySelector(selector),
-    };
-
-    instance.onKeyUp(event);
-    expect(event.preventDefault).not.toHaveBeenCalled();
-    expect(event.stopPropagation).not.toHaveBeenCalled();
-
-    event.key = "ArrowRight";
-    instance.onKeyUp(event);
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-    expect(instance.onLoadMoreFiles).not.toHaveBeenCalled();
-
-    event.target = allPages.at(4).getDOMNode().querySelector(selector);
-    instance.onKeyUp(event);
-    expect(instance.onLoadMoreFiles).toHaveBeenCalled();
-
-    event.key = "ArrowLeft";
-    instance.onKeyUp(event);
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-
-    event.target = allPages.at(0).getDOMNode().querySelector(selector);
-    instance.onKeyUp(event);
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-
-    event.key = "ArrowDown";
-    instance.onKeyUp(event);
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-
-    event.key = "ArrowDown";
-    let buttons = allPages.at(4).getDOMNode().querySelectorAll(selector);
-    event.target = buttons.item(buttons.length - 1);
-    instance.onKeyUp(event);
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-
-    event.key = "ArrowDown";
-    buttons = allPages.at(1).getDOMNode().querySelectorAll(selector);
-    event.target = buttons.item(buttons.length - 1);
-    instance.onKeyUp(event);
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-
-    event.key = "ArrowUp";
-    instance.onKeyUp(event);
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-
-    event.key = "ArrowUp";
-    buttons = allPages.at(0).getDOMNode().querySelectorAll(selector);
-    event.target = buttons.item(0);
-    instance.onKeyUp(event);
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-
-    event.key = "ArrowUp";
-    buttons = allPages.at(1).getDOMNode().querySelectorAll(selector);
-    event.target = buttons.item(0);
-    instance.onKeyUp(event);
-    expect(event.preventDefault).toHaveBeenCalled();
-    expect(event.stopPropagation).toHaveBeenCalled();
-
-    instance.onNextPage = jest.fn();
-    instance.onPrevPage = jest.fn();
-
-    event.key = "PageUp";
-    instance.onKeyUp(event);
-    expect(instance.onPrevPage).toHaveBeenCalled();
-
-    event.key = "PageDown";
-    instance.onKeyUp(event);
-    expect(instance.onNextPage).toHaveBeenCalled();
-    instance.onNextPage.mockClear();
-
-    tested.setProps({ filesLoading: true });
-    tested.update();
-    instance.onKeyUp(event);
-    expect(instance.onNextPage).not.toHaveBeenCalled();
-  });
-
-  it("handles load more files", () => {
-    const onLoadMoreFiles = jest.fn();
-    const testedFiles = Array.from({ length: 20 }).map((_, index) => {
-      return {
-        ...files[0],
-        id: index + 1,
-      };
-    });
-    const tested = mount(
-      <Wrapped
-        files={testedFiles}
-        filesCount={testedFiles.length}
-        onLoadMoreFiles={onLoadMoreFiles}
-      />
-    );
-    const instance = tested.find(TestedComponent).instance();
-    instance.viewport = { offsetHeight: 768 };
-    instance.onResize();
-    instance.setState({ page: 0 });
-
-    let page = tested.find(".page").at(0).getDOMNode();
-    jest.useFakeTimers();
-    instance.onLoadMoreFiles(page, 0);
-    jest.runAllTimers();
-    let callback = onLoadMoreFiles.mock.calls[1][1];
-    callback();
-    expect(onLoadMoreFiles).toHaveBeenCalled();
-
-    page = tested.find(".page").at(3).getDOMNode();
-    jest.useFakeTimers();
-    instance.onLoadMoreFiles(page, 0);
-    jest.runAllTimers();
-    callback = onLoadMoreFiles.mock.calls[2][1];
-    callback();
-    expect(onLoadMoreFiles).toHaveBeenCalled();
-
-    page = tested.find(".page").at(1).getDOMNode();
-    jest.useFakeTimers();
-    instance.onLoadMoreFiles(page, page.children.length);
-    jest.runAllTimers();
-    callback = onLoadMoreFiles.mock.calls[3][1];
-    callback();
-    expect(onLoadMoreFiles).toHaveBeenCalled();
-    expect(instance.state.page).toEqual(3);
-
-    const currentPage = instance.state.page;
-    instance.onLoadMoreFiles(page, 0, true);
-    expect(instance.state.page).toEqual(currentPage);
-
-    tested.setProps({ filesCanLoadMore: false });
-    tested.update();
-    instance.onLoadMoreFiles(page, 0);
-    expect(instance.state.page).toEqual(3);
-  });
-
-  it("handles focus", () => {
-    const tested = mount(<Wrapped />);
-    const instance = tested.find(TestedComponent).instance();
-    instance.thumbnailsContainer.scrollTo = jest.fn();
-
-    instance.setState({ activeFileIndex: 0 });
-    instance.onFocus(0)();
-    expect(instance.thumbnailsContainer.scrollTo).not.toHaveBeenCalled();
-
-    instance.onFocus(1)();
-    expect(instance.thumbnailsContainer.scrollTo).toHaveBeenCalled();
-  });
-
-  it("handles blur", () => {
-    const tested = mount(<Wrapped />);
-    const instance = tested.find(TestedComponent).instance();
-    jest.useFakeTimers();
-
-    const activeIndex = instance.state.activeFileIndex;
-    instance.onBlur();
-    jest.runAllTimers();
-    expect(instance.state.activeFileIndex).toEqual(undefined);
-    expect(instance.state.lastActiveFileIndex).toEqual(activeIndex);
-
-    instance.filelist.querySelector = () => true;
-    instance.onBlur();
-    jest.runAllTimers();
-    expect(instance.state.activeFileIndex).toEqual(undefined);
-    expect(instance.state.lastActiveFileIndex).toEqual(activeIndex);
-
-    instance.filelist = null;
-    instance.onBlur();
-    jest.runAllTimers();
-    expect(instance.state.activeFileIndex).toEqual(undefined);
-    expect(instance.state.lastActiveFileIndex).toEqual(activeIndex);
-  });
-
-  it("handles next page", () => {
-    const onLoadMoreFiles = jest.fn();
-    const testedFiles = Array.from({ length: 20 }).map((_, index) => {
-      return {
-        ...files[0],
-        id: index + 1,
-      };
-    });
-    const tested = mount(
-      <Wrapped
-        files={testedFiles}
-        filesCount={testedFiles.length}
-        onLoadMoreFiles={onLoadMoreFiles}
-      />
-    );
-    const instance = tested.find(TestedComponent).instance();
-    instance.viewport = { offsetHeight: 768 };
-    instance.onResize();
-
-    instance.setState({ page: 0 });
-    instance.onNextPage(triggeredEvent);
-    expect(instance.state.page).toEqual(1);
-    instance.onNextPage(disabledEvent);
-    expect(instance.state.page).toEqual(1);
-
-    instance.setState({ loading: true });
-    instance.onNextPage(triggeredEvent);
-    expect(instance.state.page).toEqual(1);
-
-    tested.setProps({ filesLoading: true });
-    tested.update();
-    instance.setState({ loading: false });
-    instance.onNextPage(triggeredEvent);
-    expect(instance.state.page).toEqual(1);
-
-    jest.useFakeTimers();
-    tested.setProps({ filesLoading: false });
-    instance.setState({ page: 2 });
-    tested.update();
-    instance.onNextPage(triggeredEvent);
-    jest.runAllTimers();
-    const callback = onLoadMoreFiles.mock.calls[1][1];
-    callback();
-    expect(instance.state.page).toEqual(3);
-
-    tested.setProps({ filesLoading: true });
-    instance.setState({ page: 3, loading: false });
-    tested.update();
-    instance.onNextPage(triggeredEvent);
-    expect(instance.state.page).toEqual(4);
-  });
-
-  it("handles prev page", () => {
-    const testedFiles = Array.from({ length: 20 }).map((_, index) => {
-      return {
-        ...files[0],
-        id: index + 1,
-      };
-    });
-    const tested = mount(
-      <Wrapped
-        files={testedFiles}
-        filesCount={testedFiles.length}
-      />
-    );
-    const instance = tested.find(TestedComponent).instance();
-
-    instance.setState({ page: 1 });
-
-    instance.onPrevPage(disabledEvent);
-    expect(instance.state.page).toEqual(1);
-
-    instance.onPrevPage(triggeredEvent);
-    expect(instance.state.page).toEqual(0);
-
-    instance.onPrevPage(triggeredEvent);
-    expect(instance.state.page).toEqual(0);
-  });
-
-  it("correctly returns the max number of rows and columns", () => {
-    const tested = mount(<Wrapped />);
-    const instance = tested.find(TestedComponent).instance();
-
-    const MAX_SIZE = 32000;
-    const maxRows = 13;
-    const maxCols = 5;
-    instance.setState({ viewportSize: { width: MAX_SIZE, height: MAX_SIZE } });
-    expect(instance.rows).toEqual(maxRows);
-    expect(instance.columns).toEqual(maxCols);
-  });
-
-  it("renders ratingTooltip correctly", () => {
-    const tested = mount(<Wrapped />);
-    expect(tested.find(RatingTooltip)).toHaveLength(1);
-  });
-});
diff --git a/src/pages/item/page/components/viewer/components/listView/listView.css b/src/pages/item/page/components/viewer/components/listView/listView.css
new file mode 100644
index 0000000000..23e028ee4a
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/listView/listView.css
@@ -0,0 +1,11 @@
+.listView {
+  position: relative;
+
+  display: flex;
+  flex-direction: row;
+
+  width: 100%;
+
+  background: white;
+  justify-content: center;
+}
diff --git a/src/pages/item/page/components/viewer/components/listView/listView.test.jsx b/src/pages/item/page/components/viewer/components/listView/listView.test.jsx
new file mode 100644
index 0000000000..8cfc754bdc
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/listView/listView.test.jsx
@@ -0,0 +1,52 @@
+import React from "react";
+import { mount } from "enzyme";
+
+import Context from "../../context";
+import RatingTooltip from "../../../ratingSystem/tooltip";
+import { VIEW_MODES } from "../../constants";
+
+import ListView from "./index";
+import ListViewTable from "./listViewTable";
+
+
+jest.mock("../../../ratingSystem/tooltip");
+
+
+describe("<ListView />", () => {
+  const context = {
+    fsStatus: false,
+    files: [],
+    item: {
+      folderStructure: { 1: "dir1" },
+      downloadUrl: "downloadUrl",
+      virusScanInfo: { virusFound: false },
+    },
+    viewMode: VIEW_MODES.list,
+  };
+
+  const props = { downloadDisabled: false };
+
+  function mountComponent({ newContext, newProps }) {
+    return mount(
+      <Context.Provider value={ { ...context, ...newContext } }>
+        <ListView {...props} {...newProps} />
+      </Context.Provider>
+    );
+  }
+
+  it("renders list view table when view mode is list", () => {
+    const tested = mountComponent({});
+    expect(tested.isEmptyRender()).toEqual(false);
+    expect(tested.find(ListViewTable)).toHaveLength(1);
+  });
+
+  it("renders ratingTooltip", () => {
+    const tested = mountComponent({});
+    expect(tested.find(RatingTooltip)).toHaveLength(1);
+  });
+
+  it("renders no ratingTooltip", () => {
+    const tested = mountComponent({ newContext: { fsStatus: true } });
+    expect(tested.find(RatingTooltip)).toHaveLength(0);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/listView/listViewTable/index.jsx b/src/pages/item/page/components/viewer/components/listView/listViewTable/index.jsx
new file mode 100644
index 0000000000..012ad3795c
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/listView/listViewTable/index.jsx
@@ -0,0 +1,179 @@
+import React, { useMemo, useContext } from "react";
+import getIn from "utils/getIn";
+import { bool } from "prop-types";
+import renderers from "shared/table/renderers";
+import { Table, TableContext, useTableState } from "shared/table";
+import { sortBy } from "shared/table/utils/sort";
+import filesize from "utils/filesize";
+
+import { getFileIndexById } from "../../../utils";
+import ViewerContext from "../../../context";
+
+import TableActions from "./tableActions";
+import style from "./listViewTable.css";
+
+
+export const LIST_VIEW_TABLE = {
+  id: "list-view-table",
+  sortable: true,
+  selectable: true,
+  orderable: false,
+  key: "id",
+  empty: "No files to display.",
+  columns: [
+    {
+      id: "name",
+      width: "100%",
+      sortable: true,
+      accessor: "name",
+      heading: () => <span>Name</span>,
+      cell: ({ value, row }) => {
+        const fileName = value.replace(`.${row?.extension}`, "");
+
+        return (<span>{row?.isDirectory ? value : fileName}</span>);
+      },
+    },
+    {
+      id: "extension",
+      width: "210px",
+      accessor: "extension",
+      sortable: true,
+      heading: () => <span>Format</span>,
+      cell: ({ value, row }) => (<span>{row?.isDirectory ? "Folder" : value}</span>),
+    },
+    {
+      id: "size",
+      width: "210px",
+      accessor: "size",
+      sortable: true,
+      heading: () => <span>Size</span>,
+      cell: ({ value, row }) => {
+        const size = filesize(value).format();
+
+        return (<span>{row?.isDirectory ? "-" : size} </span>);
+      },
+    },
+    {
+      id: "suppliedMd5",
+      width: "100%",
+      minWidth: "140px",
+      accessor: "suppliedMd5",
+      sortable: false,
+      heading: () => <span>MD5 checksum</span>,
+      cell: ({ value, row }) => (<span>{row?.isDirectory ? "-" : value}</span>),
+    },
+    {
+      id: "actions",
+      width: "114px",
+      accessor: "index",
+      heading: () => <span className={style.actionHeader}>Action</span>,
+      cell: ({ value, row }, { dependencies }) => {
+        const { downloadDisabled, downloadUrl, folderStructure, token } = dependencies;
+
+        let downloadHref = null;
+        if (row?.isDirectory) {
+          downloadHref = `${downloadUrl}?folder_path=${row?.completePath}`;
+          if (token) {
+            downloadHref += `&private_link=${token}`;
+          }
+        } else {
+          downloadHref = row?.downloadUrl;
+        }
+
+        let fileIndex = value;
+        if (folderStructure && Object.keys(folderStructure)?.length) {
+          fileIndex = getFileIndexById(row?.id, folderStructure);
+        }
+
+        return (
+          <TableActions
+            downloadDisabled={downloadDisabled}
+            downloadUrl={downloadDisabled ? null : downloadHref}
+            index={fileIndex}
+            item={row}
+            virusFound={row?.virusScanInfo?.virusFound}
+          />
+        );
+      },
+    },
+  ],
+};
+
+
+export function useRenderListViewTableBody(state, dependencies) {
+  const { config, data, sort } = state;
+  const { levelHierarchy, onChangeFile, onChangeParentDirectory } = useContext(ViewerContext);
+
+  let { order } = state;
+
+  if (config.sortable && sort.length) {
+    order = sortBy(sort, data, config);
+  }
+
+  return (<Table.Body>
+    {order.map((key, index) => {
+      const row = state.keyed.get(key);
+
+      let fileIndex = index;
+      if (dependencies.folderStructure && Object.keys(dependencies.folderStructure)?.length) {
+        fileIndex = getFileIndexById(row?.id, dependencies.folderStructure);
+      }
+
+      let onClick = null;
+      if (row?.isDirectory) {
+        onClick = () => onChangeParentDirectory(row, [...levelHierarchy, row], row?.children);
+      } else {
+        onClick = () => onChangeFile(fileIndex);
+      }
+
+      return (<Table.Row key={key} data-row-id={key}>
+        {config.columns.map((coldef) => {
+          if (coldef.id === "actions") {
+            onClick = null;
+          }
+
+          return (
+            <Table.Cell key={coldef.id} data-cell-id={coldef.id} onClick={onClick}>
+              {coldef.cell({ value: getIn(row, coldef.accessor), fileIndex, row, state }, { dependencies })}
+            </Table.Cell>
+          );
+        })}
+      </Table.Row>);
+    })}
+  </Table.Body>);
+}
+
+
+export default function ListViewTable({ downloadDisabled }) {
+  const { files, item, token } = useContext(ViewerContext);
+  const { downloadUrl, folderStructure } = item;
+
+  const tableState = useTableState({
+    config: LIST_VIEW_TABLE,
+    data: files,
+    total: files.length,
+    id: "list-view-table",
+  });
+
+  const tableContext = useMemo(() => tableState, [tableState]);
+
+  const dependencies = useMemo(() => {
+    return { downloadDisabled, downloadUrl, folderStructure, token };
+  }, [downloadDisabled, downloadUrl, folderStructure, token]);
+
+  return (
+    <TableContext.Provider value={tableContext}>
+      <Table.Container>
+        <Table>
+          {renderers.header(tableState, dependencies)}
+          {useRenderListViewTableBody(tableState, dependencies)}
+          {renderers.moreFooter(tableState, dependencies)}
+        </Table>
+      </Table.Container>
+    </TableContext.Provider>
+  );
+}
+
+ListViewTable.propTypes = { downloadDisabled: bool };
+
+ListViewTable.defaultProps = { downloadDisabled: true };
diff --git a/src/pages/item/page/components/viewer/components/listView/listViewTable/listViewTable.css b/src/pages/item/page/components/viewer/components/listView/listViewTable/listViewTable.css
new file mode 100644
index 0000000000..bc92892c95
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/listView/listViewTable/listViewTable.css
@@ -0,0 +1,9 @@
+.actionHeader {
+  display: flex;
+  justify-content: center;
+}
+
+tbody tr:hover,
+tbody tr:focus {
+  background-color: var(--color-layout-secondary-background);
+}
diff --git a/src/pages/item/page/components/viewer/components/listView/listViewTable/listViewTable.test.jsx b/src/pages/item/page/components/viewer/components/listView/listViewTable/listViewTable.test.jsx
new file mode 100644
index 0000000000..dfbde4214b
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/listView/listViewTable/listViewTable.test.jsx
@@ -0,0 +1,47 @@
+import React from "react";
+import { mount } from "enzyme";
+import { Table, TableContext } from "shared/table";
+
+import Context from "../../../context";
+
+import ListViewTable, { LIST_VIEW_TABLE } from "./index";
+
+
+const mountComponent = ({ context, props, state }) => mount(
+  <Context.Provider value={context} >
+    <TableContext.Provider value={state}>
+      <ListViewTable {...props} />
+    </TableContext.Provider>
+  </Context.Provider>
+);
+
+
+describe("ListViewTable", () => {
+  const context = {
+    files: [
+      { id: 100, name: "test.jpg", extension: "jpg", size: 100, suppliedMd5: "md51", index: 0 },
+      { id: 101, name: "test.txt", extension: "txt", size: 250, suppliedMd5: "md52", index: 1 },
+    ],
+    item: { id: 1, folderStructure: { 100: "dir1" } },
+    levelHierarchy: [],
+    token: "token",
+    onChangeFile: jest.fn(),
+    onChangeParentDirectory: jest.fn(),
+  };
+
+  const props = { downloadDisabled: false };
+
+  const state = {
+    data: context.files,
+    config: LIST_VIEW_TABLE,
+    total: context.files.length,
+    id: "list-view-table",
+  };
+
+  it("renders table", () => {
+    const tested = mountComponent({ context, props, state });
+
+    expect(tested.isEmptyRender()).toEqual(false);
+    expect(tested.find(Table)).toHaveLength(1);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/listView/listViewTable/tableActions/index.jsx b/src/pages/item/page/components/viewer/components/listView/listViewTable/tableActions/index.jsx
new file mode 100644
index 0000000000..ed78ea30a5
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/listView/listViewTable/tableActions/index.jsx
@@ -0,0 +1,105 @@
+import React, { useContext } from "react";
+import { bool, number, object, oneOfType, string } from "prop-types";
+import { IconButton } from "@figshare/fcl/button";
+import { Trigger, UncontrolledToggletip as Toggletip } from "@figshare/fcl/toggletip";
+import DownloadIcon from "@figshare/fcl/icons/download";
+import DownloadLockIcon from "@figshare/fcl/icons/downloadLock";
+import Exclamation from "@figshare/fcl/icons/warning/small";
+import EyeIcon from "@figshare/fcl/icons/eye/visible/medium";
+
+import ViewerContext from "../../../../context";
+import VirusTooltip from "../../../../../virusTooltip";
+
+import style from "./tableActions.css";
+
+
+export default function TableActions({ downloadDisabled, downloadUrl, index, item, virusFound }) {
+  const { onChangeFile } = useContext(ViewerContext);
+  const { isDirectory } = item;
+
+  const downloadLabel = downloadDisabled ? "This item contains files with download restrictions" : `Download \
+${isDirectory ? "folder" : "file"}`;
+  const downloadIcon = downloadDisabled ? DownloadLockIcon : DownloadIcon;
+
+  const onClick = () => onChangeFile(index);
+
+  const renderDownloadButton = () => (
+    <IconButton
+      Icon={downloadIcon}
+      disabled={!!downloadDisabled}
+      href={downloadUrl}
+      theme="tertiary"
+      onClick={(event) => {
+        event.stopPropagation();
+      }}
+    >
+      {downloadLabel}
+    </IconButton>
+  );
+
+  const renderVirusButton = (triggerProps) => {
+    const { ref, ...restProps } = triggerProps;
+
+    return (
+      <>
+        <IconButton
+          Icon={DownloadIcon}
+          innerRef={ref}
+          theme="tertiary"
+          {...restProps}
+        >
+          {`Download ${isDirectory ? "folder" : "file"}`}
+        </IconButton>
+        <Exclamation className={style.virusWarning} />
+      </>
+    );
+  };
+
+  const renderToggleTipContent = () => (
+    <>
+      <Trigger>
+        {renderVirusButton}
+      </Trigger>
+      <VirusTooltip placement="bottom" />
+    </>
+  );
+
+  const renderDownloadWithVirus = () => (
+    <Toggletip>
+      {renderToggleTipContent}
+    </Toggletip>
+  );
+
+
+  return (
+    <div key={index} className={style.icons}>
+      {!isDirectory &&
+        <IconButton
+          Icon={EyeIcon}
+          theme="tertiary"
+          onClick={onClick}
+        >
+          View file
+        </IconButton>
+      }
+      {virusFound && renderDownloadWithVirus()}
+      {!virusFound && renderDownloadButton()}
+    </div>
+  );
+}
+
+TableActions.propTypes = {
+  downloadDisabled: bool,
+  downloadUrl: oneOfType([string, object]),
+  index: oneOfType([string, number]),
+  item: object,
+  virusFound: bool,
+};
+
+TableActions.defaultProps = {
+  downloadDisabled: true,
+  downloadUrl: undefined,
+  index: undefined,
+  item: {},
+  virusFound: false,
+};
diff --git a/src/pages/item/page/components/viewer/components/listView/listViewTable/tableActions/tableActions.css b/src/pages/item/page/components/viewer/components/listView/listViewTable/tableActions/tableActions.css
new file mode 100644
index 0000000000..99cb09b235
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/listView/listViewTable/tableActions/tableActions.css
@@ -0,0 +1,12 @@
+.icons {
+  display: flex;
+  flex-direction: row;
+  justify-content: flex-end;
+  gap: var(--gridSize);
+
+  padding: 0 var(--gridSize);
+}
+
+.virusWarning {
+  fill: var(--color-iconButton-primary-icon);
+}
diff --git a/src/pages/item/page/components/viewer/components/listView/listViewTable/tableActions/tableActions.test.jsx b/src/pages/item/page/components/viewer/components/listView/listViewTable/tableActions/tableActions.test.jsx
new file mode 100644
index 0000000000..e031c7a961
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/listView/listViewTable/tableActions/tableActions.test.jsx
@@ -0,0 +1,122 @@
+import React from "react";
+import { mount } from "enzyme";
+import DownloadIcon from "@figshare/fcl/icons/download";
+import DownloadLockIcon from "@figshare/fcl/icons/downloadLock";
+import Exclamation from "@figshare/fcl/icons/warning/small";
+import EyeIcon from "@figshare/fcl/icons/eye/visible/medium";
+import { IconButton } from "@figshare/fcl/button";
+
+import Context from "../../../../context";
+
+import TableActions from "./index";
+
+
+const mountComponent = ({ context, props }) => mount(
+  <Context.Provider value={context} >
+    <TableActions {...props} />
+  </Context.Provider>
+);
+
+const context = { onChangeFile: jest.fn() };
+
+const props = {
+  downloadDisabled: false,
+  downloadUrl: "download/url",
+  index: 0,
+  item: { id: "dir1", isDirectory: true },
+  virusFound: false,
+};
+
+describe("TableActions", () => {
+  it("renders icons container", () => {
+    const tested = mountComponent({ context, props });
+
+    expect(tested.isEmptyRender()).toEqual(false);
+    expect(tested.find(".icons")).toHaveLength(1);
+  });
+
+  it("renders only download icon when the item is a directory", () => {
+    const tested = mountComponent({ context, props });
+
+    expect(tested.find(IconButton)).toHaveLength(1);
+    expect(tested.find(DownloadIcon)).toHaveLength(1);
+    expect(tested.find(EyeIcon)).toHaveLength(0);
+    expect(tested.find(IconButton).props().children).toEqual("Download folder");
+    expect(tested.find(IconButton).props().disabled).toEqual(false);
+  });
+
+  it("renders locked download icon when download is disabled", () => {
+    const newProps = {
+      ...props,
+      downloadDisabled: true,
+    };
+
+    const tested = mountComponent({ context, props: newProps });
+
+    expect(tested.find(IconButton)).toHaveLength(1);
+    expect(tested.find(DownloadLockIcon)).toHaveLength(1);
+    expect(tested.find(EyeIcon)).toHaveLength(0);
+    expect(tested.find(IconButton).props().children).toEqual(
+      "This item contains files with download restrictions");
+    expect(tested.find(IconButton).props().disabled).toEqual(true);
+  });
+
+  it("renders both icons when the item is a file", () => {
+    const newProps = {
+      ...props,
+      item: { id: 1, name: "test.txt" },
+    };
+
+    const tested = mountComponent({ context, props: newProps });
+
+    expect(tested.find(IconButton)).toHaveLength(2);
+    expect(tested.find(DownloadIcon)).toHaveLength(1);
+    expect(tested.find(EyeIcon)).toHaveLength(1);
+    expect(tested.find(IconButton).at(0).props().children).toEqual("View file");
+    expect(tested.find(IconButton).at(1).props().children).toEqual("Download file");
+  });
+
+  it("renders download with virus button when directory has virus", () => {
+    const newProps = {
+      ...props,
+      virusFound: true,
+    };
+
+    const tested = mountComponent({ context, props: newProps });
+
+    expect(tested.find(IconButton)).toHaveLength(2);
+    expect(tested.find(DownloadIcon)).toHaveLength(1);
+    expect(tested.find(Exclamation)).toHaveLength(1);
+    expect(tested.find(IconButton).at(0).props().children).toEqual("Download folder");
+  });
+
+  it("renders download with virus button when file has virus", () => {
+    const newProps = {
+      ...props,
+      item: { id: 1, name: "test.txt" },
+      virusFound: true,
+    };
+
+    const tested = mountComponent({ context, props: newProps });
+
+    expect(tested.find(IconButton)).toHaveLength(3);
+    expect(tested.find(DownloadIcon)).toHaveLength(1);
+    expect(tested.find(Exclamation)).toHaveLength(1);
+    expect(tested.find(EyeIcon)).toHaveLength(1);
+    expect(tested.find(IconButton).at(0).props().children).toEqual("View file");
+    expect(tested.find(IconButton).at(1).props().children).toEqual("Download file");
+  });
+
+  it("handles on click on view file", () => {
+    const newProps = {
+      ...props,
+      item: { id: 1, name: "test.txt" },
+    };
+
+    const tested = mountComponent({ context, props: newProps });
+
+    tested.find(IconButton).at(0).simulate("click");
+
+    expect(context.onChangeFile).toHaveBeenCalledWith(props.index);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/main/index.jsx b/src/pages/item/page/components/viewer/components/main/index.jsx
index 465fb1b718..5b7cf2762e 100644
--- a/src/pages/item/page/components/viewer/components/main/index.jsx
+++ b/src/pages/item/page/components/viewer/components/main/index.jsx
@@ -1,4 +1,5 @@
 import React, { Component } from "react";
+import PropTypes from "prop-types";
 import networkManager from "services/networkManager";
 
 import { VIEW_MODES } from "../../constants";
@@ -12,6 +13,16 @@ import { getAccountData } from "./index.gql";
 
 
 export default class Main extends Component {
+  static propTypes = {
+    isLoadingFiles: PropTypes.bool,
+    loadedFiles: PropTypes.array,
+  }
+
+  static defaultProps = {
+    isLoadingFiles: false,
+    loadedFiles: [],
+  }
+
   static contextType = Context;
 
   state = { downloadDisabled: undefined };
@@ -23,6 +34,7 @@ export default class Main extends Component {
   }
 
   render() {
+    const { isLoadingFiles, loadedFiles } = this.props;
     const { viewMode } = this.context;
     const { downloadDisabled } = this.state;
 
@@ -34,7 +46,13 @@ export default class Main extends Component {
       return <ListView downloadDisabled={downloadDisabled} />;
     }
 
-    return <FileView downloadDisabled={downloadDisabled} />;
+    return (
+      <FileView
+        downloadDisabled={downloadDisabled}
+        isLoadingFiles={isLoadingFiles}
+        loadedFiles={loadedFiles}
+      />
+    );
   }
 
   getLoggedUser = async() => {
diff --git a/src/pages/item/page/components/viewer/components/main/index.test.jsx b/src/pages/item/page/components/viewer/components/main/main.test.jsx
similarity index 100%
rename from src/pages/item/page/components/viewer/components/main/index.test.jsx
rename to src/pages/item/page/components/viewer/components/main/main.test.jsx
diff --git a/src/pages/item/page/components/viewer/components/pathLevels/index.jsx b/src/pages/item/page/components/viewer/components/pathLevels/index.jsx
new file mode 100644
index 0000000000..d964225813
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/pathLevels/index.jsx
@@ -0,0 +1,72 @@
+import React, { Component } from "react";
+import { GenericButton } from "@figshare/fcl/button";
+
+import { CollapsibleBreadcrumbs } from
+  "../../../../../../account/itemEdit/main/form/formField/figshareFields/group/breadcrumbs";
+import ViewerContext from "../../context";
+import { mapFolderStructure } from "../../utils";
+
+import styles from "./pathLevels.css";
+
+
+export default class PathLevels extends Component {
+  static contextType = ViewerContext;
+
+  hierarchy = [];
+
+  render() {
+    const { item, parentDirectory } = this.context;
+
+    if (!item?.folderStructure || !Object.keys(item?.folderStructure)?.length) {
+      return null;
+    }
+
+    let count = -1;
+    const defaultLevel = { id: count, label: "Files" };
+    const levels = parentDirectory?.completePath ? parentDirectory?.completePath?.split("/") : [];
+
+    this.hierarchy = levels?.length ? levels.map((level) => {
+      count += 1;
+
+      return { id: count, label: level };
+    }) : levels;
+
+    const breadcrumbItems = [defaultLevel, ...this.hierarchy];
+
+    return (
+      <div className={styles.pathLevelsContainer}>
+        <CollapsibleBreadcrumbs
+          id="group-levels"
+          items={breadcrumbItems}
+          renderItem={this.renderLevel}
+        />
+      </div>
+    );
+  }
+
+  renderLevel = (item, { isLast, isCollapsed }) => (
+    <GenericButton
+      key={item.id}
+      className={isLast ? styles.activeLevel : undefined}
+      tooltip={isLast && isCollapsed ? item.label : undefined}
+      onClick={isLast ? undefined : this.onLevelChange(item.id)}
+    >
+      {item.label}
+    </GenericButton>
+  );
+
+  onLevelChange = (index) => () => {
+    const { item, levelHierarchy, onChangeParentDirectory } = this.context;
+
+    const directory = index >= 0 ? levelHierarchy[index] : {
+      name: "",
+      children: mapFolderStructure(item?.folderStructure),
+      completePath: "",
+      parentPath: "",
+    };
+    const newLevelHierarchy = index >= 0 ? levelHierarchy.slice(0, index + 1) : [];
+    const mappedFolderStructure = index >= 0 ? directory.children : mapFolderStructure(item?.folderStructure);
+
+    return onChangeParentDirectory(directory, newLevelHierarchy, mappedFolderStructure);
+  };
+}
diff --git a/src/pages/item/page/components/viewer/components/pathLevels/pathLevels.css b/src/pages/item/page/components/viewer/components/pathLevels/pathLevels.css
new file mode 100644
index 0000000000..b1f78dbc80
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/pathLevels/pathLevels.css
@@ -0,0 +1,28 @@
+.pathLevelsContainer {
+  width: 100%;
+  padding: calc(2 * var(--gridSize)) calc(2 * var(--gridSize));
+
+  border-bottom: 1px solid var(--color-border-primary);
+}
+
+.pathLevelsContainer > ul > li {
+  align-items: center !important;
+}
+
+.pathLevelsContainer button {
+  font-size: var(--typography-M-fontSize);
+  line-height: var(--typography-M-lineHeight);
+
+  color: var(--color-button-tertiaryAlt-label);
+}
+
+.pathLevelsContainer button:hover,
+.pathLevelsContainer button:focus {
+  text-decoration: none;
+
+  color: var(--color-button-tertiaryAlt-label_hover);
+}
+
+.activeLevel {
+  font-weight: bold;
+}
diff --git a/src/pages/item/page/components/viewer/components/pathLevels/pathLevels.test.jsx b/src/pages/item/page/components/viewer/components/pathLevels/pathLevels.test.jsx
new file mode 100644
index 0000000000..b01f31c9b2
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/pathLevels/pathLevels.test.jsx
@@ -0,0 +1,123 @@
+import React from "react";
+import { mount } from "enzyme";
+import { GenericButton } from "@figshare/fcl/button";
+
+import { CollapsibleBreadcrumbs } from
+  "../../../../../../account/itemEdit/main/form/formField/figshareFields/group/breadcrumbs";
+import Context from "../../context";
+import { mapFolderStructure } from "../../utils";
+
+import PathLevels from "./index";
+
+
+describe("<PathLevels />", () => {
+  const folderStructure = {
+    "100": "dir1",
+    "101": "dir1/dir2",
+    "102": "dir1/dir2/dir3",
+    "103": "",
+    "104": "dir4",
+  };
+
+  const mappedFolderStructure = mapFolderStructure(folderStructure);
+
+  const defaultParentDirectory = {
+    name: "",
+    children: mappedFolderStructure,
+    completePath: "",
+    parentPath: "",
+  };
+
+  const context = {
+    item: {
+      id: 1000,
+      folderStructure,
+    },
+    parentDirectory: defaultParentDirectory,
+    levelHierarchy: [],
+    onChangeParentDirectory: jest.fn(),
+  };
+
+  function mountComponent({ newContext }) {
+    return mount(
+      <Context.Provider value={ { ...context, ...newContext } }>
+        <PathLevels />
+      </Context.Provider>
+    );
+  }
+
+  it("renders null if folder structure is empty", () => {
+    const tested = mountComponent({ newContext: { item: { folderStructure: {} } } });
+
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("renders path levels when there is a folder structure", () => {
+    const tested = mountComponent({});
+
+    expect(tested.isEmptyRender()).toEqual(false);
+    expect(tested.find(".pathLevelsContainer")).toHaveLength(1);
+    expect(tested.find(CollapsibleBreadcrumbs)).toHaveLength(1);
+  });
+
+  it("renders hierarchy levels based on parent directory", () => {
+    let tested = mountComponent({});
+    const defaultLevel = { "id": -1, "label": "Files" };
+    let levels = [defaultLevel];
+
+    expect(tested.instance().hierarchy).toEqual([]);
+    expect(tested.find(CollapsibleBreadcrumbs).props().items).toEqual(levels);
+    expect(tested.find(GenericButton)).toHaveLength(levels.length);
+    expect(tested.find(GenericButton).props().children).toEqual(defaultLevel.label);
+
+    const parentDirectory = {
+      "children": ["102"],
+      "completePath": "dir1/dir2/dir3",
+      "id": "dir1/dir2/dir3",
+      "isDirectory": true,
+      "name": "dir3",
+      "parentPath": "dir1/dir2",
+    };
+
+    tested = mountComponent({ newContext: { parentDirectory } });
+    const hierarchy = [
+      { "id": 0, "label": "dir1" },
+      { "id": 1, "label": "dir2" },
+      { "id": 2, "label": "dir3" },
+    ];
+    levels = [defaultLevel, ...hierarchy];
+
+    expect(tested.instance().hierarchy).toEqual(hierarchy);
+    expect(tested.find(CollapsibleBreadcrumbs).props().items).toEqual(levels);
+    expect(tested.find(GenericButton)).toHaveLength(levels.length);
+    expect(tested.find(GenericButton).at(0).props().children).toEqual(levels[0].label);
+    expect(tested.find(GenericButton).at(1).props().children).toEqual(levels[1].label);
+    expect(tested.find(GenericButton).at(2).props().children).toEqual(levels[2].label);
+    expect(tested.find(GenericButton).at(3).props().children).toEqual(levels[3].label);
+  });
+
+  it("handles on level change", () => {
+    const parentDirectory = {
+      "children": ["104"],
+      "completePath": "dir4",
+      "id": "dir4",
+      "isDirectory": true,
+      "name": "dir4",
+      "parentPath": "",
+    };
+
+    const levelHierarchy = [parentDirectory];
+    const defaultLevel = { "id": -1, "label": "Files" };
+    const hierarchy = [
+      { "id": 0, "label": "dir4" },
+    ];
+    const levels = [defaultLevel, ...hierarchy];
+
+    const tested = mountComponent({ newContext: { parentDirectory, levelHierarchy } });
+    expect(tested.find(CollapsibleBreadcrumbs).props().items).toEqual(levels);
+
+    const defaultLevelButton = tested.find(GenericButton).at(0);
+    defaultLevelButton.simulate("click");
+    expect(context.onChangeParentDirectory).toHaveBeenCalledWith(defaultParentDirectory, [], mappedFolderStructure);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/sidebar/index.gql b/src/pages/item/page/components/viewer/components/sidebar/index.gql
deleted file mode 100644
index fd784c42c4..0000000000
--- a/src/pages/item/page/components/viewer/components/sidebar/index.gql
+++ /dev/null
@@ -1,5 +0,0 @@
-query getCurrentSession{
-    session {
-        account {id}
-    }
-}
diff --git a/src/pages/item/page/components/viewer/components/sidebar/index.jsx b/src/pages/item/page/components/viewer/components/sidebar/index.jsx
deleted file mode 100644
index 4102591641..0000000000
--- a/src/pages/item/page/components/viewer/components/sidebar/index.jsx
+++ /dev/null
@@ -1,29 +0,0 @@
-
-import React, { Component } from "react";
-import { AccountQuery } from "services/networkManager";
-
-import { getCurrentSession } from "./index.gql";
-import Bar from "./bar";
-
-
-const VISIBILITY_KEY_DESKTOP = "hideSideListView";
-
-export default class SidebarIndex extends Component {
-  render() {
-    return (
-      <AccountQuery query={getCurrentSession}>
-        {this.renderWithAccount}
-      </AccountQuery>
-    );
-  }
-
-
-  renderWithAccount=({ data }) => {
-    const { id } = data?.session?.account || { id: 0 };
-
-    return (
-      <Bar storageKey={`${VISIBILITY_KEY_DESKTOP}-${id}`} />
-    );
-  }
-}
-
diff --git a/src/pages/item/page/components/viewer/components/sidebar/index.test.jsx b/src/pages/item/page/components/viewer/components/sidebar/index.test.jsx
deleted file mode 100644
index ab3da306f8..0000000000
--- a/src/pages/item/page/components/viewer/components/sidebar/index.test.jsx
+++ /dev/null
@@ -1,49 +0,0 @@
-import React from "react";
-import { mount } from "enzyme";
-import { MockedProvider } from "utils/apollo/testing";
-
-import TestedComponent from "./index";
-import BarComponent from "./bar";
-import { getCurrentSession } from "./index.gql";
-
-
-jest.mock("./bar");
-
-describe("<Bar />", () => {
-  let mocks = [];
-
-  beforeEach(() => {
-    mocks = [{
-      request: { query: getCurrentSession },
-      result: { data: { session: { account: { id: 1 } } } },
-    }];
-  });
-
-  it("renders bar with account key", async() => {
-    const testedComponent = mount(
-      <MockedProvider addTypename={false} mocks={mocks}>
-        <TestedComponent />
-      </MockedProvider>
-    );
-
-    await mocks[0].response();
-    testedComponent.update();
-
-    expect(testedComponent.find(BarComponent).props().storageKey).toEqual("hideSideListView-1");
-  });
-
-  it("renders bar without account key", async() => {
-    mocks[0].result.data.session.account = null;
-
-    const testedComponent = mount(
-      <MockedProvider addTypename={false} mocks={mocks}>
-        <TestedComponent />
-      </MockedProvider>
-    );
-
-    await mocks[0].response();
-    testedComponent.update();
-
-    expect(testedComponent.find(BarComponent).props().storageKey).toEqual("hideSideListView-0");
-  });
-});
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/app.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/app.jsx
index db313ecb8f..7cd81deba8 100644
--- a/src/pages/item/page/components/viewer/components/thumbnailView/app.jsx
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/app.jsx
@@ -7,7 +7,9 @@ import ArrowRight from "@figshare/fcl/icons/angle/right";
 import { HighlightContext } from "shared/ui/highlights/highlightContext";
 
 import RatingTooltip from "../../../ratingSystem/tooltip";
+import Context from "../../context";
 
+import Directory from "./components/directory";
 import File from "./components/file";
 import Loading from "./components/loading";
 import Error from "./components/error";
@@ -32,7 +34,6 @@ export default class App extends Component {
     setFirstHighlightIndex: PropTypes.func.isRequired,
     viewportRef: PropTypes.func.isRequired,
     onBlur: PropTypes.func.isRequired,
-    onChangeFile: PropTypes.func.isRequired,
     onFocus: PropTypes.func.isRequired,
     onKeyDown: PropTypes.func.isRequired,
     onKeyUp: PropTypes.func.isRequired,
@@ -54,6 +55,8 @@ export default class App extends Component {
     pageClassname: undefined,
   }
 
+  static contextType = Context;
+
   componentDidUpdate(prevProps) {
     const { filesCount, firstHighlightIndex, itemsPerPage, moveToPage, page, pages } = this.props;
     const {
@@ -103,7 +106,7 @@ export default class App extends Component {
 
     const sliderStyle = { left: `calc(${100 * -page}% - calc(${page} * 3 * var(--gridSize)))` };
     const canLoadMore = (page === pagesLength - 1 && !filesCanLoadMore);
-    const maxPages = Math.max(Math.ceil(filesCount / itemsPerPage), pages.length);
+    const maxPages = Math.max(Math.ceil(filesCount / itemsPerPage), pages?.length);
 
     const nextPageDisabled = canLoadMore || loading || error || page >= maxPages - 1;
     const prevPageDisabled = page <= 0 ? true : undefined;
@@ -148,17 +151,17 @@ export default class App extends Component {
 
   renderPage = (files, index) => {
     const key = `page-${index}`;
-    const { page, onKeyUp, onKeyDown, pageClassname } = this.props;
+    const { columns, page, onKeyUp, onKeyDown, pageClassname } = this.props;
     const className = [
       pageClassname,
       { [style.inactive]: page !== index },
     ];
 
     let lastElements = [];
-    const rest = files.length % this.props.columns;
+    const rest = files?.length % columns;
 
     if (rest > 0) {
-      lastElements = files.splice(-1 * rest);
+      lastElements = files?.splice(-1 * rest);
     }
 
     return (
@@ -170,34 +173,42 @@ export default class App extends Component {
         onKeyDown={onKeyDown}
         onKeyUp={onKeyUp}
       >
-        {files.map(this.renderFile(false))}
-        {lastElements.map(this.renderFile(true))}
+        {files?.map(this.renderFile(false))}
+        {lastElements?.map(this.renderFile(true))}
       </div>
     );
   }
 
-  renderFile = (lastRow) => (file) => {
-    const { firstHighlightIndex, setFirstHighlightIndex } = this.props;
-    const { index } = file;
-
+  renderFile = (lastRow) => (element) => {
     const {
       activeFileIndex,
       downloadDisabled,
+      firstHighlightIndex,
       lastActiveFileIndex,
+      setFirstHighlightIndex,
       onBlur,
       onFocus,
     } = this.props;
-
-    const key = `file-${index}`;
+    const { id, index, isDirectory } = element;
+
+    if (isDirectory) {
+      return (
+        <Directory
+          key={`directory-${id}`}
+          directory={element}
+          downloadDisabled={downloadDisabled}
+        />
+      );
+    }
 
     return (
-      <HighlightContext.Consumer key={key}>
+      <HighlightContext.Consumer key={`file-${index}`}>
         {({ highlights }) => (
           <File
-            key={file.id}
+            key={element.id}
             activeFileIndex={activeFileIndex}
             downloadDisabled={downloadDisabled}
-            file={file}
+            file={element}
             firstHighlightIndex={firstHighlightIndex}
             highlights={highlights}
             lastActiveFileIndex={lastActiveFileIndex}
@@ -223,6 +234,6 @@ export default class App extends Component {
   }
 
   onClick = (index, showDetails = false) => () => {
-    this.props.onChangeFile(index, showDetails);
+    this.context.onChangeFile(index, showDetails);
   }
 }
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/app.test.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/app.test.jsx
index 8e671641bd..b890e9ea01 100644
--- a/src/pages/item/page/components/viewer/components/thumbnailView/app.test.jsx
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/app.test.jsx
@@ -1,6 +1,8 @@
 import React from "react";
 import { mount } from "enzyme";
 
+import Context from "../../context";
+
 import App from "./app";
 
 
@@ -12,43 +14,45 @@ function noOp() {
   return null;
 }
 
+const context = { onChangeFile: jest.fn() };
+
 describe("<ThumbnailViewApp />", () => {
   it("handles on click", () => {
 
-    const onChangeFile = jest.fn();
     const tested = mount(
-      <App
-        columns={4}
-        containerRef={noOp}
-        filesCanLoadMore={false}
-        filesCount={0}
-        filesLoading={false}
-        fileslistRef={noOp}
-        firstHighlightIndex={-1}
-        hideRatingTooltip={true}
-        itemsPerPage={1}
-        loading={false}
-        moveToPage={noOp}
-        page={1}
-        pages={[]}
-        setFirstHighlightIndex={noOp}
-        viewportRef={noOp}
-        onBlur={noOp}
-        onChangeFile={onChangeFile}
-        onFocus={noOp}
-        onKeyDown={noOp}
-        onKeyUp={noOp}
-        onNextPage={noOp}
-        onPrevPage={noOp}
-        onRetryLoadingFiles={noOp}
-      />
+      <Context.Provider value={context}>
+        <App
+          columns={4}
+          containerRef={noOp}
+          filesCanLoadMore={false}
+          filesCount={0}
+          filesLoading={false}
+          fileslistRef={noOp}
+          firstHighlightIndex={-1}
+          hideRatingTooltip={true}
+          itemsPerPage={1}
+          loading={false}
+          moveToPage={noOp}
+          page={1}
+          pages={[]}
+          setFirstHighlightIndex={noOp}
+          viewportRef={noOp}
+          onBlur={noOp}
+          onFocus={noOp}
+          onKeyDown={noOp}
+          onKeyUp={noOp}
+          onNextPage={noOp}
+          onPrevPage={noOp}
+          onRetryLoadingFiles={noOp}
+        />
+      </Context.Provider>
     );
 
     tested.instance().onClick(1)();
-    expect(onChangeFile).toHaveBeenCalledWith(1, false);
+    expect(context.onChangeFile).toHaveBeenCalledWith(1, false);
 
     tested.instance().onClick(1, true)();
-    expect(onChangeFile).toHaveBeenCalledWith(1, true);
+    expect(context.onChangeFile).toHaveBeenCalledWith(1, true);
   });
 
   it("moves to other page on resize", () => {
@@ -71,7 +75,6 @@ describe("<ThumbnailViewApp />", () => {
         setFirstHighlightIndex={noOp}
         viewportRef={noOp}
         onBlur={noOp}
-        onChangeFile={noOp}
         onFocus={noOp}
         onKeyDown={noOp}
         onKeyUp={noOp}
@@ -117,7 +120,6 @@ describe("<ThumbnailViewApp />", () => {
         setFirstHighlightIndex={noOp}
         viewportRef={noOp}
         onBlur={noOp}
-        onChangeFile={noOp}
         onFocus={noOp}
         onKeyDown={noOp}
         onKeyUp={noOp}
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/directory.css b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/directory.css
new file mode 100644
index 0000000000..4c77a77d5f
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/directory.css
@@ -0,0 +1,131 @@
+.directory {
+  position: relative;
+
+  display: flex;
+  flex-direction: column;
+
+  width: calc((100% - (6 * 3 * var(--gridSize))) / 7);
+  height: calc(28 * var(--gridSize));
+  margin-bottom: calc(6 * var(--gridSize));
+  flex-shrink: 0;
+
+  @media (max-width: 1921px) {
+    & {
+      width: calc((100% - (5 * 3 * var(--gridSize))) / 6);
+    }
+  }
+
+  @media (max-width: 1500px) {
+    & {
+      width: calc((100% - (4 * 3 * var(--gridSize))) / 5);
+    }
+  }
+
+  @media (max-width: 1200px) {
+    & {
+      width: calc((100% - (3 * 3 * var(--gridSize))) / 4);
+    }
+  }
+
+  @media (max-width: 900px) {
+    & {
+      width: calc((100% - (2 * 3 * var(--gridSize))) / 3);
+    }
+  }
+
+  @media (max-width: 720px) {
+    & {
+      width: calc((100% - ( 3 * var(--gridSize))) / 2);
+    }
+  }
+
+  @media (max-width: 640px) {
+    & {
+      width: 100%;
+    }
+  }
+}
+
+.button {
+  text-decoration: none;
+
+  &:hover,
+  &:focus {
+    text-decoration: none;
+  }
+}
+
+.icons {
+  display: flex;
+  flex-direction: row;
+
+  margin-left: auto;
+}
+
+.thumbnail {
+  position: relative;
+
+  display: block;
+
+  width: 100%;
+  height: calc(22 * var(--gridSize));
+  margin-bottom: var(--gridSize);
+}
+
+.directoryDetails {
+  font-size: var(--typography-S-fontSize);
+  line-height: var(--typography-S-lineHeight);
+
+  display: flex;
+  flex-direction: row;
+  align-items: center;
+
+  white-space: pre-wrap;
+
+  color: var(--color-typography-primary);
+}
+
+.thumbnail div {
+  color: var(--color-typography-secondary);
+}
+
+.directory:hover,
+.directory:focus {
+  z-index: 2;
+}
+
+.directory:hover + .directory,
+.directory:focus + .directory {
+  z-index: 0;
+}
+
+.directory:hover .button,
+.directory:focus .button {
+  width: calc(100% + calc(4 * var(--gridSize)));
+
+  padding: calc(2 * var(--gridSize));
+
+  transform: translate(calc(-2 * var(--gridSize)), calc(-2 * var(--gridSize)));
+
+  border-radius: var(--gridSize);
+  background: var(--color-layout-secondary-background);
+}
+
+.directoryName {
+  overflow: hidden;
+
+  white-space: nowrap;
+  text-overflow: ellipsis;
+}
+
+.virusWarning {
+  margin-left: var(--gridSize);
+  fill: var(--color-icon-error);
+}
+
+.virusTooltip span {
+  text-align: left;
+  justify-content: flex-start;
+
+  color: var(--color-typography-primary);
+}
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/directory.test.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/directory.test.jsx
new file mode 100644
index 0000000000..2ad17a993d
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/directory.test.jsx
@@ -0,0 +1,127 @@
+import React from "react";
+import { mount } from "enzyme";
+import Exclamation from "@figshare/fcl/icons/warning/small";
+import { IconButton } from "@figshare/fcl/button";
+import { Thumbnail } from "@figshare/viewers";
+
+import VirusTooltip from "../../../../../virusTooltip";
+import Context from "../../../../context";
+
+import Directory from "./index";
+
+
+jest.mock("../../../../../virusTooltip");
+jest.mock("@figshare/fcl/toggletip", () => {
+  return {
+    __esModule: true,
+    UncontrolledToggletip: ({ children }) => children(),
+    Trigger: ({ children, ...rest }) => children(rest),
+  };
+});
+
+
+describe("<ViewerThumbnailItem />", () => {
+  const context = {
+    item: {
+      folderStructure: { 1: "dir1" },
+      downloadUrl: "downloadUrl",
+      virusScanInfo: { virusFound: false },
+    },
+    levelHierarchy: [],
+    token: null,
+    onChangeParentDirectory: jest.fn(),
+  };
+
+  const props = {
+    directory: {
+      id: "dir1",
+      name: "dir1",
+      children: ["1"],
+      completePath: "dir1",
+      parentPath: "",
+      isDorectory: true,
+    },
+    downloadDisabled: false,
+  };
+
+  function mountComponent({ newContext, newProps }) {
+    return mount(
+      <Context.Provider value={ { ...context, ...newContext } }>
+        <Directory {...props} {...newProps} />
+      </Context.Provider>
+    );
+  }
+
+  it("renders directory", () => {
+    const tested = mountComponent({});
+
+    expect(tested.isEmptyRender()).toEqual(false);
+    expect(tested.find(".directory")).toHaveLength(1);
+    expect(tested.find(Thumbnail)).toHaveLength(1);
+  });
+
+  it("renders download button", () => {
+    const tested = mountComponent({});
+
+    const downloadBtn = tested.find(IconButton);
+    expect(downloadBtn).toHaveLength(1);
+    expect(downloadBtn.props().children).toEqual("Download folder");
+    expect(downloadBtn.props().href).toEqual(`${context.item.downloadUrl}?folder_path=${props.directory.completePath}`);
+  });
+
+  it("renders download button when there is a private token", () => {
+    const token = "token";
+    const tested = mountComponent({ newContext: { token } });
+
+    const downloadBtn = tested.find(IconButton);
+    expect(downloadBtn).toHaveLength(1);
+    expect(downloadBtn.props().children).toEqual("Download folder");
+
+    const href = `${context.item.downloadUrl}?folder_path=${props.directory.completePath}&private_link=${token}`;
+    expect(downloadBtn.props().href).toEqual(href);
+  });
+
+  it("renders download button when download is disabled", () => {
+    const tested = mountComponent({ newProps: { downloadDisabled: true } });
+
+    const downloadBtn = tested.find(IconButton);
+    expect(downloadBtn).toHaveLength(1);
+    expect(downloadBtn.props().children).toEqual("This item contains files with download restrictions");
+    expect(downloadBtn.props().href).toEqual();
+    expect(downloadBtn.props().disabled).toEqual(true);
+  });
+
+  it("renders download button when virus found", () => {
+    const tested = mountComponent(
+      { newContext: { item: { downloadUrl: "downloadUrl", virusScanInfo: { virusFound: true } } } }
+    );
+
+    const downloadBtn = tested.find(IconButton);
+    expect(downloadBtn).toHaveLength(1);
+    expect(downloadBtn.props().children).toEqual("Download folder");
+    expect(downloadBtn.props().href).toEqual();
+
+    expect(tested.find(VirusTooltip)).toHaveLength(1);
+    expect(tested.find(Exclamation)).toHaveLength(1);
+  });
+
+  it("renders no download button when there is no download url", () => {
+    const tested = mountComponent({ newContext: { item: { downloadUrl: "" } } });
+
+    const downloadBtn = tested.find(IconButton);
+    expect(downloadBtn).toHaveLength(0);
+
+    expect(tested.find(Exclamation)).toHaveLength(1);
+  });
+
+  it("handles on click", () => {
+    const tested = mountComponent({});
+
+    tested.instance().onClick();
+    expect(context.onChangeParentDirectory).toHaveBeenCalledWith(
+      props.directory,
+      [...context.levelHierarchy, props.directory],
+      props.directory.children
+    );
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/icons/directory.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/icons/directory.jsx
new file mode 100644
index 0000000000..7022b58d01
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/icons/directory.jsx
@@ -0,0 +1,25 @@
+/* eslint-disable max-len */
+import React, { PureComponent } from "react";
+
+
+export default class DirectoryIcon extends PureComponent {
+  render() {
+    return (
+      <svg
+        aria-label="Directory"
+        fill="transparent"
+        preserveAspectRatio="xMidYMid meet"
+        role="img"
+        {...this.props}
+        viewBox="0 0 100 60"
+        xmlns="http://www.w3.org/2000/svg"
+      >
+        <rect fill="#525252" height="60" rx="3" width="100" />
+        <path
+          d="M32.8182 13C30.7095 13 29 14.7024 29 16.8025V43.4198C29 45.5198 30.7095 47.2222 32.8182 47.2222H67.1818C69.2905 47.2222 71 45.5198 71 43.4198V21.8724C71 19.7724 69.2905 18.07 67.1818 18.07H47.4545L42.1368 13.8332C41.4597 13.2939 40.6186 13 39.7516 13H32.8182Z"
+          fill="#F5F5F5"
+        />
+      </svg>
+    );
+  }
+}
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/icons/directoryInvert.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/icons/directoryInvert.jsx
new file mode 100644
index 0000000000..c7fd7b5543
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/icons/directoryInvert.jsx
@@ -0,0 +1,25 @@
+/* eslint-disable max-len */
+import React, { PureComponent } from "react";
+
+
+export default class DirectoryInvertIcon extends PureComponent {
+  render() {
+    return (
+      <svg
+        aria-label="Directory"
+        fill="transparent"
+        preserveAspectRatio="xMidYMid meet"
+        role="img"
+        {...this.props}
+        viewBox="0 0 18 18"
+        xmlns="http://www.w3.org/2000/svg"
+      >
+        <path
+          clipRule="evenodd"
+          d="M0 3.375C0 2.13398 1.00898 1.125 2.25 1.125H6.89414C7.56563 1.125 8.20898 1.39219 8.68359 1.8668L10.1918 3.375H15.75C16.991 3.375 18 4.38398 18 5.625V14.625C18 15.866 16.991 16.875 15.75 16.875H2.25C1.00898 16.875 0 15.866 0 14.625V3.375ZM2.25 2.8125C1.94062 2.8125 1.6875 3.06562 1.6875 3.375V14.625C1.6875 14.9344 1.94062 15.1875 2.25 15.1875H15.75C16.0594 15.1875 16.3125 14.9344 16.3125 14.625V5.625C16.3125 5.31563 16.0594 5.0625 15.75 5.0625H10.0758C9.70312 5.0625 9.34453 4.91484 9.08086 4.65117L7.4918 3.05859C7.33359 2.90039 7.11914 2.8125 6.89414 2.8125H2.25Z"
+          fillRule="evenodd"
+        />
+      </svg>
+    );
+  }
+}
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/index.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/index.jsx
new file mode 100644
index 0000000000..60eaec5712
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/components/directory/index.jsx
@@ -0,0 +1,144 @@
+import PropTypes from "prop-types";
+import React, { Component, Fragment } from "react";
+import { GenericButton, IconButton } from "@figshare/fcl/button";
+import DownloadIcon from "@figshare/fcl/icons/download";
+import DownloadLockIcon from "@figshare/fcl/icons/downloadLock";
+import Exclamation from "@figshare/fcl/icons/warning/small";
+import { Thumbnail } from "@figshare/viewers";
+import { Trigger, UncontrolledToggletip as Toggletip } from "@figshare/fcl/toggletip";
+
+import Context from "../../../../context";
+import VirusTooltip from "../../../../../virusTooltip";
+
+import DirectoryIcon from "./icons/directory";
+import DirectoryInvertIcon from "./icons/directoryInvert";
+import style from "./directory.css";
+
+
+export default class Directory extends Component {
+  static propTypes = {
+    directory: PropTypes.object.isRequired,
+    downloadDisabled: PropTypes.bool,
+  }
+
+  static defaultProps = { downloadDisabled: true }
+
+  static contextType = Context;
+
+  render() {
+    const { directory } = this.props;
+    const { name } = directory;
+
+    return (
+      <div className={style.directory}>
+        <GenericButton
+          className={style.button}
+          onClick={this.onClick}
+        >
+          <span className={style.thumbnail}>
+            <Thumbnail
+              Thumbnail={DirectoryIcon}
+              ThumbnailInvert={DirectoryInvertIcon}
+              viewerName="folder"
+              {...directory}
+            />
+          </span>
+          <span className={style.directoryDetails} title={name}>
+            <span className={style.directoryName}>{name}</span>
+            <span className={style.icons}>
+              {this.renderDownloadButton()}
+            </span>
+          </span>
+        </GenericButton >
+      </div>
+    );
+  }
+
+  renderDownloadButton = () => {
+    const { downloadDisabled, directory } = this.props;
+    const { item: { downloadUrl, virusScanInfo }, token } = this.context;
+
+    let downloadHref = `${downloadUrl}?folder_path=${directory.completePath}`;
+
+    if (token) {
+      downloadHref += `&private_link=${token}`;
+    }
+
+    if (downloadDisabled) {
+      return (
+        <IconButton
+          Icon={DownloadLockIcon}
+          disabled={true}
+          theme="tertiary"
+        >
+          This item contains files with download restrictions
+        </IconButton>
+      );
+    }
+
+    if (virusScanInfo?.virusFound) {
+      return this.renderDownloadWithVirus();
+    }
+
+    if (!downloadUrl) {
+      return (
+        <span title="Download is not available for this folder">
+          <Exclamation className={style.virusWarning} />
+        </span>
+      );
+    }
+
+    return (
+      <IconButton
+        Icon={DownloadIcon}
+        href={downloadHref}
+        theme="tertiary"
+        onClick={(event) => {
+          event.stopPropagation();
+        }}
+      >
+        Download folder
+      </IconButton>
+    );
+  }
+
+  renderDownloadWithVirus = () => (
+    <Toggletip>
+      {this.renderToggleTipContent}
+    </Toggletip>
+  )
+
+  renderToggleTipContent = () => (
+    <Fragment>
+      <Trigger>
+        {this.renderButton}
+      </Trigger>
+      <VirusTooltip className={style.virusTooltip} placement="bottom" />
+    </Fragment>
+  )
+
+  renderButton = (triggerProps) => {
+    const { ref, ...restProps } = triggerProps;
+
+    return (
+      <>
+        <IconButton
+          Icon={DownloadIcon}
+          innerRef={ref}
+          theme="tertiary"
+          {...restProps}
+        >
+          Download folder
+        </IconButton>
+        <Exclamation className={style.virusWarning} />
+      </>
+    );
+  }
+
+  onClick = () => {
+    const { directory } = this.props;
+    const { levelHierarchy, onChangeParentDirectory } = this.context;
+
+    onChangeParentDirectory(directory, [...levelHierarchy, directory], directory?.children);
+  }
+}
diff --git a/src/pages/item/page/components/viewer/components/listView/components/error/index.css b/src/pages/item/page/components/viewer/components/thumbnailView/components/error/error.css
similarity index 100%
rename from src/pages/item/page/components/viewer/components/listView/components/error/index.css
rename to src/pages/item/page/components/viewer/components/thumbnailView/components/error/error.css
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/error/index.test.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/error/error.test.jsx
similarity index 100%
rename from src/pages/item/page/components/viewer/components/thumbnailView/components/error/index.test.jsx
rename to src/pages/item/page/components/viewer/components/thumbnailView/components/error/error.test.jsx
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/error/index.css b/src/pages/item/page/components/viewer/components/thumbnailView/components/error/index.css
deleted file mode 100644
index aaaceae2b1..0000000000
--- a/src/pages/item/page/components/viewer/components/thumbnailView/components/error/index.css
+++ /dev/null
@@ -1,26 +0,0 @@
-.error {
-  font-weight: bold;
-
-  position: relative;
-
-  display: flex;
-  flex-direction: row;
-
-  width: 100%;
-  height: calc(10 * var(--gridSize));
-  margin-top: auto;
-  margin-bottom: auto;
-
-  text-align: center;
-
-  background: var(--color-layout-error-background);
-  justify-content: center;
-  align-items: center;
-  flex-shrink: 0;
-}
-
-.button {
-  font-weight: bold;
-
-  margin-left: calc(3 * var(--gridSize));
-}
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/error/index.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/error/index.jsx
index 6e8fe18270..8341a52d18 100644
--- a/src/pages/item/page/components/viewer/components/thumbnailView/components/error/index.jsx
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/components/error/index.jsx
@@ -2,7 +2,7 @@ import PropTypes from "prop-types";
 import React, { PureComponent } from "react";
 import { GenericButton } from "@figshare/fcl/button";
 
-import style from "./index.css";
+import style from "./error.css";
 
 
 export default class FilesListError extends PureComponent {
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/file/index.css b/src/pages/item/page/components/viewer/components/thumbnailView/components/file/file.css
similarity index 100%
rename from src/pages/item/page/components/viewer/components/thumbnailView/components/file/index.css
rename to src/pages/item/page/components/viewer/components/thumbnailView/components/file/file.css
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/file/index.test.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/file/file.test.jsx
similarity index 100%
rename from src/pages/item/page/components/viewer/components/thumbnailView/components/file/index.test.jsx
rename to src/pages/item/page/components/viewer/components/thumbnailView/components/file/file.test.jsx
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/file/index.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/file/index.jsx
index 82c629300f..ea631dd9e9 100644
--- a/src/pages/item/page/components/viewer/components/thumbnailView/components/file/index.jsx
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/components/file/index.jsx
@@ -11,9 +11,10 @@ import { Trigger, UncontrolledToggletip as Toggletip } from "@figshare/fcl/toggl
 import { isPartOfItemHighlight } from "shared/ui/highlights/utils";
 import filesize from "utils/filesize";
 
+import { getFileIndexById } from "../../../../utils";
 import VirusTooltip from "../../../../../virusTooltip";
 
-import style from "./index.css";
+import style from "./file.css";
 
 
 export default class File extends Component {
@@ -88,8 +89,8 @@ export default class File extends Component {
             <Thumbnail {...file} />
           </span>
           <span className={style.fileDetails} title={name}>
-            <span className={style.fileName}>{filename}.</span>
-            <span className={style.fileExtension}>{extension}</span>
+            <span className={style.fileName}>{filename}</span>
+            <span className={style.fileExtension}>{`.${extension}`}</span>
             <span className={style.fileSize}>{" "}({filesize(size).format()})</span>
             <span className={style.icons}>
               <IconButton
@@ -189,7 +190,13 @@ export default class File extends Component {
 
   onClick = () => {
     const { file, onClick } = this.props;
+    const { folderStructure } = this.context.item || {};
 
-    onClick(file.index)();
+    let fileIndex = file?.index;
+    if (folderStructure && Object.keys(folderStructure)?.length) {
+      fileIndex = getFileIndexById(file?.id, folderStructure);
+    }
+
+    onClick(fileIndex)();
   }
 }
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/loading/index.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/loading/index.jsx
index fcf1fddc5b..8acbcbb153 100644
--- a/src/pages/item/page/components/viewer/components/thumbnailView/components/loading/index.jsx
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/components/loading/index.jsx
@@ -1,7 +1,7 @@
 import PropTypes from "prop-types";
 import React, { Component } from "react";
 
-import style from "./index.css";
+import style from "./loading.css";
 
 
 export default class Loading extends Component {
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/loading/index.css b/src/pages/item/page/components/viewer/components/thumbnailView/components/loading/loading.css
similarity index 100%
rename from src/pages/item/page/components/viewer/components/thumbnailView/components/loading/index.css
rename to src/pages/item/page/components/viewer/components/thumbnailView/components/loading/loading.css
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/components/loading/loading.test.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/components/loading/loading.test.jsx
new file mode 100644
index 0000000000..a3e4850f77
--- /dev/null
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/components/loading/loading.test.jsx
@@ -0,0 +1,23 @@
+import React from "react";
+import { mount } from "enzyme";
+
+import Loading from "./index";
+
+
+describe("<FilesViewerLoadingComponent />", () => {
+  it("renders", () => {
+    const tested = mount(<Loading length={2} loading={true} />);
+    expect(tested.isEmptyRender()).toEqual(false);
+
+    tested.setProps({ loading: false });
+    expect(tested.isEmptyRender()).toEqual(true);
+  });
+
+  it("renders more loaders", () => {
+    const tested = mount(<Loading length={2} loading={true} />);
+    expect(tested.find(".file")).toHaveLength(2);
+
+    tested.setProps({ length: 3 });
+    expect(tested.find(".file")).toHaveLength(3);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/index.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/index.jsx
index eba60cf635..94763a798e 100644
--- a/src/pages/item/page/components/viewer/components/thumbnailView/index.jsx
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/index.jsx
@@ -3,10 +3,11 @@ import PropTypes from "prop-types";
 
 import { VIEW_MODES } from "../../constants";
 import Context from "../../context";
+import { getFileIndexById } from "../../utils";
 
 import App from "./app";
 // eslint-disable-next-line css-modules/no-unused-class
-import styles from "./index.css";
+import styles from "./thumbnailView.css";
 
 
 const MAX_WIDTH = 2560;
@@ -112,7 +113,6 @@ export default class ThumbnailView extends Component {
         setFirstHighlightIndex={this.setFirstHighlightIndex}
         viewportRef={this.setViewportRef}
         onBlur={this.onBlur}
-        onChangeFile={this.onChangeFile}
         onFocus={this.onFocus}
         onKeyDown={this.onKeyDown}
         onKeyUp={this.onKeyUp}
@@ -127,10 +127,6 @@ export default class ThumbnailView extends Component {
   setThumbnailsContainerRef = (node) => this.thumbnailsContainer = node;
   setViewportRef = (node) => this.viewport = node;
 
-  onChangeFile = (index, showDetails) => {
-    this.context.onChangeFile(index, showDetails);
-  }
-
   onResize = () => {
     clearTimeout(this.resizeTimeout);
     const {
@@ -143,7 +139,7 @@ export default class ThumbnailView extends Component {
     if (this.state.viewportSize.width !== width || this.state.viewportSize.height !== height) {
       this.setState({ viewportSize }, () => {
         const { files, filesCanLoadMore, filesLoading, onLoadMoreFiles } = this.context;
-        const diff = files.length % this.itemsPerPage;
+        const diff = files?.length % this.itemsPerPage;
 
         const delay = 300;
         if (diff > 0 && filesCanLoadMore && !filesLoading) {
@@ -457,17 +453,22 @@ export default class ThumbnailView extends Component {
   }
 
   get pages() {
-    const { files } = this.context;
-    const pages = [];
+    const { files, item } = this.context;
 
-    const items = this.itemsPerPage;
+    const pages = [];
+    const { itemsPerPage } = this;
 
-    files.forEach((file, index) => {
-      if (index % items === 0) {
+    files?.forEach((file, index) => {
+      if (index % itemsPerPage === 0) {
         pages.push([]);
       }
 
-      file.index = index;
+      let fileIndex = index;
+      if (item?.folderStructure && Object.keys(item.folderStructure)?.length) {
+        fileIndex = getFileIndexById(file?.id, item.folderStructure);
+      }
+
+      file.index = fileIndex;
       pages[pages.length - 1].push(file);
     });
 
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/index.css b/src/pages/item/page/components/viewer/components/thumbnailView/thumbnailView.css
similarity index 97%
rename from src/pages/item/page/components/viewer/components/thumbnailView/index.css
rename to src/pages/item/page/components/viewer/components/thumbnailView/thumbnailView.css
index bd4336694a..9344e76567 100644
--- a/src/pages/item/page/components/viewer/components/thumbnailView/index.css
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/thumbnailView.css
@@ -121,13 +121,13 @@
 
   display: flex;
   flex-direction: row;
-  gap: calc(2 * var(--gridSize));
+  gap: calc(2.5 * var(--gridSize));
 
   width: 100%;
   height: 100%;
   flex-shrink: 0;
   flex-wrap: wrap;
-  justify-content: space-between;
+  justify-content: flex-start;
 
   margin-right: calc(3 * var(--gridSize));
 }
diff --git a/src/pages/item/page/components/viewer/components/thumbnailView/index.test.jsx b/src/pages/item/page/components/viewer/components/thumbnailView/thumbnailView.test.jsx
similarity index 98%
rename from src/pages/item/page/components/viewer/components/thumbnailView/index.test.jsx
rename to src/pages/item/page/components/viewer/components/thumbnailView/thumbnailView.test.jsx
index 372760e3f6..ea93290063 100644
--- a/src/pages/item/page/components/viewer/components/thumbnailView/index.test.jsx
+++ b/src/pages/item/page/components/viewer/components/thumbnailView/thumbnailView.test.jsx
@@ -60,14 +60,6 @@ describe("<ViewersThumbnailView />", () => {
     tested.unmount();
   });
 
-  it("handles onChangeFile", () => {
-    const onChangeFile = jest.fn();
-    const tested = mount(<Wrapped filesCanLoadMore={false} onChangeFile={onChangeFile} />);
-    const instance = tested.find(TestedComponent).instance();
-    instance.onChangeFile(0, true);
-    expect(onChangeFile).toHaveBeenCalledWith(0, true);
-  });
-
   it("doesn't update state on resize if viewport hasn't changed", () => {
     const tested = mount(<Wrapped />);
     const instance = tested.find(TestedComponent).instance();
diff --git a/src/pages/item/page/components/viewer/getFiles.gql b/src/pages/item/page/components/viewer/getFiles.gql
index 94989defc4..d277bb70c8 100644
--- a/src/pages/item/page/components/viewer/getFiles.gql
+++ b/src/pages/item/page/components/viewer/getFiles.gql
@@ -1,8 +1,8 @@
-query getPublicItemFiles($itemId: Int!, $version: Int, $cursor: String!, $pageSize: Int!) {
+query getPublicItemFiles($itemId: Int!, $version: Int, $cursor: String!, $pageSize: Int!, $fileIds: [Int]) {
   publicItem: itemVersion(id: $itemId, version: $version) {
     id
     filesCount
-    files(pageSize: $pageSize, cursor: $cursor) {
+    files(pageSize: $pageSize, cursor: $cursor, fileIds: $fileIds) {
       cursor
       items: elements {
         id
@@ -28,11 +28,11 @@ query getPublicItemFiles($itemId: Int!, $version: Int, $cursor: String!, $pageSi
   }
 }
 
-query getPrivateItemFiles($itemId: Int!, $cursor: String!, $pageSize: Int!) {
+query getPrivateItemFiles($itemId: Int!, $cursor: String!, $pageSize: Int!, $fileIds: [Int]) {
   item: article(id: $itemId) {
     id
     filesCount
-    files(pageSize: $pageSize, cursor: $cursor) {
+    files(pageSize: $pageSize, cursor: $cursor, fileIds: $fileIds) {
       cursor
       items: elements {
         id
@@ -58,12 +58,12 @@ query getPrivateItemFiles($itemId: Int!, $cursor: String!, $pageSize: Int!) {
   }
 }
 
-query getSharedItemFiles($token: String!, $cursor: String!, $pageSize: Int!) {
+query getSharedItemFiles($token: String!, $cursor: String!, $pageSize: Int!, $fileIds: [Int]) {
   privateLink(token: $token) {
     entityType
     item {
       filesCount
-      files(pageSize: $pageSize, cursor: $cursor) {
+      files(pageSize: $pageSize, cursor: $cursor, fileIds: $fileIds) {
         cursor
         items: elements {
           id
@@ -90,12 +90,12 @@ query getSharedItemFiles($token: String!, $cursor: String!, $pageSize: Int!) {
   }
 }
 
-query getCollectionSharedItemFiles($itemId: Int!, $token: String!, $cursor: String!, $pageSize: Int!) {
+query getCollectionSharedItemFiles($itemId: Int!, $token: String!, $cursor: String!, $pageSize: Int!, $fileIds: [Int]) {
   privateLink(token: $token) {
     entityType
     collectionPrivateItem(itemId: $itemId) {
       filesCount
-      files(pageSize: $pageSize, cursor: $cursor)  {
+      files(pageSize: $pageSize, cursor: $cursor, fileIds: $fileIds)  {
         cursor,
         items: elements {
           id
diff --git a/src/pages/item/page/components/viewer/gqlMocks.js b/src/pages/item/page/components/viewer/gqlMocks.js
index 26d919ab82..3d7acc8231 100644
--- a/src/pages/item/page/components/viewer/gqlMocks.js
+++ b/src/pages/item/page/components/viewer/gqlMocks.js
@@ -13,6 +13,7 @@ const variables = {
   version: 1,
   cursor: "",
   pageSize: 20,
+  fileIds: [],
 };
 
 
@@ -75,6 +76,7 @@ export default [{
       token: "testtoken",
       cursor: "",
       pageSize: 20,
+      fileIds: [],
     },
   },
   result: {
@@ -98,6 +100,7 @@ export default [{
       token: "testtoken",
       cursor: "",
       pageSize: 20,
+      fileIds: [],
     },
   },
   result: {
@@ -121,6 +124,7 @@ export default [{
       itemId: 1,
       cursor: "",
       pageSize: 20,
+      fileIds: [],
     },
   },
   result: {
diff --git a/src/pages/item/page/components/viewer/index.jsx b/src/pages/item/page/components/viewer/index.jsx
index cede7a9249..e04f8abef9 100644
--- a/src/pages/item/page/components/viewer/index.jsx
+++ b/src/pages/item/page/components/viewer/index.jsx
@@ -1,4 +1,4 @@
-/* eslint-disable max-lines */
+/* eslint-disable complexity */
 import classnames from "classnames";
 import PropTypes from "prop-types";
 import qs from "query-string";
@@ -11,6 +11,8 @@ import getIn from "utils/getIn";
 import PageContext from "../../context";
 
 import EmbargoedFileScreen from "./components/errors/embargoedFile";
+import FilesMerger from "./components/filesMerger";
+import PathLevels from "./components/pathLevels";
 import PrivateFileScreen from "./components/errors/privateFile";
 import ControlsBar from "./components/controlsBar";
 import InactiveOverlay from "./components/inactiveOverlay";
@@ -23,7 +25,8 @@ import {
   getSharedItemFiles,
 } from "./getFiles.gql";
 import { VIEW_MODES, DISPLAY_MODE } from "./constants";
-import style from "./index.css";
+import { getFileIndexById, mapFolderStructure } from "./utils";
+import style from "./viewer.css";
 
 
 const ITEMS_PER_PAGE = 20;
@@ -44,10 +47,15 @@ export class Viewer extends Component {
   constructor(...args) {
     super(...args);
 
+    const mappedFolderStructure = mapFolderStructure(this.context?.item?.folderStructure);
+
     this.state = {
       active: this.props.filesCount > 1,
       activeFileIndex: 0,
       filesLoading: false,
+      levelHierarchy: [],
+      mappedFolderStructure,
+      parentDirectory: { name: "", children: mappedFolderStructure, completePath: "", parentPath: "" },
       fsStatus: false,
       showFileDetails: undefined,
       showSideListOnDesktop: false,
@@ -105,10 +113,12 @@ export class Viewer extends Component {
       confidentialReason,
       filesCount,
       files,
+      folderStructure,
     } = item;
 
+    const { parentDirectory } = this.state;
     const isEmbargoOnFiles = (embargoType === EMBARGO_TYPE_FILES.value);
-    const receivedFiles = files.elements?.length;
+    const receivedFiles = files?.elements?.length;
 
     if (isEmbargoed && isEmbargoOnFiles && filesCount && !receivedFiles) {
       return (
@@ -131,11 +141,22 @@ export class Viewer extends Component {
     }
 
     let query = getPublicItemFiles;
+    let skip = false;
+
+    const fileIds = parentDirectory?.children?.filter((element) =>
+      typeof element === "number" || typeof element === "string");
+
+    // there are only folders on specific level of folder structure
+    if (folderStructure && Object.keys(folderStructure)?.length && !fileIds?.length) {
+      skip = true;
+    }
+
     let variables = {
       itemId: id,
       version,
       cursor: "",
       pageSize: ITEMS_PER_PAGE,
+      fileIds,
     };
 
     if (isSharedInCollection) {
@@ -145,6 +166,7 @@ export class Viewer extends Component {
         token: sharedCollectionToken,
         cursor: "",
         pageSize: ITEMS_PER_PAGE,
+        fileIds,
       };
     }
 
@@ -154,6 +176,7 @@ export class Viewer extends Component {
         token,
         cursor: "",
         pageSize: ITEMS_PER_PAGE,
+        fileIds,
       };
     }
 
@@ -163,49 +186,51 @@ export class Viewer extends Component {
         itemId: id,
         cursor: "",
         pageSize: ITEMS_PER_PAGE,
+        fileIds,
       };
     }
 
     return (
-      <Query query={query} variables={variables}>
+      <Query query={query} skip={skip} variables={variables}>
         {this.renderWithQueryResult}
       </Query>
     );
   }
 
   renderWithQueryResult = ({ loading, error, data, fetchMore }) => {
-    if (!data) {
+    if (error) {
       return null;
     }
 
-
     this.fetchMore = fetchMore;
-    const { item, token } = this.context;
+    const { item, token, isSharedInCollection, isShared, isPrivate, sharedCollectionToken } = this.context;
+    const { filesLoading, parentDirectory, mappedFolderStructure } = this.state;
+    const { filesCount, location } = this.props;
 
     const context = {
       ...this.state,
       item,
       token,
-      filesCount: this.props.filesCount,
-      filesLoading: loading || this.state.filesLoading,
-      filesLoadingMore: this.state.filesLoading,
-      itemsPerPage: ITEMS_PER_PAGE,
+      filesCount,
       filesError: error,
+      filesLoading: loading || filesLoading,
+      filesLoadingMore: filesLoading,
+      itemsPerPage: ITEMS_PER_PAGE,
       onActivate: this.onActivate,
-      onChangeViewMode: this.onChangeViewMode,
-      onToggleSideListView: this.onToggleSideListView,
       onChangeFile: this.onChangeFile,
+      onChangeParentDirectory: this.onChangeParentDirectory,
+      onChangeViewMode: this.onChangeViewMode,
       onShowFileDetails: this.onShowFileDetails,
       onToggleFullscreen: this.onToggleFullscreen,
+      onToggleSideListView: this.onToggleSideListView,
       setViewerControlsProps: this.setViewerControlsProps,
       setSideListVisibilityKey: this.setSideListVisibilityKey,
     };
 
-    if (this.props.filesCount <= 1) {
+    if (filesCount <= 1) {
       context.viewMode = VIEW_MODES.single;
     }
 
-    const { isSharedInCollection, isShared, isPrivate, sharedCollectionToken } = this.context;
     let receivedFiles = null;
     if (isSharedInCollection) {
       receivedFiles = getIn(data, "privateLink.collectionPrivateItem.files");
@@ -231,7 +256,7 @@ export class Viewer extends Component {
     }
 
     if (privateLinkParam) {
-      receivedFiles.items.forEach((file) => {
+      receivedFiles?.items.forEach((file) => {
         if (file.isLinkOnly) {
           return;
         }
@@ -244,15 +269,31 @@ export class Viewer extends Component {
       });
     }
 
+    const computeFiles = (received) => {
+      const directories = mappedFolderStructure?.filter((element) => {
+        if (typeof element === "object" && element.parentPath === parentDirectory?.completePath) {
+          return element;
+        }
+
+        return null;
+      });
+
+      return received?.items ? [...directories, ...received?.items] : directories;
+    };
+
+    const { folderStructure } = item || {};
+
     context.filesCanLoadMore = !!nextCursor;
-    context.files = receivedFiles.items;
+    context.files =
+      folderStructure && Object.keys(folderStructure)?.length ? computeFiles(receivedFiles) : receivedFiles?.items;
     context.cursor = nextCursor;
-    this.files = context.files;
 
-    const query = qs.parse(this.props.location.search);
+    const query = qs.parse(location.search);
 
     if (query.file) {
-      const index = context.files.findIndex((file) => file.id === parseInt(query.file, 10));
+      const index =
+        folderStructure && Object.keys(folderStructure)?.length ? getFileIndexById(
+          query.file, folderStructure) : context.files?.findIndex((file) => file.id === parseInt(query.file, 10));
 
       if (index !== -1) {
         context.activeFileIndex = index;
@@ -270,15 +311,34 @@ export class Viewer extends Component {
     const { fsStatus } = this.state;
 
     const mainContainerClassName = [style.mainContainer, { [style.mainContainerFS]: fsStatus }];
+    const showPathLevels = context.viewMode === VIEW_MODES.thumbnail || context.viewMode === VIEW_MODES.list;
 
     return (
       <Context.Provider value={context}>
         <div ref={this.setRef} className={style.viewer}>
-          <div className={classnames(mainContainerClassName)}>
-            <Main />
-            <InactiveOverlay />
-          </div>
-          <ControlsBar />
+          {showPathLevels && <PathLevels />}
+          <FilesMerger files={context.files} isLoadingFiles={context.filesLoading}>
+            {({ files }, isLoadingFiles) => {
+              this.files = folderStructure && Object.keys(folderStructure)?.length ? files?.map(
+                (file) => {
+                  return {
+                    ...file,
+                    index: getFileIndexById(file.id, folderStructure),
+                    parentPath: folderStructure?.[file.id],
+                  };
+                }) : files;
+
+              return (
+                <>
+                  <div className={classnames(mainContainerClassName)}>
+                    <Main isLoadingFiles={isLoadingFiles} loadedFiles={this.files} />
+                    <InactiveOverlay loadedFiles={this.files} />
+                  </div>
+                  <ControlsBar loadedFiles={this.files} />
+                </>
+              );
+            }}
+          </FilesMerger>
         </div>
       </Context.Provider>
     );
@@ -298,9 +358,10 @@ export class Viewer extends Component {
   onChangeFile = (activeFileIndex, showDetails = false) => {
     const showFileDetails = showDetails ? activeFileIndex : undefined;
     const viewMode = VIEW_MODES.single;
-    const file = this.files[activeFileIndex];
+    const file = this.files?.find((el) => (el.index >= 0 && el.index === activeFileIndex)) ||
+      this.files?.[activeFileIndex];
     const { history, location } = this.props;
-    history.push(`${location.pathname}?file=${file.id}`);
+    history.push(`${location.pathname}?file=${file?.id}`);
 
     this.setState({
       activeFileIndex,
@@ -397,6 +458,9 @@ export class Viewer extends Component {
     this.setState(stateUpdates);
   }
 
+  onChangeParentDirectory = (parentDirectory, levelHierarchy, mappedFolderStructure, callback) =>
+    this.setState({ parentDirectory, levelHierarchy, mappedFolderStructure }, callback);
+
   setSideListVisibilityKey = (key) => {
     let showSideListOnDesktop = !!parseInt(window.localStorage.getItem(key), 10);
 
diff --git a/src/pages/item/page/components/viewer/utils.js b/src/pages/item/page/components/viewer/utils.js
new file mode 100644
index 0000000000..6b25881556
--- /dev/null
+++ b/src/pages/item/page/components/viewer/utils.js
@@ -0,0 +1,48 @@
+export const getFileIndexById = (fileId, folderStructure = {}) => {
+  const fileIdsArray = Object.keys(folderStructure);
+
+  return fileIdsArray.indexOf(fileId.toString());
+};
+
+export const mapFolderStructure = (folderStructure = {}) => {
+  const result = [];
+  const level = { result };
+
+  Object.entries(folderStructure)?.forEach(([fileId, path]) => {
+    const pathsArray = path.split("/");
+
+    pathsArray.reduce((acc, name) => {
+      if (fileId && !path) {
+        acc.result.push(fileId);
+
+        return acc;
+      }
+
+      if (!acc[name]) {
+        acc[name] = name === pathsArray[pathsArray.length - 1] ? { result: [fileId] } : { result: [] };
+        acc.result.push(
+          {
+            id: path,
+            name,
+            children: acc[name].result,
+            completePath: path,
+            parentPath: path?.substr(0, path.length - name.length - 1),
+            isDirectory: true,
+          }
+        );
+
+        return acc[name];
+      }
+
+      if (acc[name] && path.substr(path.lastIndexOf("/") + 1, path.length) === name) {
+        acc[name].result.push(fileId);
+
+        return acc[name];
+      }
+
+      return acc[name];
+    }, level);
+  });
+
+  return result;
+};
diff --git a/src/pages/item/page/components/viewer/utils.test.js b/src/pages/item/page/components/viewer/utils.test.js
new file mode 100644
index 0000000000..39824c4d99
--- /dev/null
+++ b/src/pages/item/page/components/viewer/utils.test.js
@@ -0,0 +1,78 @@
+const utils = require("./utils");
+
+
+const folderStructure = {
+  "100": "dir1",
+  "101": "dir1/dir2",
+  "102": "dir1/dir2/dir3",
+  "103": "",
+  "104": "dir4",
+};
+
+describe("getFileIndexById", () => {
+  it("should return index of file from folder structure", () => {
+    const index0 = utils.getFileIndexById(100, folderStructure);
+    expect(index0).toEqual(0);
+
+    const index1 = utils.getFileIndexById(101, folderStructure);
+    expect(index1).toEqual(1);
+
+    const index2 = utils.getFileIndexById(102, folderStructure);
+    expect(index2).toEqual(2);
+
+    const index3 = utils.getFileIndexById("103", folderStructure);
+    expect(index3).toEqual(3);
+
+    const index4 = utils.getFileIndexById("104", folderStructure);
+    expect(index4).toEqual(4);
+
+    const index5 = utils.getFileIndexById(105, folderStructure);
+    expect(index5).toEqual(-1);
+  });
+});
+
+
+describe("mapFolderStructure", () => {
+  it("should map folder structure", () => {
+    const mappedFolderStructure = utils.mapFolderStructure(folderStructure);
+    expect(mappedFolderStructure).toEqual([
+      {
+        "children": [
+          "100",
+          {
+            "children": [
+              "101",
+              {
+                "children": ["102"],
+                "completePath": "dir1/dir2/dir3",
+                "id": "dir1/dir2/dir3",
+                "isDirectory": true,
+                "name": "dir3",
+                "parentPath": "dir1/dir2",
+              },
+            ],
+            "completePath": "dir1/dir2",
+            "id": "dir1/dir2",
+            "isDirectory": true,
+            "name": "dir2",
+            "parentPath": "dir1",
+          },
+        ],
+        "completePath": "dir1",
+        "id": "dir1",
+        "isDirectory": true,
+        "name": "dir1",
+        "parentPath": "",
+      },
+      "103",
+      {
+        "children": ["104"],
+        "completePath": "dir4",
+        "id": "dir4",
+        "isDirectory": true,
+        "name": "dir4",
+        "parentPath": "",
+      },
+    ]);
+  });
+});
diff --git a/src/pages/item/page/components/viewer/index.css b/src/pages/item/page/components/viewer/viewer.css
similarity index 98%
rename from src/pages/item/page/components/viewer/index.css
rename to src/pages/item/page/components/viewer/viewer.css
index ffb57cf5de..4165804dec 100644
--- a/src/pages/item/page/components/viewer/index.css
+++ b/src/pages/item/page/components/viewer/viewer.css
@@ -16,7 +16,7 @@
 
   display: flex;
   overflow: hidden;
-  flex-direction: row;
+  flex-direction: column;
 
   width: 100%;
 
diff --git a/src/pages/item/page/components/viewer/index.test.jsx b/src/pages/item/page/components/viewer/viewer.test.jsx
similarity index 98%
rename from src/pages/item/page/components/viewer/index.test.jsx
rename to src/pages/item/page/components/viewer/viewer.test.jsx
index 91ba56397d..716238cc1e 100644
--- a/src/pages/item/page/components/viewer/index.test.jsx
+++ b/src/pages/item/page/components/viewer/viewer.test.jsx
@@ -21,8 +21,8 @@ jest.mock("../ratingSystem/tooltip");
 jest.mock("./components/controlsBar");
 jest.mock("./components/inactiveOverlay");
 jest.mock("./components/fileView");
-jest.mock("./components/fileDetailsSidebar");
-jest.mock("./components/sidebar");
+jest.mock("./components/fileView/fileDetailsSidebar");
+jest.mock("./components/fileView/sidebar");
 jest.mock("./components/errors/embargoedFile");
 jest.mock("./components/errors/privateFile");
 jest.mock("@figshare/fcl/popup");
@@ -37,7 +37,11 @@ let item = null;
 
 class Wrapped extends Component {
   render() {
-    const context = { item, domainData: { domain: "test" }, ...this.props };
+    const context = {
+      item: { folderStructure: {} },
+      domainData: { domain: "test" },
+      ...this.props,
+    };
     const history = { push: jest.fn() };
     const location = { search: "" };
 
@@ -319,7 +323,7 @@ describe("<ViewerSystem />", () => {
   });
 
   it("handles selected file url", async() => {
-    const locationWithInvalidFile = { search: "?file=-1" };
+    const locationWithInvalidFile = { search: "" };
     const tested = mount(<Wrapped location={locationWithInvalidFile} />);
     await mocks[0].response();
     expect(tested.find(FileView)).toHaveLength(0);
diff --git a/src/pages/item/page/mocks/item.js b/src/pages/item/page/mocks/item.js
index 5a4e3696ff..b06062e574 100644
--- a/src/pages/item/page/mocks/item.js
+++ b/src/pages/item/page/mocks/item.js
@@ -35,6 +35,7 @@ export default {
   "mintingInfo": null,
   "thumb": null,
   "resourceDoi": "test",
+  "folderStructure": {},
   "project": {
     "isPublic": true,
     "id": 1,
diff --git a/src/pages/item/preview/index.gql b/src/pages/item/preview/index.gql
index ce85f72c9d..06e35cc8d9 100644
--- a/src/pages/item/preview/index.gql
+++ b/src/pages/item/preview/index.gql
@@ -32,6 +32,7 @@ query item($id: Int!) {
     createdDate
     description
     downloadDisabled
+    folderStructure
     modifiedDate
     version
     filesCount
diff --git a/src/pages/item/public/index.gql b/src/pages/item/public/index.gql
index 31e223cc53..7bb2b4b2c3 100644
--- a/src/pages/item/public/index.gql
+++ b/src/pages/item/public/index.gql
@@ -35,6 +35,7 @@ query item($id: Int!, $version: Int) {
     createdDate
     description
     downloadDisabled
+    folderStructure
     curationReviewDate
     publishedDate
     modifiedDate